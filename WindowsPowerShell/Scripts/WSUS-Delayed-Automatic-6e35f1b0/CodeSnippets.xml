<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="Param(&#xD;&#xA;&#x9;[string]$WsusServer = (([system.net.dns]::GetHostByName('localhost')).hostname),&#xD;&#xA;&#x9;[int]$PortNumber = 8530,&#xD;&#xA;&#x9;[bool]$UseSSL = $False,&#xD;&#xA;&#x9;[bool]$TrialRun = $False&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;[bool]$Debug = $False&#xD;&#xA;&#xD;&#xA;#Connect to the WSUS 3.0 interface.&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | out-null&#xD;&#xA;$UpdateServer = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer($WsusServer,$UseSSL,$PortNumber);&#xD;&#xA;If($? -eq $False) {&#xD;&#xA;&#x9;$ErrorActionPreference = $script:CurrentErrorActionPreference&#xD;&#xA;&#x9;Return&#xD;&#xA;} Else {&#xD;&#xA;&#x9;$UpdateServer&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;$InstallApprovalRules = $UpdateServer.GetInstallApprovalRules() | Where { $_.Name -like &quot;Delayed*&quot;} &#xD;&#xA;If($InstallApprovalRules) {&#xD;&#xA;&#x9;$InstallApprovalRules | ForEach {&#xD;&#xA;&#x9;&#x9;[int]$Count = 0&#xD;&#xA;&#x9;&#x9;[bool]$Warning = $False&#xD;&#xA;&#x9;&#x9;$_&#xD;&#xA;&#x9;&#x9;[String]::Format(&quot;Name: {0}&quot;, $_.Name)&#xD;&#xA;&#x9;&#x9;If ($_.Enabled) {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Enabled: {0} WARNING&quot;, $_.Enabled)&#xD;&#xA;&#x9;&#x9;&#x9;$Warning = $True&#xD;&#xA;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Enabled: {0}&quot;, $_.Enabled)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;If ($_.Deadline) {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Deadline: {0} days and {1} Minutes after Midnight (UTC)&quot;, $_.Deadline.DayOffSet, $_.Deadline.MinutesAfterMidnight)&#xD;&#xA;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Deadline: {0}&quot;,&quot;No set&quot;)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;If ([int]$_.Name.Split(&quot; &quot;)[1] -gt 0) {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Delayed: {0} days&quot;, [int]$_.Name.Split(&quot; &quot;)[1])&#xD;&#xA;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Delayed: Not set WARNING&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;$Warning = $True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;[String]::Format(&quot;Categories: {0}&quot;, $_.GetCategories().Count)&#xD;&#xA;&#x9;&#x9;[String]::Format(&quot;Classifications: {0}&quot;, $_.GetUpdateClassifications().Count)&#xD;&#xA;&#x9;&#x9;[String]::Format(&quot;Computer target groups: {0}&quot;,$_.GetComputerTargetGroups().Count)&#xD;&#xA;&#x9;&#x9;If (!$Warning) {&#xD;&#xA;&#x9;&#x9;&#x9;$UpdateScope = New-Object Microsoft.UpdateServices.Administration.UpdateScope&#xD;&#xA;&#x9;&#x9;&#x9;$UpdateApprovalScope = New-Object Microsoft.UpdateServices.Administration.UpdateApprovalScope&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;$UpdateScope.Categories.AddRange($_.GetCategories())&#xD;&#xA;&#x9;&#x9;&#x9;$UpdateScope.Classifications.AddRange($_.GetUpdateClassifications())&#xD;&#xA;&#x9;&#x9;&#x9;$updateScope.toArrivalDate = [DateTime]::UtcNow.Adddays(-1 * [int]$_.Name.Split(&quot; &quot;)[1])&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;$DelayedUpdates =  ($UpdateServer.GetUpdates($UpdateScope) | Where {!$_.IsDeclined})&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;ForEach ($DelayedUpdate in $DelayedUpdates ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;[bool]$Approved = $False&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;If ($Debug) {$DelayedUpdate.Title}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;If ($DelayedUpdate.isApproved) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ForEach ($GroupApproval in $DelayedUpdate.GetUpdateApprovals()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ForEach ($TargetGroup in $_.GetComputerTargetGroups()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($GroupApproval.ComputerTargetGroupId -eq $TargetGroup.Id) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$Approved = $True&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($Debug) {&quot;Approved for &quot; + $TargetGroup.Name}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($GroupApproval.ComputerTargetGroupId -eq [Microsoft.UpdateServices.Administration.ComputerTargetGroupId]::AllComputers) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$Approved = $True&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($Debug) {&quot;Approved for &quot; + $UpdateServer.GetComputerTargetGroup([Microsoft.UpdateServices.Administration.ComputerTargetGroupId]::AllComputers).Name}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($Approved) { break }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;If (!$Approved) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Count ++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If ($Debug) {&quot;Not Approved&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If (!$Trialrun) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If (!$Debug) {$DelayedUpdate.Title}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ForEach ($ComputerGroup in $_.GetComputerTargetGroups()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($_.Deadline) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[dateTime]$Deadline = [datetime]::UtcNow.Date.Adddays($_.Deadline.DayOffSet).AddMinutes($_.Deadline.MinutesAfterMidnight)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($DelayedUpdate.Approve(&quot;Install&quot;, $ComputerGroup, $Deadline)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[String]::Format(&quot;Approved for targetgroup {0} with deadline {1}&quot;, $ComputerGroup.Name, $Deadline)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($DelayedUpdate.Approve(&quot;Install&quot;, $ComputerGroup)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[String]::Format(&quot;Approved for targetgroup {0}&quot;, $ComputerGroup.Name)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Affected updates: {0}&quot;, $Count)&#xD;&#xA;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Affected updates: {0}&quot;, &quot;Skipped Warning&quot;)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&quot;&quot;&#xD;&#xA;&#x9;} &#xD;&#xA;} Else {&#x9;&#xD;&#xA;&#x9;&quot;No Delayed Install Approval Rules found&quot;&#xD;&#xA;}" />
  <Code Content="Param(&#xD;&#xA;&#x9;[string]$WsusServer = (([system.net.dns]::GetHostByName('localhost')).hostname),&#xD;&#xA;&#x9;[int]$PortNumber = 8530,&#xD;&#xA;&#x9;[bool]$UseSSL = $False,&#xD;&#xA;&#x9;[bool]$TrialRun = $False&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;[bool]$Debug = $False&#xD;&#xA;&#xD;&#xA;#Connect to the WSUS 3.0 interface.&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | out-null&#xD;&#xA;$UpdateServer = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer($WsusServer,$UseSSL,$PortNumber);&#xD;&#xA;If($? -eq $False) {&#xD;&#xA;&#x9;$ErrorActionPreference = $script:CurrentErrorActionPreference&#xD;&#xA;&#x9;Return&#xD;&#xA;} Else {&#xD;&#xA;&#x9;$UpdateServer&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;$InstallApprovalRules = $UpdateServer.GetInstallApprovalRules() | Where { $_.Name -like &quot;Delayed*&quot;} &#xD;&#xA;If($InstallApprovalRules) {&#xD;&#xA;&#x9;$InstallApprovalRules | ForEach {&#xD;&#xA;&#x9;&#x9;[int]$Count = 0&#xD;&#xA;&#x9;&#x9;[bool]$Warning = $False&#xD;&#xA;&#x9;&#x9;$_&#xD;&#xA;&#x9;&#x9;[String]::Format(&quot;Name: {0}&quot;, $_.Name)&#xD;&#xA;&#x9;&#x9;If ($_.Enabled) {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Enabled: {0} WARNING&quot;, $_.Enabled)&#xD;&#xA;&#x9;&#x9;&#x9;$Warning = $True&#xD;&#xA;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Enabled: {0}&quot;, $_.Enabled)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;If ($_.Deadline) {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Deadline: {0} days and {1} Minutes after Midnight (UTC)&quot;, $_.Deadline.DayOffSet, $_.Deadline.MinutesAfterMidnight)&#xD;&#xA;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Deadline: {0}&quot;,&quot;No set&quot;)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;If ([int]$_.Name.Split(&quot; &quot;)[1] -gt 0) {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Delayed: {0} days&quot;, [int]$_.Name.Split(&quot; &quot;)[1])&#xD;&#xA;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Delayed: Not set WARNING&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;$Warning = $True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;[String]::Format(&quot;Categories: {0}&quot;, $_.GetCategories().Count)&#xD;&#xA;&#x9;&#x9;[String]::Format(&quot;Classifications: {0}&quot;, $_.GetUpdateClassifications().Count)&#xD;&#xA;&#x9;&#x9;[String]::Format(&quot;Computer target groups: {0}&quot;,$_.GetComputerTargetGroups().Count)&#xD;&#xA;&#x9;&#x9;If (!$Warning) {&#xD;&#xA;&#x9;&#x9;&#x9;$UpdateScope = New-Object Microsoft.UpdateServices.Administration.UpdateScope&#xD;&#xA;&#x9;&#x9;&#x9;$UpdateApprovalScope = New-Object Microsoft.UpdateServices.Administration.UpdateApprovalScope&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;$UpdateScope.Categories.AddRange($_.GetCategories())&#xD;&#xA;&#x9;&#x9;&#x9;$UpdateScope.Classifications.AddRange($_.GetUpdateClassifications())&#xD;&#xA;&#x9;&#x9;&#x9;$updateScope.toArrivalDate = [DateTime]::UtcNow.Adddays(-1 * [int]$_.Name.Split(&quot; &quot;)[1])&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;$DelayedUpdates =  ($UpdateServer.GetUpdates($UpdateScope) | Where {!$_.IsDeclined})&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;ForEach ($DelayedUpdate in $DelayedUpdates ) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;[bool]$Approved = $False&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;If ($Debug) {$DelayedUpdate.Title}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;If ($DelayedUpdate.isApproved) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;ForEach ($GroupApproval in $DelayedUpdate.GetUpdateApprovals()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ForEach ($TargetGroup in $_.GetComputerTargetGroups()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($GroupApproval.ComputerTargetGroupId -eq $TargetGroup.Id) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$Approved = $True&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($Debug) {&quot;Approved for &quot; + $TargetGroup.Name}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($GroupApproval.ComputerTargetGroupId -eq [Microsoft.UpdateServices.Administration.ComputerTargetGroupId]::AllComputers) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$Approved = $True&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($Debug) {&quot;Approved for &quot; + $UpdateServer.GetComputerTargetGroup([Microsoft.UpdateServices.Administration.ComputerTargetGroupId]::AllComputers).Name}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($Approved) { break }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;If (!$Approved) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Count ++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If ($Debug) {&quot;Not Approved&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;If (!$Trialrun) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If (!$Debug) {$DelayedUpdate.Title}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ForEach ($ComputerGroup in $_.GetComputerTargetGroups()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($_.Deadline) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[dateTime]$Deadline = [datetime]::UtcNow.Date.Adddays($_.Deadline.DayOffSet).AddMinutes($_.Deadline.MinutesAfterMidnight)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($DelayedUpdate.Approve(&quot;Install&quot;, $ComputerGroup, $Deadline)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[String]::Format(&quot;Approved for targetgroup {0} with deadline {1}&quot;, $ComputerGroup.Name, $Deadline)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If ($DelayedUpdate.Approve(&quot;Install&quot;, $ComputerGroup)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;[String]::Format(&quot;Approved for targetgroup {0}&quot;, $ComputerGroup.Name)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Affected updates: {0}&quot;, $Count)&#xD;&#xA;&#x9;&#x9;} Else {&#xD;&#xA;&#x9;&#x9;&#x9;[String]::Format(&quot;Affected updates: {0}&quot;, &quot;Skipped Warning&quot;)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&quot;&quot;&#xD;&#xA;&#x9;} &#xD;&#xA;} Else {&#x9;&#xD;&#xA;&#x9;&quot;No Delayed Install Approval Rules found&quot;&#xD;&#xA;}" />
</CodeSnippets>