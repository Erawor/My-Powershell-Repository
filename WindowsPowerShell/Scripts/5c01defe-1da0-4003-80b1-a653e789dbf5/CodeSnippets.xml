<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | out-null&#xD;&#xA;if (!$wsus) {&#xD;&#xA;        $wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&quot;Server name: &quot; +$wsus.Name;&#xD;&#xA;&quot;Using secure connection: &quot; + $wsus.IsConnectionSecureForRemoting;&#xD;&#xA;&quot;Port number: &quot; + $wsus.PortNumber;&#xD;&#xA;&#xD;&#xA;$updateScope = new-object Microsoft.UpdateServices.Administration.UpdateScope;&#xD;&#xA;$updateScope.UpdateApprovalActions = [Microsoft.UpdateServices.Administration.UpdateApprovalActions]::Install `&#xD;&#xA; -bor [Microsoft.UpdateServices.Administration.UpdateApprovalActions]::Uninstall&#xD;&#xA;&#xD;&#xA;$wsus.GetUpdates($updateScope) | foreach {&#xD;&#xA;     $update = $_          #$_ is a shorthand variable for the current item in a loop&#xD;&#xA;&#xD;&#xA;     &quot;--------------------------------------------------&quot;     &#xD;&#xA;     &quot;Update: &quot; + $update.Title&#xD;&#xA;     &quot;Update Id: &quot; + $update.Id.UpdateId&#xD;&#xA;     &quot;--------------------------------------------------&quot;     &#xD;&#xA;&#xD;&#xA;     $wsus.GetComputerTargetGroups() | foreach {&#xD;&#xA;          $group = $_&#xD;&#xA;          if ($update.GetUpdateApprovals($group).Count -ne 0)&#xD;&#xA;          {&#xD;&#xA;               #`t is equivalent to \t in C#/C++&#xD;&#xA;               &quot;`t Computer Group: &quot; + $group.Name&#xD;&#xA;               &quot;`t ComputerTargetGroupId: &quot; + $group.Id&#xD;&#xA;               &quot;`t Approval action: &quot; + $update.GetUpdateApprovals($group)[0].Action&#xD;&#xA;            &#xD;&#xA;               $summary = $update.GetSummaryForComputerTargetGroup($group)&#xD;&#xA;&#xD;&#xA;               &quot;`t Installed:&quot; + ($Summary.InstalledCount + $summary.NotApplicableCount)&#xD;&#xA;&#xD;&#xA;               $neededCount = ($summary.InstalledPendingRebootCount + $summary.NotInstalledCount)&#xD;&#xA;               if ($neededCount -gt 0)&#xD;&#xA;               {&#xD;&#xA;                    Write-Host (&quot;`t Needed: $neededCount&quot;) -foregroundColor Yellow -backgroundColor black&#xD;&#xA;               } else {&#xD;&#xA;                    &quot;`t Needed: $neededCount&quot;&#xD;&#xA;               }&#xD;&#xA;&#xD;&#xA;               if ($summary.FailedCount -gt 0)&#xD;&#xA;               {&#xD;&#xA;                    Write-Host (&quot;`t Failed: &quot; + $summary.FailedCount) -foregroundColor Red -backgroundColor black&#xD;&#xA;               } else {&#xD;&#xA;                    &quot;`t Failed: &quot; + $summary.FailedCount&#xD;&#xA;               }&#xD;&#xA;               &#xD;&#xA;               &quot;`t Unknown: &quot; + $summary.UnknownCount&#xD;&#xA;               &quot;`t ------------------------------------------&quot;&#xD;&#xA;          }&#xD;&#xA;     }&#xD;&#xA;     &quot;--------------------------------------------------&quot;&#xD;&#xA;}&#xD;&#xA;" />
</CodeSnippets>