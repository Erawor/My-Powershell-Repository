<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="cls &#xD;&#xA;#region &quot;RàZ&quot; &#xD;&#xA; $HTMLHeader  =&quot;&quot;&#xD;&#xA; $HTMLMiddle  =&quot;&quot; &#xD;&#xA; $HTMLEnd     =&quot;&quot;&#xD;&#xA; $HTMLmessage =&quot;&quot;&#xD;&#xA; $CurrentSystemHTML =&quot;&quot;&#xD;&#xA; $ListOfAttachments =&quot;&quot;&#xD;&#xA; $body  =&quot;&quot;&#xD;&#xA; $pendingRebootList=&quot;0&quot;&#xD;&#xA;#endregion  &quot;RàZ&quot; &#xD;&#xA;&#xD;&#xA;#region &quot;Variables and Arguments&quot;&#xD;&#xA; $ListOfAttachments = @() &#xD;&#xA; $Emailfrom                    = &quot;you.yourfamilyName@contoso.com&quot; &#xD;&#xA; $EmailServer                  = &quot;mailGateway.XYZ.ABC.Contoso.com&quot; &#xD;&#xA; $path = &quot;C:\windows\Scripts_for_wsus\Reporting\ServerOwners.csv&quot;&#xD;&#xA; $csv = Import-csv -path $path&#xD;&#xA; $CurrentMonth = Get-Date -format MMMM&#xD;&#xA;#endregion &quot;Variables and Arguments&quot;&#xD;&#xA;&#xD;&#xA;#region &quot;Get Servers requiring reboot&quot; &#xD;&#xA; [reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | out-null &#xD;&#xA; if (!$wsus) { &#xD;&#xA;              $wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer();&#xD;&#xA; } &#xD;&#xA; $computerScope = new-object Microsoft.UpdateServices.Administration.ComputerTargetScope; &#xD;&#xA; $computerScope.IncludedInstallationStates = [Microsoft.UpdateServices.Administration.UpdateInstallationStates]::InstalledPendingReboot;&#xD;&#xA; $updateScope = new-object Microsoft.UpdateServices.Administration.UpdateScope;&#xD;&#xA; $updateScope.IncludedInstallationStates = [Microsoft.UpdateServices.Administration.UpdateInstallationStates]::InstalledPendingReboot; &#xD;&#xA; $computers = $wsus.GetComputerTargets($computerScope); &#xD;&#xA;#endregion &quot;Get Servers requiring reboot&quot; &#xD;&#xA;&#xD;&#xA;Write-Host &quot;Servers requiring reboot :&quot;&#xD;&#xA;&#xD;&#xA;#region &quot;Loop through the servers requiring reboot list&quot;&#xD;&#xA; $computers | foreach-object {&#xD;&#xA;                              #region &quot;RàZ&quot;&#xD;&#xA;                               $HTMLHeader  =&quot;&quot;&#xD;&#xA;                               $HTMLMiddle  =&quot;&quot; &#xD;&#xA;                               $HTMLEnd     =&quot;&quot;&#xD;&#xA;                               $HTMLmessage =&quot;&quot;&#xD;&#xA;                               $HTMLEnd     =&quot;&quot;&#xD;&#xA;                               $CurrentSystemHTML =&quot;&quot;&#xD;&#xA;                               $ListOfAttachments =&quot;&quot;&#xD;&#xA;                               $ListOfPatches=&quot;&quot;&#xD;&#xA;                               $body  =&quot;&quot;&#xD;&#xA;                               $pendingRebootList =  &quot;&quot;&#xD;&#xA;                               $neededUpdate = &quot;&quot;&#xD;&#xA;                               $pendingRebootList=&quot;0&quot;&#xD;&#xA;                              #endregion &quot;RàZ&quot;&#xD;&#xA;&#xD;&#xA;                              #region &quot;Assemble the HTML Header and CSS for our Report&quot;&#xD;&#xA;                               $HTMLHeader = @&quot;&#xD;&#xA;                               &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;&#xD;&#xA;                               &lt;html&gt;&lt;head&gt;&lt;title&gt;My Systems Report&lt;/title&gt;&#xD;&#xA;                               &lt;!--&#xD;&#xA;                               body {&#xD;&#xA;                               font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;&#xD;&#xA;                               }&#xD;&#xA;                               #report { width: 835px; }&#xD;&#xA;                               table{ &#xD;&#xA;                                  border-collapse: collapse;&#xD;&#xA;                                  border: none;&#xD;&#xA;                                  font: 10pt Verdana, Geneva, Arial, Helvetica, sans-serif;&#xD;&#xA;                                  color: black;&#xD;&#xA;                                  margin-bottom: 10px;&#xD;&#xA;                               }&#xD;&#xA;                               table td{&#xD;&#xA;                                  font-size: 12px; &#xD;&#xA;                                  padding-left: 0px;&#xD;&#xA;                                  padding-right: 20px;&#xD;&#xA;                                  text-align: left;&#xD;&#xA;                               }&#xD;&#xA;                               table th {&#xD;&#xA;                                  font-size: 12px;&#xD;&#xA;                                  font-weight: bold;&#xD;&#xA;                                  padding-left: 0px;&#xD;&#xA;                                  padding-right: 20px;&#xD;&#xA;                                  text-align: left;&#xD;&#xA;                               }&#xD;&#xA;                                  h2{ clear: both; font-size: 130%; }&#xD;&#xA;                                 h3{&#xD;&#xA;                                    clear: both;&#xD;&#xA;                                    font-size: 115%;&#xD;&#xA;                                    margin-left: 20px;&#xD;&#xA;                                    margin-top: 30px;&#xD;&#xA;                               }&#xD;&#xA;                               p{ margin-left: 20px; font-size: 12px; }&#xD;&#xA;                               table.list{ float: left; }&#xD;&#xA;                               table.list td:nth-child(1){&#xD;&#xA;                                  font-weight: bold;&#xD;&#xA;                                  border-right: 1px grey solid;&#xD;&#xA;                                  text-align: right;&#xD;&#xA;                               }&#xD;&#xA;                               table.list td:nth-child(2){ padding-left: 7px; }&#xD;&#xA;                               table tr:nth-child(even) td:nth-child(even){ background: #CCCCCC; }&#xD;&#xA;                               table tr:nth-child(odd) td:nth-child(odd){ background: #F2F2F2; }&#xD;&#xA;                               table tr:nth-child(even) td:nth-child(odd){ background: #DDDDDD; }&#xD;&#xA;                               table tr:nth-child(odd) td:nth-child(even){ background: #E5E5E5; }&#xD;&#xA;                               div.column { width: 320px; float: left; }&#xD;&#xA;                               div.first{ padding-right: 20px; border-right: 1px  grey solid; }&#xD;&#xA;                               div.second{ margin-left: 30px; }&#xD;&#xA;                               table{ margin-left: 20px; }&#xD;&#xA;--&gt;&#xD;&#xA;                               &lt;/head&gt;&#xD;&#xA;                               &lt;body&gt; &#xD;&#xA;&quot;@                                    &#xD;&#xA;                              #endregion &quot;Assemble the HTML Header and CSS for our Report&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;                              #If current ComputerName in csv == current Server in the for loop &#xD;&#xA;                              #--&gt; send email to owners ;) &#xD;&#xA;                              &#xD;&#xA;                              #I'm doing the following to get the short server name or netbios name...  &#xD;&#xA;                              $_ServerName = $_.FullDomainName.Split('.').ToUpper().Trim() |select -first 1&#xD;&#xA;                              #for later Html use &#xD;&#xA;                              write-host  $_ServerName&#xD;&#xA;                              #$pendingRebootList = $pendingRebootList + $_.FullDomainName + &quot;&lt;br&gt;&quot; ;&#xD;&#xA;                              #Show which updates are causing the reboot required for the computer.  Remove the next 5 lines to only generate a list of computers. &#xD;&#xA;                              $updatesForReboot = $_.GetUpdateInstallationInfoPerUpdate($updateScope);&#xD;&#xA;                              $updatesForReboot | foreach-object { &#xD;&#xA;                                                                 $neededUpdate = $wsus.GetUpdate($_.UpdateId);&#xD;&#xA;                                                                 &quot;   &quot;+$neededUpdate.Title | write-host;&#xD;&#xA;                                                                  #$pendingRebootList = $pendingRebootList + &quot;&gt;&quot;+ $neededUpdate.Title + &quot;&lt;br&gt;&quot;;                                                            &#xD;&#xA;                                                                  #Remove previous lines to only show computers that need updates&#xD;&#xA;                                                                 $ListOfPatches =  $ListOfPatches + &quot;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot; + $neededUpdate.Title + &quot;&lt;br&gt;&quot;; #for later Html use &#xD;&#xA;                                                                }&#xD;&#xA;                              #HTML Email Message Body for Servers Requiring reboot&#xD;&#xA;                              $CurrentSystemHTML = @&quot;&#xD;&#xA;                              &lt;div id=&quot;report&quot;&gt;&#xD;&#xA;                              &lt;font color=&quot;#0404B4&quot;&gt;&#xD;&#xA;                              Dears,&lt;br&gt;&lt;br&gt;&#xD;&#xA;                              as part of the $CurrentMonth Microsoft Windows monthly security patching cycle, &lt;br&gt; new updates were applied on $_ServerName.&lt;br&gt;                                      &#xD;&#xA;                              &lt;br&gt;To complete the installation process, &lt;b&gt; $_ServerName will be restarted - tonight by 11PM&lt;/b&gt;.&lt;br&gt;&#xD;&#xA;                              &lt;br&gt;&#xD;&#xA;                              Patch List : &lt;br&gt;&#xD;&#xA;                              $ListOfPatches &#xD;&#xA;                              &lt;br&gt;  &lt;br&gt;  &#xD;&#xA;                              If you don't agree about the restart time &lt;br&gt; or if you are not the current owner of this server  as mentioned below,  &lt;br&gt; please let us know by replying to this email.&#xD;&#xA;                              &lt;br&gt;  &lt;br&gt;                                             &#xD;&#xA;&quot;@ &#xD;&#xA; &#xD;&#xA;                              # Add the current System HTML Report into the final HTML Report body&#xD;&#xA;                              $HTMLMiddle += $CurrentSystemHTML&#xD;&#xA;&#xD;&#xA;                             &#xD;&#xA;                              #1 loop through csv file&#xD;&#xA;                              #2 determine Server Owners &#xD;&#xA;                              #3 complete building the email html body &#xD;&#xA;                              #4 send the email to owners&#xD;&#xA;                               foreach($line in $csv)&#xD;&#xA;                               { &#xD;&#xA;                                if ($line.Servername.ToLower().Trim() -eq $_ServerName.ToLower().Trim() )&#xD;&#xA;                                {&#xD;&#xA;                                 $BUOwnerEmail            = $line.BUOwnerEmail.ToLower().Trim()&#xD;&#xA;                                 $TechnicalOwnerEmail     = $line.TechnicalOwnerEmail.ToLower().Trim()&#xD;&#xA;                                 ##################################################################################################&#xD;&#xA;                                 # Actually, as I don't want to specify any Change Management Link so I'm setting it to empty value..&#xD;&#xA;                                 &lt;#$ChangeLink = $line.ChangeLink &#xD;&#xA;                                 $HTMLEnd = @&quot;&#xD;&#xA;                                 &lt;br&gt;BUOwner : $BUOwnerEmail&#xD;&#xA;                                 &lt;br&gt;TechnicalOwner :  $TechnicalOwnerEmail    &#xD;&#xA;                                 &lt;br&gt;Change Management Ticket link : $ChangeLink&#xD;&#xA;                                 &lt;br&gt;&lt;br&gt;Best Regards.&lt;br&gt;&lt;table class=&quot;list&quot;&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#xD;&#xA;&quot;@#&gt; &#xD;&#xA;                                 ##################################################################################################&#xD;&#xA;                                 $HTMLEnd = @&quot;&#xD;&#xA;                                 &lt;br&gt;BUOwner : $BUOwnerEmail &#xD;&#xA;                                 &lt;br&gt;TechnicalOwner :  $TechnicalOwnerEmail    &#xD;&#xA;                                 &lt;br&gt;&lt;br&gt;Best Regards.&lt;br&gt;&lt;table class=&quot;list&quot;&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#xD;&#xA;&quot;@                                                                        &#xD;&#xA;                                 #Assemble the final report from all our HTML sections&#xD;&#xA;                                 $HTMLmessage = $HTMLHeader + $HTMLMiddle + $HTMLEnd&#xD;&#xA;                                 # Save the report out to a file in the current path&#xD;&#xA;                                 $HTMLmessage | Out-File ((Get-Location).Path + &quot;\Notification_&quot; + $line.Servername.ToUpper().Trim() + &quot;_.html&quot;)&#xD;&#xA;                                                                              &#xD;&#xA;                                 ####### proceed to tests using your adress by commenting the BUOwner and TechOwner email lines and uncommenting your line&#xD;&#xA;                                 #$Emailto                  = 'myemailaddresshere@contoso.com'&#xD;&#xA;                                 $Emailto                       = $BUOwnerEmail + &quot;,&quot; +  $TechnicalOwnerEmail + &quot;,&quot; + &quot;myemailaddress@contoso.com&quot;&#xD;&#xA;                                 $EmailSubject                  = $line.Servername.ToUpper().Trim() + &quot;  - server security patching&quot;&#xD;&#xA;                                 Write-Host   &quot;Emailto     : &quot; $BUOwnerEmail + &quot;   &quot; +  $TechnicalOwnerEmail &#xD;&#xA;                                 #Write-Host   &quot;Change Link : &quot; $ChangeLink&#xD;&#xA;                                 $HTMLmessage           = $HTMLmessage + &quot;&lt;br&gt;&lt;br&gt;&lt;br&gt;&quot; + $line.BUOwnerEmail.ToLower().Trim() + &quot;,&quot; + $line.TechnicalOwnerEmail.ToLower().Trim()&#xD;&#xA;                                 ##### comment the following if you want to !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&#xD;&#xA;                                 send-mailmessage    -from $Emailfrom -to $Emailto -subject $EmailSubject -BodyAsHTML -body $HTMLmessage -priority Normal -smtpServer $EmailServer&#xD;&#xA;                                 ##### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&#xD;&#xA;                                }&#xD;&#xA;                               }&#xD;&#xA;                             } &#xD;&#xA;#endregion &quot;Loop through the servers requiring reboot list&quot;" />
  <Code Content="cls &#xD;&#xA;#region &quot;RàZ&quot; &#xD;&#xA; $HTMLHeader  =&quot;&quot;&#xD;&#xA; $HTMLMiddle  =&quot;&quot; &#xD;&#xA; $HTMLEnd     =&quot;&quot;&#xD;&#xA; $HTMLmessage =&quot;&quot;&#xD;&#xA; $CurrentSystemHTML =&quot;&quot;&#xD;&#xA; $ListOfAttachments =&quot;&quot;&#xD;&#xA; $body  =&quot;&quot;&#xD;&#xA; $pendingRebootList=&quot;0&quot;&#xD;&#xA;#endregion  &quot;RàZ&quot; &#xD;&#xA;&#xD;&#xA;#region &quot;Variables and Arguments&quot;&#xD;&#xA; $ListOfAttachments = @() &#xD;&#xA; $Emailfrom                    = &quot;you.yourfamilyName@contoso.com&quot; &#xD;&#xA; $EmailServer                  = &quot;mailGateway.XYZ.ABC.Contoso.com&quot; &#xD;&#xA; $path = &quot;C:\windows\Scripts_for_wsus\Reporting\ServerOwners.csv&quot;&#xD;&#xA; $csv = Import-csv -path $path&#xD;&#xA; $CurrentMonth = Get-Date -format MMMM&#xD;&#xA;#endregion &quot;Variables and Arguments&quot;&#xD;&#xA;&#xD;&#xA;#region &quot;Get Servers requiring reboot&quot; &#xD;&#xA; [reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | out-null &#xD;&#xA; if (!$wsus) { &#xD;&#xA;              $wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer();&#xD;&#xA; } &#xD;&#xA; $computerScope = new-object Microsoft.UpdateServices.Administration.ComputerTargetScope; &#xD;&#xA; $computerScope.IncludedInstallationStates = [Microsoft.UpdateServices.Administration.UpdateInstallationStates]::InstalledPendingReboot;&#xD;&#xA; $updateScope = new-object Microsoft.UpdateServices.Administration.UpdateScope;&#xD;&#xA; $updateScope.IncludedInstallationStates = [Microsoft.UpdateServices.Administration.UpdateInstallationStates]::InstalledPendingReboot; &#xD;&#xA; $computers = $wsus.GetComputerTargets($computerScope); &#xD;&#xA;#endregion &quot;Get Servers requiring reboot&quot; &#xD;&#xA;&#xD;&#xA;Write-Host &quot;Servers requiring reboot :&quot;&#xD;&#xA;&#xD;&#xA;#region &quot;Loop through the servers requiring reboot list&quot;&#xD;&#xA; $computers | foreach-object {&#xD;&#xA;                              #region &quot;RàZ&quot;&#xD;&#xA;                               $HTMLHeader  =&quot;&quot;&#xD;&#xA;                               $HTMLMiddle  =&quot;&quot; &#xD;&#xA;                               $HTMLEnd     =&quot;&quot;&#xD;&#xA;                               $HTMLmessage =&quot;&quot;&#xD;&#xA;                               $HTMLEnd     =&quot;&quot;&#xD;&#xA;                               $CurrentSystemHTML =&quot;&quot;&#xD;&#xA;                               $ListOfAttachments =&quot;&quot;&#xD;&#xA;                               $ListOfPatches=&quot;&quot;&#xD;&#xA;                               $body  =&quot;&quot;&#xD;&#xA;                               $pendingRebootList =  &quot;&quot;&#xD;&#xA;                               $neededUpdate = &quot;&quot;&#xD;&#xA;                               $pendingRebootList=&quot;0&quot;&#xD;&#xA;                              #endregion &quot;RàZ&quot;&#xD;&#xA;&#xD;&#xA;                              #region &quot;Assemble the HTML Header and CSS for our Report&quot;&#xD;&#xA;                               $HTMLHeader = @&quot;&#xD;&#xA;                               &lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Frameset//EN&quot; &quot;http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;&#xD;&#xA;                               &lt;html&gt;&lt;head&gt;&lt;title&gt;My Systems Report&lt;/title&gt;&#xD;&#xA;                               &lt;!--&#xD;&#xA;                               body {&#xD;&#xA;                               font-family: Verdana, Geneva, Arial, Helvetica, sans-serif;&#xD;&#xA;                               }&#xD;&#xA;                               #report { width: 835px; }&#xD;&#xA;                               table{ &#xD;&#xA;                                  border-collapse: collapse;&#xD;&#xA;                                  border: none;&#xD;&#xA;                                  font: 10pt Verdana, Geneva, Arial, Helvetica, sans-serif;&#xD;&#xA;                                  color: black;&#xD;&#xA;                                  margin-bottom: 10px;&#xD;&#xA;                               }&#xD;&#xA;                               table td{&#xD;&#xA;                                  font-size: 12px; &#xD;&#xA;                                  padding-left: 0px;&#xD;&#xA;                                  padding-right: 20px;&#xD;&#xA;                                  text-align: left;&#xD;&#xA;                               }&#xD;&#xA;                               table th {&#xD;&#xA;                                  font-size: 12px;&#xD;&#xA;                                  font-weight: bold;&#xD;&#xA;                                  padding-left: 0px;&#xD;&#xA;                                  padding-right: 20px;&#xD;&#xA;                                  text-align: left;&#xD;&#xA;                               }&#xD;&#xA;                                  h2{ clear: both; font-size: 130%; }&#xD;&#xA;                                 h3{&#xD;&#xA;                                    clear: both;&#xD;&#xA;                                    font-size: 115%;&#xD;&#xA;                                    margin-left: 20px;&#xD;&#xA;                                    margin-top: 30px;&#xD;&#xA;                               }&#xD;&#xA;                               p{ margin-left: 20px; font-size: 12px; }&#xD;&#xA;                               table.list{ float: left; }&#xD;&#xA;                               table.list td:nth-child(1){&#xD;&#xA;                                  font-weight: bold;&#xD;&#xA;                                  border-right: 1px grey solid;&#xD;&#xA;                                  text-align: right;&#xD;&#xA;                               }&#xD;&#xA;                               table.list td:nth-child(2){ padding-left: 7px; }&#xD;&#xA;                               table tr:nth-child(even) td:nth-child(even){ background: #CCCCCC; }&#xD;&#xA;                               table tr:nth-child(odd) td:nth-child(odd){ background: #F2F2F2; }&#xD;&#xA;                               table tr:nth-child(even) td:nth-child(odd){ background: #DDDDDD; }&#xD;&#xA;                               table tr:nth-child(odd) td:nth-child(even){ background: #E5E5E5; }&#xD;&#xA;                               div.column { width: 320px; float: left; }&#xD;&#xA;                               div.first{ padding-right: 20px; border-right: 1px  grey solid; }&#xD;&#xA;                               div.second{ margin-left: 30px; }&#xD;&#xA;                               table{ margin-left: 20px; }&#xD;&#xA;--&gt;&#xD;&#xA;                               &lt;/head&gt;&#xD;&#xA;                               &lt;body&gt; &#xD;&#xA;&quot;@                                    &#xD;&#xA;                              #endregion &quot;Assemble the HTML Header and CSS for our Report&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;                              #If current ComputerName in csv == current Server in the for loop &#xD;&#xA;                              #--&gt; send email to owners ;) &#xD;&#xA;                              &#xD;&#xA;                              #I'm doing the following to get the short server name or netbios name...  &#xD;&#xA;                              $_ServerName = $_.FullDomainName.Split('.').ToUpper().Trim() |select -first 1&#xD;&#xA;                              #for later Html use &#xD;&#xA;                              write-host  $_ServerName&#xD;&#xA;                              #$pendingRebootList = $pendingRebootList + $_.FullDomainName + &quot;&lt;br&gt;&quot; ;&#xD;&#xA;                              #Show which updates are causing the reboot required for the computer.  Remove the next 5 lines to only generate a list of computers. &#xD;&#xA;                              $updatesForReboot = $_.GetUpdateInstallationInfoPerUpdate($updateScope);&#xD;&#xA;                              $updatesForReboot | foreach-object { &#xD;&#xA;                                                                 $neededUpdate = $wsus.GetUpdate($_.UpdateId);&#xD;&#xA;                                                                 &quot;   &quot;+$neededUpdate.Title | write-host;&#xD;&#xA;                                                                  #$pendingRebootList = $pendingRebootList + &quot;&gt;&quot;+ $neededUpdate.Title + &quot;&lt;br&gt;&quot;;                                                            &#xD;&#xA;                                                                  #Remove previous lines to only show computers that need updates&#xD;&#xA;                                                                 $ListOfPatches =  $ListOfPatches + &quot;&amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&quot; + $neededUpdate.Title + &quot;&lt;br&gt;&quot;; #for later Html use &#xD;&#xA;                                                                }&#xD;&#xA;                              #HTML Email Message Body for Servers Requiring reboot&#xD;&#xA;                              $CurrentSystemHTML = @&quot;&#xD;&#xA;                              &lt;div id=&quot;report&quot;&gt;&#xD;&#xA;                              &lt;font color=&quot;#0404B4&quot;&gt;&#xD;&#xA;                              Dears,&lt;br&gt;&lt;br&gt;&#xD;&#xA;                              as part of the $CurrentMonth Microsoft Windows monthly security patching cycle, &lt;br&gt; new updates were applied on $_ServerName.&lt;br&gt;                                      &#xD;&#xA;                              &lt;br&gt;To complete the installation process, &lt;b&gt; $_ServerName will be restarted - tonight by 11PM&lt;/b&gt;.&lt;br&gt;&#xD;&#xA;                              &lt;br&gt;&#xD;&#xA;                              Patch List : &lt;br&gt;&#xD;&#xA;                              $ListOfPatches &#xD;&#xA;                              &lt;br&gt;  &lt;br&gt;  &#xD;&#xA;                              If you don't agree about the restart time &lt;br&gt; or if you are not the current owner of this server  as mentioned below,  &lt;br&gt; please let us know by replying to this email.&#xD;&#xA;                              &lt;br&gt;  &lt;br&gt;                                             &#xD;&#xA;&quot;@ &#xD;&#xA; &#xD;&#xA;                              # Add the current System HTML Report into the final HTML Report body&#xD;&#xA;                              $HTMLMiddle += $CurrentSystemHTML&#xD;&#xA;&#xD;&#xA;                             &#xD;&#xA;                              #1 loop through csv file&#xD;&#xA;                              #2 determine Server Owners &#xD;&#xA;                              #3 complete building the email html body &#xD;&#xA;                              #4 send the email to owners&#xD;&#xA;                               foreach($line in $csv)&#xD;&#xA;                               { &#xD;&#xA;                                if ($line.Servername.ToLower().Trim() -eq $_ServerName.ToLower().Trim() )&#xD;&#xA;                                {&#xD;&#xA;                                 $BUOwnerEmail            = $line.BUOwnerEmail.ToLower().Trim()&#xD;&#xA;                                 $TechnicalOwnerEmail     = $line.TechnicalOwnerEmail.ToLower().Trim()&#xD;&#xA;                                 ##################################################################################################&#xD;&#xA;                                 # Actually, as I don't want to specify any Change Management Link so I'm setting it to empty value..&#xD;&#xA;                                 &lt;#$ChangeLink = $line.ChangeLink &#xD;&#xA;                                 $HTMLEnd = @&quot;&#xD;&#xA;                                 &lt;br&gt;BUOwner : $BUOwnerEmail&#xD;&#xA;                                 &lt;br&gt;TechnicalOwner :  $TechnicalOwnerEmail    &#xD;&#xA;                                 &lt;br&gt;Change Management Ticket link : $ChangeLink&#xD;&#xA;                                 &lt;br&gt;&lt;br&gt;Best Regards.&lt;br&gt;&lt;table class=&quot;list&quot;&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#xD;&#xA;&quot;@#&gt; &#xD;&#xA;                                 ##################################################################################################&#xD;&#xA;                                 $HTMLEnd = @&quot;&#xD;&#xA;                                 &lt;br&gt;BUOwner : $BUOwnerEmail &#xD;&#xA;                                 &lt;br&gt;TechnicalOwner :  $TechnicalOwnerEmail    &#xD;&#xA;                                 &lt;br&gt;&lt;br&gt;Best Regards.&lt;br&gt;&lt;table class=&quot;list&quot;&gt;&lt;tr&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&#xD;&#xA;&quot;@                                                                        &#xD;&#xA;                                 #Assemble the final report from all our HTML sections&#xD;&#xA;                                 $HTMLmessage = $HTMLHeader + $HTMLMiddle + $HTMLEnd&#xD;&#xA;                                 # Save the report out to a file in the current path&#xD;&#xA;                                 $HTMLmessage | Out-File ((Get-Location).Path + &quot;\Notification_&quot; + $line.Servername.ToUpper().Trim() + &quot;_.html&quot;)&#xD;&#xA;                                                                              &#xD;&#xA;                                 ####### proceed to tests using your adress by commenting the BUOwner and TechOwner email lines and uncommenting your line&#xD;&#xA;                                 #$Emailto                  = 'myemailaddresshere@contoso.com'&#xD;&#xA;                                 $Emailto                       = $BUOwnerEmail + &quot;,&quot; +  $TechnicalOwnerEmail + &quot;,&quot; + &quot;myemailaddress@contoso.com&quot;&#xD;&#xA;                                 $EmailSubject                  = $line.Servername.ToUpper().Trim() + &quot;  - server security patching&quot;&#xD;&#xA;                                 Write-Host   &quot;Emailto     : &quot; $BUOwnerEmail + &quot;   &quot; +  $TechnicalOwnerEmail &#xD;&#xA;                                 #Write-Host   &quot;Change Link : &quot; $ChangeLink&#xD;&#xA;                                 $HTMLmessage           = $HTMLmessage + &quot;&lt;br&gt;&lt;br&gt;&lt;br&gt;&quot; + $line.BUOwnerEmail.ToLower().Trim() + &quot;,&quot; + $line.TechnicalOwnerEmail.ToLower().Trim()&#xD;&#xA;                                 ##### comment the following if you want to !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&#xD;&#xA;                                 send-mailmessage    -from $Emailfrom -to $Emailto -subject $EmailSubject -BodyAsHTML -body $HTMLmessage -priority Normal -smtpServer $EmailServer&#xD;&#xA;                                 ##### !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&#xD;&#xA;                                }&#xD;&#xA;                               }&#xD;&#xA;                             } &#xD;&#xA;#endregion &quot;Loop through the servers requiring reboot list&quot;" />
</CodeSnippets>