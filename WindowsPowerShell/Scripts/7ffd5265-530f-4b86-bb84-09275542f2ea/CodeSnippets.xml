<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="###&#xD;&#xA;### Script to check WSUS updates to be installed on a given computer.&#xD;&#xA;###&#xD;&#xA;### Author: NomadTales&#xD;&#xA;### Email: nomadtales [at] gmail [dot] com&#xD;&#xA;### Twitter: @NomadTales&#xD;&#xA;### Date: 16 Sept 2010&#xD;&#xA;###&#xD;&#xA;### License: Creative Commons Attribution-NonCommercial 3.0 Unported License&#xD;&#xA;### LicenseURL: http://creativecommons.org/licenses/by-nc/3.0/&#xD;&#xA;###&#xD;&#xA;### The script parses the WindowsUpdate.log file to get a list of update GUIDs,&#xD;&#xA;### then checks those GUIDs against the WSUS server. This method seems more&#xD;&#xA;### acurate and simpler than polling the WSUS server directly.&#xD;&#xA;###&#xD;&#xA;### Please note there are probably better ways at scripting the string handling section.&#xD;&#xA;### Let me know if so.&#xD;&#xA;###&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;### Start editable section ###&#xD;&#xA;&#xD;&#xA;$computer = &quot;computer&quot;       # The computer to check updates on&#xD;&#xA;$systemdrv = &quot;C&quot;             # The System Drive&#xD;&#xA;$windowsdir = &quot;windows&quot;      # The System Folder&#xD;&#xA;$WSUSserver = &quot;wsusserver&quot;   # Your WSUS server&#xD;&#xA;$WSUSserverportnum = &quot;80&quot;    # WSUS server port number&#xD;&#xA;$wsusSSL = $false            # WSUS using SSL, if yes use $true&#xD;&#xA;&#xD;&#xA;### End editable section ###&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;### START SCRIPT ###&#xD;&#xA;&#xD;&#xA;## Reset variables - handy if you run the script multiple times from the editor&#xD;&#xA;&#xD;&#xA;$updatesrequired = $null&#xD;&#xA;$updates = $null&#xD;&#xA;$updatelist = $null&#xD;&#xA;$updatecount = 0&#xD;&#xA;&#xD;&#xA;## Connect to the WSUS server&#xD;&#xA;&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | out-null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer($WSUSserver,$wsusSSL,$WSUSserverportnum)&#xD;&#xA;&#xD;&#xA;## Generate the path of the log file&#xD;&#xA;&#xD;&#xA;$winupdatelog = &quot;\\&quot; + $computer + &quot;\&quot; + $systemdrv + &quot;$\&quot; + $windowsdir + &quot;\windowsupdate.log&quot;&#xD;&#xA;&#xD;&#xA;## Import the log file and change the sorting to make newest first&#xD;&#xA;&#xD;&#xA;$updates = import-csv $winupdatelog -delimiter `t -header &quot;Date&quot;, &quot;Time&quot;, &quot;Code1&quot;, &quot;Code2&quot;, &quot;Action&quot;, &quot;Description&quot; `&#xD;&#xA;    | sort @{Expression=&quot;Date&quot;;Descending=$true}, @{Expression=&quot;Time&quot;;Descending=$true}&#xD;&#xA;&#xD;&#xA;## Parse the log file for the update GUID and query the WSUS server for the human friendly title&#xD;&#xA;&#xD;&#xA;foreach ($update in $updates)&#xD;&#xA;{&#xD;&#xA;    if ($update.description -match &quot;Added update {&quot;)&#xD;&#xA;    {&#xD;&#xA;        $updatecount++&#xD;&#xA;        $updateidtemp = $update.description -replace &quot;.*{&quot;&#xD;&#xA;        $updateid = $updateidtemp -replace &quot;}.*&quot;&#xD;&#xA;        &#xD;&#xA;        $updatesrequired = $wsus.GetUpdate([guid]$updateid)&#xD;&#xA;        $updatelist += &quot;{0}`n&quot; -f $updatesrequired.title&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    if ($update.description -match &quot;## START ##  AU: Search for updates&quot;) {break}&#xD;&#xA;   &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;## Add a total number of updates to the bottom&#xD;&#xA;&#xD;&#xA;$updatelist += &quot;`n&quot;&#xD;&#xA;$updatelist += &quot;Total updates to install - {0}&quot; -f $updatecount&#xD;&#xA;&#xD;&#xA;## Display the updates required&#xD;&#xA;&#xD;&#xA;$updatelist&#xD;&#xA;&#xD;&#xA;### END SCRIPT ###" />
</CodeSnippets>