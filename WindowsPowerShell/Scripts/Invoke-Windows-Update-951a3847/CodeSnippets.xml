<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="function Invoke-WindowsUpdate&#xD;&#xA;{&#xD;&#xA;    &lt;#&#xD;&#xA;    .EXTERNALHELP KBWindowsUpdate-Help.xml&#xD;&#xA;    #&gt;&#xD;&#xA;    [CmdletBinding(&#xD;&#xA;    DefaultParameterSetName='Install',&#xD;&#xA;    SupportsShouldProcess=$True,&#xD;&#xA;    ConfirmImpact='High')]&#xD;&#xA;&#xD;&#xA;    PARAM(&#xD;&#xA;&#xD;&#xA;        [Parameter(ParameterSetName='Install')]&#xD;&#xA;        [switch]&#xD;&#xA;        $Force,&#xD;&#xA;&#xD;&#xA;        [Parameter(ParameterSetName='Install')]&#xD;&#xA;        [switch]&#xD;&#xA;        $Reboot,&#xD;&#xA;&#xD;&#xA;        [Parameter(ParameterSetName='DownloadOnly')]&#xD;&#xA;        [switch]&#xD;&#xA;        $DownloadOnly&#xD;&#xA;&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;    Begin&#xD;&#xA;    {&#xD;&#xA;        #Check for pending reboot status&#xD;&#xA;        $RebootRequired = (New-Object -ComObject &quot;Microsoft.Update.SystemInfo&quot;).rebootrequired&#xD;&#xA;&#xD;&#xA;        #Admin Rights Check&#xD;&#xA;        $user = [Security.Principal.WindowsIdentity]::GetCurrent()&#xD;&#xA;        $isAdmin = (New-Object Security.Principal.WindowsPrincipal $user).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)&#xD;&#xA;        if(!$isAdmin){Write-Warning &quot;PHASE 0 (PRE-CHECKS): Cmdlet is not being run with Administrative Priveledges.`n`t`t If the cmdlet does not function as expected, try running with Administrative Rights&quot;}&#xD;&#xA;&#xD;&#xA;        #Check if reboot is pending and if parameter set is NOT DownloadOnly&#xD;&#xA;        if($RebootRequired -and !$DownloadOnly)&#xD;&#xA;        {&#xD;&#xA;            Write-Warning &quot;PHASE 0 (PRE-CHECKS): A reboot is currently pending.`n`t`t If the -Force parameter is not set, updates will only be downloaded&quot;&#xD;&#xA;&#xD;&#xA;            #Check for -Force switch parameter&#xD;&#xA;            if($Force)&#xD;&#xA;            {&#xD;&#xA;                Write-Verbose &quot;PHASE 0 (PRE-CHECKS): -Force parameter is set.`n`t`t Update installs will be attempted&quot;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                Write-Warning &quot;PHASE 0 (PRE-CHECKS): -Force parameter is NOT set.`n`t`t Updates will only be downloaded&quot;&#xD;&#xA;                $DownloadOnly = $True&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #Create Windows Update Session, Searcher, Downloader, and Installer Com Objects&#xD;&#xA;        $WUSession = new-object -ComObject Microsoft.Update.Session&#xD;&#xA;        $WUSearcher = $WUSession.CreateUpdateSearcher()&#xD;&#xA;        $WUDownloader = $WUSession.CreateUpdateDownloader() #Bug doesn't allow this to be run remotely&#xD;&#xA;        $WUInstaller = $WUSession.CreateUpdateInstaller() #Bug doesn't allow this to be run remotely&#xD;&#xA;        $WUUpdateCollection = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;&#xD;&#xA;        $Return = New-Object PSObject -Property @{&#xD;&#xA;            AttemptedDownloads = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            AttemptedInstalls = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            SuccessfulDownloads = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            SuccessfulInstalls = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            UnsuccessfulDownloads = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            UnsuccessfulInstalls = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        if(!(Get-TypeData ResultCode))&#xD;&#xA;        {&#xD;&#xA;            Add-Type -TypeDefinition @&quot;&#xD;&#xA;            public enum ResultCode&#xD;&#xA;            {&#xD;&#xA;               NotStarted = 0,&#xD;&#xA;               InProgress = 1,&#xD;&#xA;               Succeeded = 2,&#xD;&#xA;               SucceededWithErrors = 3,&#xD;&#xA;               Failed = 4,&#xD;&#xA;               Aborted = 5&#xD;&#xA;            }&#xD;&#xA;&quot;@&#xD;&#xA;        }&#xD;&#xA;    }#end Begin" />
  <Code Content="function Invoke-WindowsUpdate&#xD;&#xA;{&#xD;&#xA;    &lt;#&#xD;&#xA;    .EXTERNALHELP KBWindowsUpdate-Help.xml&#xD;&#xA;    #&gt;&#xD;&#xA;    [CmdletBinding(&#xD;&#xA;    DefaultParameterSetName='Install',&#xD;&#xA;    SupportsShouldProcess=$True,&#xD;&#xA;    ConfirmImpact='High')]&#xD;&#xA;&#xD;&#xA;    PARAM(&#xD;&#xA;&#xD;&#xA;        [Parameter(ParameterSetName='Install')]&#xD;&#xA;        [switch]&#xD;&#xA;        $Force,&#xD;&#xA;&#xD;&#xA;        [Parameter(ParameterSetName='Install')]&#xD;&#xA;        [switch]&#xD;&#xA;        $Reboot,&#xD;&#xA;&#xD;&#xA;        [Parameter(ParameterSetName='DownloadOnly')]&#xD;&#xA;        [switch]&#xD;&#xA;        $DownloadOnly&#xD;&#xA;&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;    Begin&#xD;&#xA;    {&#xD;&#xA;        #Check for pending reboot status&#xD;&#xA;        $RebootRequired = (New-Object -ComObject &quot;Microsoft.Update.SystemInfo&quot;).rebootrequired&#xD;&#xA;&#xD;&#xA;        #Admin Rights Check&#xD;&#xA;        $user = [Security.Principal.WindowsIdentity]::GetCurrent()&#xD;&#xA;        $isAdmin = (New-Object Security.Principal.WindowsPrincipal $user).IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)&#xD;&#xA;        if(!$isAdmin){Write-Warning &quot;PHASE 0 (PRE-CHECKS): Cmdlet is not being run with Administrative Priveledges.`n`t`t If the cmdlet does not function as expected, try running with Administrative Rights&quot;}&#xD;&#xA;&#xD;&#xA;        #Check if reboot is pending and if parameter set is NOT DownloadOnly&#xD;&#xA;        if($RebootRequired -and !$DownloadOnly)&#xD;&#xA;        {&#xD;&#xA;            Write-Warning &quot;PHASE 0 (PRE-CHECKS): A reboot is currently pending.`n`t`t If the -Force parameter is not set, updates will only be downloaded&quot;&#xD;&#xA;&#xD;&#xA;            #Check for -Force switch parameter&#xD;&#xA;            if($Force)&#xD;&#xA;            {&#xD;&#xA;                Write-Verbose &quot;PHASE 0 (PRE-CHECKS): -Force parameter is set.`n`t`t Update installs will be attempted&quot;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                Write-Warning &quot;PHASE 0 (PRE-CHECKS): -Force parameter is NOT set.`n`t`t Updates will only be downloaded&quot;&#xD;&#xA;                $DownloadOnly = $True&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        #Create Windows Update Session, Searcher, Downloader, and Installer Com Objects&#xD;&#xA;        $WUSession = new-object -ComObject Microsoft.Update.Session&#xD;&#xA;        $WUSearcher = $WUSession.CreateUpdateSearcher()&#xD;&#xA;        $WUDownloader = $WUSession.CreateUpdateDownloader() #Bug doesn't allow this to be run remotely&#xD;&#xA;        $WUInstaller = $WUSession.CreateUpdateInstaller() #Bug doesn't allow this to be run remotely&#xD;&#xA;        $WUUpdateCollection = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;&#xD;&#xA;        $Return = New-Object PSObject -Property @{&#xD;&#xA;            AttemptedDownloads = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            AttemptedInstalls = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            SuccessfulDownloads = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            SuccessfulInstalls = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            UnsuccessfulDownloads = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;            UnsuccessfulInstalls = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;        if(!(Get-TypeData ResultCode))&#xD;&#xA;        {&#xD;&#xA;            Add-Type -TypeDefinition @&quot;&#xD;&#xA;            public enum ResultCode&#xD;&#xA;            {&#xD;&#xA;               NotStarted = 0,&#xD;&#xA;               InProgress = 1,&#xD;&#xA;               Succeeded = 2,&#xD;&#xA;               SucceededWithErrors = 3,&#xD;&#xA;               Failed = 4,&#xD;&#xA;               Aborted = 5&#xD;&#xA;            }&#xD;&#xA;&quot;@&#xD;&#xA;        }&#xD;&#xA;    }#end Begin" />
</CodeSnippets>