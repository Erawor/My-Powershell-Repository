<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content=".\Deploy-Application.EXE -DeploymentType Install -DeployMode Silent -Updatesince 10" />
  <Code Content=".\Deploy-Application.EXE -DeploymentType Install -DeployMode Interactive -Updatesince 10" />
  <Code Content=".\Deploy-Application.EXE -DeploymentType UnInstall -DeployMode Silent  -Updatesince 10" />
  <Code Content=".\Deploy-Application.EXE -DeploymentType UnInstall -DeployMode Interactive  -Updatesince 10" />
  <Code Content="Param (&#xD;&#xA;&#x9;[ValidateSet(&quot;Install&quot;,&quot;Uninstall&quot;)] &#xD;&#xA;&#x9;[string]$DeploymentType = &quot;Install&quot;,&#xD;&#xA;&#x9;[ValidateSet(&quot;Interactive&quot;,&quot;Silent&quot;,&quot;NonInteractive&quot;)]&#xD;&#xA;&#x9;[string]$DeployMode = &quot;silent&quot;,&#xD;&#xA;&#x9;[switch] $AllowRebootPassThru = $False,&#xD;&#xA;&#x9;[switch] $TerminalServerMode = $false,&#xD;&#xA;    [switch] $ForceRestartMode = $True,&#xD;&#xA;    [Parameter(Mandatory=$true)]&#xD;&#xA;    [int] $Updatesince = 1&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* VARIABLE DECLARATION&#xD;&#xA;Try {&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;# Variables: Application&#xD;&#xA;&#xD;&#xA;$appVendor = &quot;UOA&quot;&#xD;&#xA;$appName = &quot;Install or Uninstall Windows Updates&quot;&#xD;&#xA;$appVersion = [version]&quot;1.0&quot;&#xD;&#xA;$appArch = &quot;&quot;&#xD;&#xA;$appLang = &quot;EN&quot;&#xD;&#xA;$appRevision = &quot;01&quot;&#xD;&#xA;$appScriptVersion = &quot;1.0.0&quot;&#xD;&#xA;$appScriptDate = &quot;02/07/2014&quot;&#xD;&#xA;$appScriptAuthor = &quot;Topaz Paul&quot;&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;# Variables: Script - Do not modify this section&#xD;&#xA;&#xD;&#xA;$deployAppScriptFriendlyName = &quot;Deploy Application&quot;&#xD;&#xA;$deployAppScriptVersion = [version]&quot;3.1.2&quot;&#xD;&#xA;$deployAppScriptDate = &quot;04/30/2014&quot;&#xD;&#xA;$deployAppScriptParameters = $psBoundParameters&#xD;&#xA;&#xD;&#xA;# Variables: Environment&#xD;&#xA;$scriptDirectory = Split-Path -Parent $MyInvocation.MyCommand.Definition&#xD;&#xA;# Dot source the App Deploy Toolkit Functions&#xD;&#xA;.&quot;$scriptDirectory\AppDeployToolkit\AppDeployToolkitMain.ps1&quot;&#xD;&#xA;.&quot;$scriptDirectory\SupportFiles\Get-ApplicationInfo.ps1&quot;&#xD;&#xA;.&quot;$scriptDirectory\SupportFiles\Get-PendingReboot.ps1&quot;&#xD;&#xA;.&quot;$scriptDirectory\SupportFiles\Get-ScheduledTask.ps1&quot;&#xD;&#xA;.&quot;$scriptDirectory\SupportFiles\Get-UOAHotfix.ps1&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* END VARIABLE DECLARATION&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* PRE-INSTALLATION&#xD;&#xA;If ($deploymentType -ne &quot;uninstall&quot;) { $installPhase = &quot;Pre-Installation&quot;&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;function Get-WIAStatusValue($value)&#xD;&#xA;{&#xD;&#xA;   switch -exact ($value)&#xD;&#xA;   {&#xD;&#xA;      0   {&quot;NotStarted&quot;}&#xD;&#xA;      1   {&quot;InProgress&quot;}&#xD;&#xA;      2   {&quot;Succeeded&quot;}&#xD;&#xA;      3   {&quot;SucceededWithErrors&quot;}&#xD;&#xA;      4   {&quot;Failed&quot;}&#xD;&#xA;      5   {&quot;Aborted&quot;}&#xD;&#xA;   } &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* INSTALLATION &#xD;&#xA;$installPhase = &quot;Installation&quot;&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;    # Is reboot pending&#xD;&#xA;    &#xD;&#xA;    if ($(Get-PendingReboot).RebootPending) {  &#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;The system is pending reboot from a previous install or uninstall.&quot;&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    # Prompt the user if not silent mode:&#xD;&#xA;    &#xD;&#xA;    Show-InstallationWelcome -AllowDefer -DeferTimes 3 -CloseAppsCountdown &quot;120&quot;&#xD;&#xA;    &#xD;&#xA;    # Show Progress Message (with the default message)&#xD;&#xA;    &#xD;&#xA;    Show-InstallationProgress -StatusMessage &quot;Installing Security Updates. Please Wait...&quot; &#xD;&#xA;    &#xD;&#xA;    if ((Get-Service -Name wuauserv).Status -ne &quot;Running&quot;){&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;WSUS Service is stopped: Restarting the service&quot;&#xD;&#xA;        &#xD;&#xA;        Set-Service  wuauserv -StartupType Automatic&#xD;&#xA;        &#xD;&#xA;        Start-Service -name wuauserv&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#x9;$needsReboot = $false&#xD;&#xA;    &#xD;&#xA;&#x9;$UpdateSession = New-Object -ComObject Microsoft.Update.Session&#xD;&#xA;    &#xD;&#xA;&#x9;$UpdateSearcher = $UpdateSession.CreateUpdateSearcher()&#xD;&#xA; &#xD;&#xA;&#x9;Write-Log &quot; - Searching for Updates&quot;&#xD;&#xA;    &#xD;&#xA;&#x9;$SearchResult = ($UpdateSearcher.Search(&quot;IsAssigned=1 and IsHidden=0 and IsInstalled=0&quot;)).Updates&#xD;&#xA;    &#xD;&#xA;    Write-Log &quot;$($SearchResult.Count) updates in total. But checking for assigned updates in the last $Updatesince days.&quot;&#xD;&#xA;&#xD;&#xA;    $SearchResult = $SearchResult | Where-Object {$_.LastDeploymentChangeTime -gt ((Get-Date).Adddays(-$Updatesince))}&#xD;&#xA;    &#xD;&#xA;    if (!($SearchResult)) {&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;0 updates have been assigned to this machine in the last $Updatesince days.&quot;&#xD;&#xA;        &#xD;&#xA;        Exit-Script -ExitCode 0&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    Write-Log &quot;$($SearchResult.Count) updates in the last $Updatesince days. Starting to install $($SearchResult.Count) updates...&quot;&#xD;&#xA;    &#xD;&#xA;    $SearchResult = $SearchResult | Sort-Object LastDeploymentChangeTime -Descending # Sort updates&#xD;&#xA;    &#xD;&#xA; &#xD;&#xA;&#x9;foreach($Update in $SearchResult) {&#xD;&#xA;    &#xD;&#xA;&#x9;&#x9;# Add Update to Collection&#xD;&#xA;&#x9;&#x9;$UpdatesCollection = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;if ( $Update.EulaAccepted -eq 0 ) { $Update.AcceptEula() }&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesCollection.Add($Update)&#xD;&#xA; &#xD;&#xA;&#x9;&#x9;# Download&#xD;&#xA;&#x9;&#x9;Write-Log &quot; + Downloading - $($Update.Title)&quot;&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesDownloader = $UpdateSession.CreateUpdateDownloader()&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesDownloader.Updates = $UpdatesCollection&#xD;&#xA;        &#xD;&#xA;        $UpdatesDownloader.Priority = 3&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$DownloadResult = $UpdatesDownloader.Download()&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$Message = &quot;   - Download {0}&quot; -f (Get-WIAStatusValue $DownloadResult.ResultCode)&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;Write-Log &quot;$message&quot; &#xD;&#xA; &#xD;&#xA;&#x9;&#x9;# Install&#xD;&#xA;&#x9;&#x9;Write-Log &quot;   - Installing Update&quot;&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesInstaller = $UpdateSession.CreateUpdateInstaller()&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesInstaller.Updates = $UpdatesCollection&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$InstallResult = $UpdatesInstaller.Install()&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$Message = &quot;   - Install {0}&quot; -f (Get-WIAStatusValue $DownloadResult.ResultCode)&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;Write-Log &quot;$message&quot;&#xD;&#xA; &#xD;&#xA;&#x9;&#x9;$needsReboot = $installResult.rebootRequired&#xD;&#xA;        &#xD;&#xA;        if ((Get-Service -Name wuauserv).Status -ne &quot;Running&quot;){&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;WSUS Service is stopped: Restarting the service&quot;&#xD;&#xA;            &#xD;&#xA;            Set-Service  wuauserv -StartupType Automatic&#xD;&#xA;            &#xD;&#xA;            Start-Service -name wuauserv&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;&#x9;}&#xD;&#xA; &#xD;&#xA;&#x9;if (($needsReboot) -or ($(Get-PendingReboot).RebootPending)) {&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;Reboot required: One or more of the installed update(s) require a reboot&quot;&#xD;&#xA;        &#xD;&#xA;        if ($DeployMode -match &quot;silent&quot;) {&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;Deployment mode is SILENT. Forcing a reboot without any notification&quot;&#xD;&#xA;        &#xD;&#xA;            restart-computer -Force&#xD;&#xA;        &#xD;&#xA;        } else {&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;Deployment mode is INTERACTIVE. The script Will notify user about the reboot&quot;&#xD;&#xA;        &#xD;&#xA;            Show-InstallationRestartPrompt -Countdownseconds 600 -CountdownNoHideSeconds 60&#xD;&#xA;        &#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* POST-INSTALLATION&#xD;&#xA;$installPhase = &quot;Post-Installation&quot;&#xD;&#xA;#*===============================================&#xD;&#xA; &#xD;&#xA;       &#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* UNINSTALLATION&#xD;&#xA;} ElseIf ($deploymentType -eq &quot;uninstall&quot;) { $installPhase = &quot;Uninstallation&quot;&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;    # Prompt the user to close the following applications if they are running:&#xD;&#xA;    &#xD;&#xA;    Show-InstallationWelcome -AllowDefer -DeferTimes 3 -CloseAppsCountdown &quot;120&quot;&#xD;&#xA;    &#xD;&#xA;    # Show Progress Message (with a message to indicate the application is being uninstalled)&#xD;&#xA;    &#xD;&#xA;    Show-InstallationProgress -StatusMessage &quot;Uninstalling Security Updates. Please Wait...&quot; &#xD;&#xA;    &#xD;&#xA;    if ((Get-Service -Name wuauserv).Status -ne &quot;Running&quot;){&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;WSUS Service is stopped: Restarting the service&quot;&#xD;&#xA;        &#xD;&#xA;        Set-Service  wuauserv -StartupType Automatic&#xD;&#xA;        &#xD;&#xA;        Start-Service -name wuauserv&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $Updates = ((New-Object -ComObject Microsoft.Update.Session).CreateUpdateSearcher()).Search(&quot;IsInstalled = 1&quot;).Updates # Retrieve installed updates&#xD;&#xA;    &#xD;&#xA;    Write-Log &quot;$($Updates.Count) updates total&quot;&#xD;&#xA;&#xD;&#xA;    #$Updates = $Updates | Where-Object {$_.LastDeploymentChangeTime -gt ((Get-Date).Adddays(-$Updatesince))}&#xD;&#xA;    &#xD;&#xA;    $Updates = Get-UOAHotfix|Where-Object {$_.Installedon -gt ((Get-Date).Adddays(-$Updatesince))}&#xD;&#xA;    &#xD;&#xA;    $Updates = $Updates | Sort-Object Installedon -Descending # Sort updates&#xD;&#xA;    &#xD;&#xA;     if (!($Updates)) {&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;0 updates have been installed on this machine in the last $Updatesince days.&quot;&#xD;&#xA;        &#xD;&#xA;        Exit-Script -ExitCode 0&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    Write-Log &quot;$($Updates.Count) updates in the last $Updatesince days. Starting to Uninstall $($Updates.Count) updates...&quot;&#xD;&#xA;&#xD;&#xA;    Foreach($Update in $Updates) {&#xD;&#xA;    &#xD;&#xA;        if ((Get-Service -Name wuauserv).Status -ne &quot;Running&quot;){&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;WSUS Service is stopped: Restarting the service&quot;&#xD;&#xA;            &#xD;&#xA;            Set-Service  wuauserv -StartupType Automatic&#xD;&#xA;            &#xD;&#xA;            Start-Service -name wuauserv&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    &#x9;$ID = $($Update.HotFixID -replace 'KB', '')&#xD;&#xA;&#xD;&#xA;    &#x9;Write-Log &quot;Removing KB$ID&quot;&#xD;&#xA;&#xD;&#xA;    &#x9;Invoke-Expression &quot;wusa.exe /uninstall /kb:$ID /quiet /log /norestart&quot;&#xD;&#xA;&#xD;&#xA;    &#x9;while (@(Get-Process wusa -ErrorAction SilentlyContinue).Count -ne 0) { Start-Sleep 1 }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    if ($(Get-PendingReboot).RebootPending) {&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;Reboot required: One or more of the Uninstalled update(s) require a reboot&quot;&#xD;&#xA;        &#xD;&#xA;        if ($DeployMode -match &quot;silent&quot;) {&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;Deployment mode is SILENT. Forcing a reboot without any notification&quot;&#xD;&#xA;        &#xD;&#xA;            restart-computer -Force&#xD;&#xA;        &#xD;&#xA;        } else {&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;Deployment mode is INTERACTIVE. The script Will notify user about the reboot&quot;&#xD;&#xA;        &#xD;&#xA;            Show-InstallationRestartPrompt -Countdownseconds 600 -CountdownNoHideSeconds 60&#xD;&#xA;        &#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;     &#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* END SCRIPT BODY&#xD;&#xA;} } Catch {$exceptionMessage = &quot;$($_.Exception.Message) `($($_.ScriptStackTrace)`)&quot;; Write-Log &quot;$exceptionMessage&quot;; Exit-Script -ExitCode 1} # Catch any errors in this script &#xD;&#xA;&#xD;&#xA;Exit-Script -ExitCode 0 # Otherwise call the Exit-Script function to perform final cleanup operations&#xD;&#xA;#*===============================================" />
  <Code Content=".\Deploy-Application.EXE -DeploymentType Install -DeployMode Silent -Updatesince 10" />
  <Code Content=".\Deploy-Application.EXE -DeploymentType Install -DeployMode Interactive -Updatesince 10" />
  <Code Content=".\Deploy-Application.EXE -DeploymentType UnInstall -DeployMode Silent  -Updatesince 10" />
  <Code Content=".\Deploy-Application.EXE -DeploymentType UnInstall -DeployMode Interactive  -Updatesince 10" />
  <Code Content="Param (&#xD;&#xA;&#x9;[ValidateSet(&quot;Install&quot;,&quot;Uninstall&quot;)] &#xD;&#xA;&#x9;[string]$DeploymentType = &quot;Install&quot;,&#xD;&#xA;&#x9;[ValidateSet(&quot;Interactive&quot;,&quot;Silent&quot;,&quot;NonInteractive&quot;)]&#xD;&#xA;&#x9;[string]$DeployMode = &quot;silent&quot;,&#xD;&#xA;&#x9;[switch] $AllowRebootPassThru = $False,&#xD;&#xA;&#x9;[switch] $TerminalServerMode = $false,&#xD;&#xA;    [switch] $ForceRestartMode = $True,&#xD;&#xA;    [Parameter(Mandatory=$true)]&#xD;&#xA;    [int] $Updatesince = 1&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* VARIABLE DECLARATION&#xD;&#xA;Try {&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;# Variables: Application&#xD;&#xA;&#xD;&#xA;$appVendor = &quot;UOA&quot;&#xD;&#xA;$appName = &quot;Install or Uninstall Windows Updates&quot;&#xD;&#xA;$appVersion = [version]&quot;1.0&quot;&#xD;&#xA;$appArch = &quot;&quot;&#xD;&#xA;$appLang = &quot;EN&quot;&#xD;&#xA;$appRevision = &quot;01&quot;&#xD;&#xA;$appScriptVersion = &quot;1.0.0&quot;&#xD;&#xA;$appScriptDate = &quot;02/07/2014&quot;&#xD;&#xA;$appScriptAuthor = &quot;Topaz Paul&quot;&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;# Variables: Script - Do not modify this section&#xD;&#xA;&#xD;&#xA;$deployAppScriptFriendlyName = &quot;Deploy Application&quot;&#xD;&#xA;$deployAppScriptVersion = [version]&quot;3.1.2&quot;&#xD;&#xA;$deployAppScriptDate = &quot;04/30/2014&quot;&#xD;&#xA;$deployAppScriptParameters = $psBoundParameters&#xD;&#xA;&#xD;&#xA;# Variables: Environment&#xD;&#xA;$scriptDirectory = Split-Path -Parent $MyInvocation.MyCommand.Definition&#xD;&#xA;# Dot source the App Deploy Toolkit Functions&#xD;&#xA;.&quot;$scriptDirectory\AppDeployToolkit\AppDeployToolkitMain.ps1&quot;&#xD;&#xA;.&quot;$scriptDirectory\SupportFiles\Get-ApplicationInfo.ps1&quot;&#xD;&#xA;.&quot;$scriptDirectory\SupportFiles\Get-PendingReboot.ps1&quot;&#xD;&#xA;.&quot;$scriptDirectory\SupportFiles\Get-ScheduledTask.ps1&quot;&#xD;&#xA;.&quot;$scriptDirectory\SupportFiles\Get-UOAHotfix.ps1&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* END VARIABLE DECLARATION&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* PRE-INSTALLATION&#xD;&#xA;If ($deploymentType -ne &quot;uninstall&quot;) { $installPhase = &quot;Pre-Installation&quot;&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;function Get-WIAStatusValue($value)&#xD;&#xA;{&#xD;&#xA;   switch -exact ($value)&#xD;&#xA;   {&#xD;&#xA;      0   {&quot;NotStarted&quot;}&#xD;&#xA;      1   {&quot;InProgress&quot;}&#xD;&#xA;      2   {&quot;Succeeded&quot;}&#xD;&#xA;      3   {&quot;SucceededWithErrors&quot;}&#xD;&#xA;      4   {&quot;Failed&quot;}&#xD;&#xA;      5   {&quot;Aborted&quot;}&#xD;&#xA;   } &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* INSTALLATION &#xD;&#xA;$installPhase = &quot;Installation&quot;&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;    # Is reboot pending&#xD;&#xA;    &#xD;&#xA;    if ($(Get-PendingReboot).RebootPending) {  &#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;The system is pending reboot from a previous install or uninstall.&quot;&#xD;&#xA;        &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    # Prompt the user if not silent mode:&#xD;&#xA;    &#xD;&#xA;    Show-InstallationWelcome -AllowDefer -DeferTimes 3 -CloseAppsCountdown &quot;120&quot;&#xD;&#xA;    &#xD;&#xA;    # Show Progress Message (with the default message)&#xD;&#xA;    &#xD;&#xA;    Show-InstallationProgress -StatusMessage &quot;Installing Security Updates. Please Wait...&quot; &#xD;&#xA;    &#xD;&#xA;    if ((Get-Service -Name wuauserv).Status -ne &quot;Running&quot;){&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;WSUS Service is stopped: Restarting the service&quot;&#xD;&#xA;        &#xD;&#xA;        Set-Service  wuauserv -StartupType Automatic&#xD;&#xA;        &#xD;&#xA;        Start-Service -name wuauserv&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#x9;$needsReboot = $false&#xD;&#xA;    &#xD;&#xA;&#x9;$UpdateSession = New-Object -ComObject Microsoft.Update.Session&#xD;&#xA;    &#xD;&#xA;&#x9;$UpdateSearcher = $UpdateSession.CreateUpdateSearcher()&#xD;&#xA; &#xD;&#xA;&#x9;Write-Log &quot; - Searching for Updates&quot;&#xD;&#xA;    &#xD;&#xA;&#x9;$SearchResult = ($UpdateSearcher.Search(&quot;IsAssigned=1 and IsHidden=0 and IsInstalled=0&quot;)).Updates&#xD;&#xA;    &#xD;&#xA;    Write-Log &quot;$($SearchResult.Count) updates in total. But checking for assigned updates in the last $Updatesince days.&quot;&#xD;&#xA;&#xD;&#xA;    $SearchResult = $SearchResult | Where-Object {$_.LastDeploymentChangeTime -gt ((Get-Date).Adddays(-$Updatesince))}&#xD;&#xA;    &#xD;&#xA;    if (!($SearchResult)) {&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;0 updates have been assigned to this machine in the last $Updatesince days.&quot;&#xD;&#xA;        &#xD;&#xA;        Exit-Script -ExitCode 0&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    Write-Log &quot;$($SearchResult.Count) updates in the last $Updatesince days. Starting to install $($SearchResult.Count) updates...&quot;&#xD;&#xA;    &#xD;&#xA;    $SearchResult = $SearchResult | Sort-Object LastDeploymentChangeTime -Descending # Sort updates&#xD;&#xA;    &#xD;&#xA; &#xD;&#xA;&#x9;foreach($Update in $SearchResult) {&#xD;&#xA;    &#xD;&#xA;&#x9;&#x9;# Add Update to Collection&#xD;&#xA;&#x9;&#x9;$UpdatesCollection = New-Object -ComObject Microsoft.Update.UpdateColl&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;if ( $Update.EulaAccepted -eq 0 ) { $Update.AcceptEula() }&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesCollection.Add($Update)&#xD;&#xA; &#xD;&#xA;&#x9;&#x9;# Download&#xD;&#xA;&#x9;&#x9;Write-Log &quot; + Downloading - $($Update.Title)&quot;&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesDownloader = $UpdateSession.CreateUpdateDownloader()&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesDownloader.Updates = $UpdatesCollection&#xD;&#xA;        &#xD;&#xA;        $UpdatesDownloader.Priority = 3&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$DownloadResult = $UpdatesDownloader.Download()&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$Message = &quot;   - Download {0}&quot; -f (Get-WIAStatusValue $DownloadResult.ResultCode)&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;Write-Log &quot;$message&quot; &#xD;&#xA; &#xD;&#xA;&#x9;&#x9;# Install&#xD;&#xA;&#x9;&#x9;Write-Log &quot;   - Installing Update&quot;&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesInstaller = $UpdateSession.CreateUpdateInstaller()&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$UpdatesInstaller.Updates = $UpdatesCollection&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$InstallResult = $UpdatesInstaller.Install()&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;$Message = &quot;   - Install {0}&quot; -f (Get-WIAStatusValue $DownloadResult.ResultCode)&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;Write-Log &quot;$message&quot;&#xD;&#xA; &#xD;&#xA;&#x9;&#x9;$needsReboot = $installResult.rebootRequired&#xD;&#xA;        &#xD;&#xA;        if ((Get-Service -Name wuauserv).Status -ne &quot;Running&quot;){&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;WSUS Service is stopped: Restarting the service&quot;&#xD;&#xA;            &#xD;&#xA;            Set-Service  wuauserv -StartupType Automatic&#xD;&#xA;            &#xD;&#xA;            Start-Service -name wuauserv&#xD;&#xA;        }&#xD;&#xA;        &#xD;&#xA;&#x9;}&#xD;&#xA; &#xD;&#xA;&#x9;if (($needsReboot) -or ($(Get-PendingReboot).RebootPending)) {&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;Reboot required: One or more of the installed update(s) require a reboot&quot;&#xD;&#xA;        &#xD;&#xA;        if ($DeployMode -match &quot;silent&quot;) {&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;Deployment mode is SILENT. Forcing a reboot without any notification&quot;&#xD;&#xA;        &#xD;&#xA;            restart-computer -Force&#xD;&#xA;        &#xD;&#xA;        } else {&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;Deployment mode is INTERACTIVE. The script Will notify user about the reboot&quot;&#xD;&#xA;        &#xD;&#xA;            Show-InstallationRestartPrompt -Countdownseconds 600 -CountdownNoHideSeconds 60&#xD;&#xA;        &#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* POST-INSTALLATION&#xD;&#xA;$installPhase = &quot;Post-Installation&quot;&#xD;&#xA;#*===============================================&#xD;&#xA; &#xD;&#xA;       &#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* UNINSTALLATION&#xD;&#xA;} ElseIf ($deploymentType -eq &quot;uninstall&quot;) { $installPhase = &quot;Uninstallation&quot;&#xD;&#xA;#*===============================================&#xD;&#xA;&#xD;&#xA;    # Prompt the user to close the following applications if they are running:&#xD;&#xA;    &#xD;&#xA;    Show-InstallationWelcome -AllowDefer -DeferTimes 3 -CloseAppsCountdown &quot;120&quot;&#xD;&#xA;    &#xD;&#xA;    # Show Progress Message (with a message to indicate the application is being uninstalled)&#xD;&#xA;    &#xD;&#xA;    Show-InstallationProgress -StatusMessage &quot;Uninstalling Security Updates. Please Wait...&quot; &#xD;&#xA;    &#xD;&#xA;    if ((Get-Service -Name wuauserv).Status -ne &quot;Running&quot;){&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;WSUS Service is stopped: Restarting the service&quot;&#xD;&#xA;        &#xD;&#xA;        Set-Service  wuauserv -StartupType Automatic&#xD;&#xA;        &#xD;&#xA;        Start-Service -name wuauserv&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    $Updates = ((New-Object -ComObject Microsoft.Update.Session).CreateUpdateSearcher()).Search(&quot;IsInstalled = 1&quot;).Updates # Retrieve installed updates&#xD;&#xA;    &#xD;&#xA;    Write-Log &quot;$($Updates.Count) updates total&quot;&#xD;&#xA;&#xD;&#xA;    #$Updates = $Updates | Where-Object {$_.LastDeploymentChangeTime -gt ((Get-Date).Adddays(-$Updatesince))}&#xD;&#xA;    &#xD;&#xA;    $Updates = Get-UOAHotfix|Where-Object {$_.Installedon -gt ((Get-Date).Adddays(-$Updatesince))}&#xD;&#xA;    &#xD;&#xA;    $Updates = $Updates | Sort-Object Installedon -Descending # Sort updates&#xD;&#xA;    &#xD;&#xA;     if (!($Updates)) {&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;0 updates have been installed on this machine in the last $Updatesince days.&quot;&#xD;&#xA;        &#xD;&#xA;        Exit-Script -ExitCode 0&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    Write-Log &quot;$($Updates.Count) updates in the last $Updatesince days. Starting to Uninstall $($Updates.Count) updates...&quot;&#xD;&#xA;&#xD;&#xA;    Foreach($Update in $Updates) {&#xD;&#xA;    &#xD;&#xA;        if ((Get-Service -Name wuauserv).Status -ne &quot;Running&quot;){&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;WSUS Service is stopped: Restarting the service&quot;&#xD;&#xA;            &#xD;&#xA;            Set-Service  wuauserv -StartupType Automatic&#xD;&#xA;            &#xD;&#xA;            Start-Service -name wuauserv&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    &#x9;$ID = $($Update.HotFixID -replace 'KB', '')&#xD;&#xA;&#xD;&#xA;    &#x9;Write-Log &quot;Removing KB$ID&quot;&#xD;&#xA;&#xD;&#xA;    &#x9;Invoke-Expression &quot;wusa.exe /uninstall /kb:$ID /quiet /log /norestart&quot;&#xD;&#xA;&#xD;&#xA;    &#x9;while (@(Get-Process wusa -ErrorAction SilentlyContinue).Count -ne 0) { Start-Sleep 1 }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    if ($(Get-PendingReboot).RebootPending) {&#xD;&#xA;    &#xD;&#xA;        Write-Log &quot;Reboot required: One or more of the Uninstalled update(s) require a reboot&quot;&#xD;&#xA;        &#xD;&#xA;        if ($DeployMode -match &quot;silent&quot;) {&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;Deployment mode is SILENT. Forcing a reboot without any notification&quot;&#xD;&#xA;        &#xD;&#xA;            restart-computer -Force&#xD;&#xA;        &#xD;&#xA;        } else {&#xD;&#xA;        &#xD;&#xA;            Write-Log &quot;Deployment mode is INTERACTIVE. The script Will notify user about the reboot&quot;&#xD;&#xA;        &#xD;&#xA;            Show-InstallationRestartPrompt -Countdownseconds 600 -CountdownNoHideSeconds 60&#xD;&#xA;        &#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;     &#xD;&#xA;&#xD;&#xA;#*===============================================&#xD;&#xA;#* END SCRIPT BODY&#xD;&#xA;} } Catch {$exceptionMessage = &quot;$($_.Exception.Message) `($($_.ScriptStackTrace)`)&quot;; Write-Log &quot;$exceptionMessage&quot;; Exit-Script -ExitCode 1} # Catch any errors in this script &#xD;&#xA;&#xD;&#xA;Exit-Script -ExitCode 0 # Otherwise call the Exit-Script function to perform final cleanup operations&#xD;&#xA;#*===============================================" />
</CodeSnippets>