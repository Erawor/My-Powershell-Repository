<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&lt;#&#xD;&#xA;.SYNOPSIS Move nodes to specified WSUS group based on the systems local Timezone.&#xD;&#xA;.NOTES All groups need to exist prior to using this script.  Specify $varWSUSServer as your WSUS server and $varFilterGroup as the WSUS group you would like to sort through.  Next determine which groups you will be sorting into by timezone.&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;Clear-Host&#xD;&#xA;$VerbosePreference = &quot;Continue&quot;&#xD;&#xA;&#xD;&#xA;$varWSUSServer = &quot;WSUSServer1&quot;&#xD;&#xA;$varLogFile = &quot;LOG_Move-SystemsByTimezone-$($env:computername).log&quot;&#xD;&#xA;$varFilterGroup = &quot;Unassigned Computers&quot;&#xD;&#xA;$varGroupEST = &quot;EST Servers&quot;&#xD;&#xA;$varGroupCST = &quot;CST Servers&quot;&#xD;&#xA;$varGroupMST = &quot;MST Servers&quot;&#xD;&#xA;$varGroupPST = &quot;PST Servers&quot;&#xD;&#xA;$varGroupOther = &quot;Other Timezone Servers&quot;&#xD;&#xA;&#xD;&#xA;Function LogWrite&#xD;&#xA;{&#xD;&#xA;  Param ([string]$logstring)&#xD;&#xA;  Add-Content $varLogFile -value $logstring&#xD;&#xA;  Write-Host $logstring&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;LogWrite &quot;`n$(get-date -f u)`t--- START ---&quot;&#xD;&#xA;LogWrite &quot;$(get-date -f u)`tExecuting Move-SystemsByTimezone.ps1 on $($env:computername) by user $($env:USERNAME)&quot;&#xD;&#xA;&#xD;&#xA;LogWrite &quot;$(get-date -f u)`tConnecting to WSUS...&quot;&#xD;&#xA;[void][reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;)&#xD;&#xA;$varWSUS = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer($varWSUSServer,$False)&#xD;&#xA;&#xD;&#xA;LogWrite &quot;$(get-date -f u)`tSearching WSUS for systems to sort through...&quot;&#xD;&#xA;$varFilterClients = ($varWSUS.GetComputerTargetGroups() | Where { $_.Name -eq $varFilterGroup }).GetComputerTargets()&#xD;&#xA;&#xD;&#xA;LogWrite &quot;$(get-date -f u)`tConnecting to appropiate WSUS groups.&quot;&#xD;&#xA;$varWSUSGroupEST = $varWSUS.GetComputerTargetGroups() | ? {$_.Name -eq $varGroupEST }&#xD;&#xA;$varWSUSGroupCST = $varWSUS.GetComputerTargetGroups() | ? {$_.Name -eq $varGroupCST }&#xD;&#xA;$varWSUSGroupMST = $varWSUS.GetComputerTargetGroups() | ? {$_.Name -eq $varGroupMST }&#xD;&#xA;$varWSUSGroupPST = $varWSUS.GetComputerTargetGroups() | ? {$_.Name -eq $varGroupPST }&#xD;&#xA;$varWSUSGroupOTHER = $varWSUS.GetComputerTargetGroups() | ? {$_.Name -eq $varGroupOther }&#xD;&#xA;&#xD;&#xA;LogWrite &quot;$(get-date -f u)`t * Begining to work through array of systems&quot;&#xD;&#xA;$varFilterClients | foreach-object {&#xD;&#xA;&#x9;LogWrite &quot;$(get-date -f u)`t &gt; Connecting to $($_.FullDomainName)&quot;&#xD;&#xA;    $varLocalHour = gwmi Win32_LocalTime -cn $_.FullDomainName | Select-Object -Property Hour&#xD;&#xA;&#x9;if (((get-date).hour)-$varLocalHour.Hour -eq &quot;0&quot;) {&#xD;&#xA;        LogWrite &quot;$(get-date -f u)`tLocal time on $($_.FullDomainName) is EST, adding to EST group.&quot;&#xD;&#xA;        $varWSUSGroupEST.AddComputerTarget($_)&#xD;&#xA;        # If you needed to remove the node from the group you sort thru, since we used a default WSUS group this can be skipped.&#xD;&#xA;        #$OriginalGroup.RemoveComputerTarget($_)&#xD;&#xA;&#x9;} elseif (((get-date).hour)-$varLocalHour.Hour -eq &quot;1&quot;) {&#xD;&#xA;        LogWrite &quot;$(get-date -f u)`tLocal time on $($_.FullDomainName) is CST, adding to CST group.&quot;&#xD;&#xA;        $varWSUSGroupCST.AddComputerTarget($_)&#xD;&#xA;        #$OriginalGroup.RemoveComputerTarget($_)&#xD;&#xA;&#x9;} elseif (((get-date).hour)-$varLocalHour.Hour -eq &quot;2&quot;) {&#xD;&#xA;        LogWrite &quot;$(get-date -f u)`tLocal time on $($_.FullDomainName) is MST, adding to MST group.&quot;&#xD;&#xA;        $varWSUSGroupMST.AddComputerTarget($_)&#xD;&#xA;        #$OriginalGroup.RemoveComputerTarget($_)&#xD;&#xA;&#x9;} elseif (((get-date).hour)-$varLocalHour.Hour -eq &quot;3&quot;) {&#xD;&#xA;        LogWrite &quot;$(get-date -f u)`tLocal time on $($_.FullDomainName) is PST, adding to PST group.&quot;&#xD;&#xA;        $varWSUSGroupPST.AddComputerTarget($_)&#xD;&#xA;        #$OriginalGroup.RemoveComputerTarget($_)&#xD;&#xA;&#x9;} elseif (((get-date).hour)-$varLocalHour.Hour -gt &quot;3&quot;) {&#xD;&#xA;        LogWrite &quot;$(get-date -f u)`tLocal time on $($_.FullDomainName) may have invalid Timezone setting or is other than continental US.&quot;&#xD;&#xA;        $varWSUSGroupOther.AddComputerTarget($_)&#xD;&#xA;        #$OriginalGroup.RemoveComputerTarget($_)&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;LogWrite &quot;`n$(get-date -f u)`t--- END ---&quot;" />
</CodeSnippets>