<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="#==========================================&#xD;&#xA;#&#xD;&#xA;#Script ID / Name:  Update-CauSchedule.ps1&#xD;&#xA;#&#xD;&#xA;#Author:   &#x9;&#x9;&#x9;&#x9;Justin Lipple (JL)&#xD;&#xA;#&#xD;&#xA;#Owner:&#x9;   &#x9;&#x9;&#x9;&#x9;Justin Lipple (JL)&#xD;&#xA;#&#xD;&#xA;#Copyright: &#x9;&#x9;&#x9;&#xD;&#xA;#&#xD;&#xA;#Created:   &#x9;&#x9;&#x9;03/04/2014&#xD;&#xA;#&#xD;&#xA;#Language: &#x9;&#x9;&#x9;&#x9;PowerShell v4&#xD;&#xA;#&#xD;&#xA;#Interpreter: &#x9;&#x9;&#x9;PowerShell v4&#xD;&#xA;#&#xD;&#xA;#Requirements:&#xD;&#xA;# &#x9;&#xD;&#xA;#&#xD;&#xA;#-------------------------------------------------------------------------&#xD;&#xA;#Purpose:  The Purpose of this script is to automate the updating of Cluster Aware Updating Self Updating mode schedules&#xD;&#xA;#&#xD;&#xA;#Additional Detail:&#xD;&#xA;#    -Unfortunately the CAU schedule only allows WeeksOfMonth and DaysOfWeek. However our work's Patch Thursday is sometimes week 2, somethimes week 3&#xD;&#xA;#     depending on what week the 2nd Tuesday of the month falls on.&#xD;&#xA;#     This script will determine that, update designated CAU clusters, and email results.&#xD;&#xA;#&#xD;&#xA;#==========================================================================&#xD;&#xA;#==============================&#xD;&#xA;#Changelog&#xD;&#xA;#==============================&#xD;&#xA;#&#xD;&#xA;# V1.0.0 JL 03/04/2014:&#xD;&#xA;# - Created script&#xD;&#xA;# V2.0.0 JL 11/04/2014:&#xD;&#xA;# - Updates and tested working version&#xD;&#xA;#&#xD;&#xA;#&#xD;&#xA;#==============================&#xD;&#xA;# End Changelog&#xD;&#xA;#==============================&#xD;&#xA;&#xD;&#xA;#Input Parameters&#xD;&#xA;Param(&#xD;&#xA;    [Parameter(Mandatory=$true,&#xD;&#xA;    ValueFromPipeline=$True)]&#xD;&#xA;    $ClusterName,&#xD;&#xA;    [Parameter(Mandatory=$true,&#xD;&#xA;    ValueFromPipeline=$True)]&#xD;&#xA;    $EmailRecipient&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;#declare constants&#xD;&#xA;&#xD;&#xA;$emailSubject = &quot;Cluster Aware Updating patch day validation - $(Get-Date)&quot;&#xD;&#xA;$emailSender = 'CAUscript-NoReply@contoso.com'&#xD;&#xA;$SMTP_SERVER = 'mailrelay.contoso.local'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#Script setup for logging &amp; output purposes&#xD;&#xA;$date = $((Get-Date).ToString(&quot;yyyyMMddHHmm&quot;))&#xD;&#xA;$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition&#xD;&#xA;$scriptName = split-path -leaf $MyInvocation.MyCommand.Definition&#xD;&#xA;$CSVFile =  &quot;$($date)-$scriptName.csv&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function Send-Email{&#xD;&#xA;Param(                     &#xD;&#xA;    $currentWeekOfMonth,&#xD;&#xA;    $actualWeekOfMonth, &#xD;&#xA;    $ClusterName, &#xD;&#xA;    $actualPatchThursday,&#xD;&#xA;    $changeRequired,&#xD;&#xA;    $newActualWeeksOfMonth)&#xD;&#xA; $head = @'&#xD;&#xA;&lt;style type=&quot;text/css&quot;&gt;&lt;!--mce:0--&gt;&lt;/style&gt;&#xD;&#xA;&lt;!-- End Styles --&gt;&#xD;&#xA;'@&#xD;&#xA;&#xD;&#xA;$body = $head&#xD;&#xA;$body += &quot;&lt;table class='myOtherTable'&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;th&gt;$($ClusterName.ToUpper()): Cluster Aware Updating patch day validation&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;The clusters current 'WeekOfMonth' schedule is&lt;/td&gt;&lt;td&gt;$currentWeekOfMonth&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;The clusters current 'StartDate' schedule is&lt;/td&gt;&lt;td&gt;$currentStartDate&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;This month's Patch Thursday date is&lt;/td&gt;&lt;td&gt;$actualPatchThursday&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;This month's actual 'WeekOfMonth' is&lt;/td&gt;&lt;td&gt;$actualWeekOfMonth&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;Is there a change required?&lt;/td&gt;&lt;td&gt;$changeRequired&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;The clusters refreshed current 'WeekOfMonth' is&lt;/td&gt;&lt;td&gt;$newActualWeeksOfMonth&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;/table&gt;&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Send-MailMessage -To $emailRecipient -Subject $emailSubject -From $emailSender -SmtpServer $SMTP_SERVER -Body ($Body | Out-String) -BodyAsHtml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Get-CauSchedule{ #function to retrieve the current schedule on a given cluster&#xD;&#xA;Param(                     &#xD;&#xA;    $clusterName)&#xD;&#xA;$objCauSchedule = $null&#xD;&#xA;$objCauSchedule = Get-CauClusterRole -ClusterName $clusterName&#xD;&#xA;&#xD;&#xA;$global:CauSchedule = $null&#xD;&#xA;$global:CauSchedule = New-object PSObject&#xD;&#xA;$global:CauSchedule | Add-Member NoteProperty DaysOfWeek $objCauSchedule.GetValue(8).Value&#xD;&#xA;$global:CauSchedule | Add-Member NoteProperty WeeksOfMonth $objCauSchedule.GetValue(9).Value&#xD;&#xA;$global:CauSchedule | Add-Member NoteProperty StartDate $objCauSchedule.GetValue(2).Value&#xD;&#xA;&#xD;&#xA;Return $global:CauSchedule&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function Set-CauSchedule{ #function to update the existing schedule on a given cluster to provided values&#xD;&#xA;Param(                     &#xD;&#xA;    $clusterName,&#xD;&#xA;    $newWeeksOfMonth)&#xD;&#xA;&#xD;&#xA;Set-CauClusterRole -ClusterName $clustername -WeeksOfMonth $newWeeksOfMonth -StartDate $(Get-Date -Date &quot;2013-01-01 18:30:00&quot;) -Force #sets start time to 6:30 PM&#xD;&#xA;&#xD;&#xA;Return $global:newActualWeeksOfMonth = ((Get-CauClusterRole -ClusterName $clusterName).GetValue(9).Value)&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function Get-PatchThursday{ #function to find Contoso Patch Thursday, for a given month &amp; year&#xD;&#xA;Param(                     &#xD;&#xA;    $month = (Get-Date).Month, &#xD;&#xA;    $year = (Get-Date).Year)&#xD;&#xA;&#xD;&#xA;$FindNthDay=2&#xD;&#xA;$WeekDay='Tuesday'&#xD;&#xA;&#xD;&#xA;If(($month -lt 1) -or ($month -gt 12)){Write-Host &quot;Month not valid&quot; -ForegroundColor Red ;Break}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$strTargetMonth = $month.toString()&#xD;&#xA;$strTargetYear = $year.ToString()&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[string]$strTempDate = $strTargetMonth+'/1/'+$strTargetYear&#xD;&#xA;[datetime]$strFirstInstance = $strTempDate&#xD;&#xA;&#xD;&#xA;while ($strFirstInstance.DayofWeek -ine $WeekDay ) { $strFirstInstance = $strFirstInstance.AddDays(1) }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#Get the nth weekday, then find 2 days later&#xD;&#xA;$global:target = ($strFirstInstance.AddDays(7*($FindNthDay-1))).AddDays(2)&#xD;&#xA;&#xD;&#xA;Return $global:target.ToString(&quot;dd/MM/yyyy&quot;)&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Get-PatchThursdayWeek{ &#xD;&#xA;Param(                     &#xD;&#xA;    $patchDay)&#xD;&#xA;&#xD;&#xA;$patchThursdaydt = [datetime]::ParseExact($patchDay, &quot;dd/MM/yyyy&quot;, $null)&#xD;&#xA;&#xD;&#xA;$numDaysDecremented = 0&#xD;&#xA;[string]$strTempDate = ($patchThursdaydt.Month).Tostring()+'/1/'+($patchThursdaydt.Year).ToString()&#xD;&#xA;[datetime]$strFirstInstance = $strTempDate&#xD;&#xA;while ($patchThursdaydt -ine $strFirstInstance ) {&#xD;&#xA;    $patchThursdaydt = $patchThursdaydt.AddDays(-1)&#xD;&#xA;    $numDaysDecremented++&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Return ([math]::Truncate($numDaysDecremented / 7) + 1)&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;#get cluster's current WeekOfMonth value&#xD;&#xA;$currentWeekOfMonth = (Get-CauSchedule $ClusterName).WeeksOfMonth[0]&#xD;&#xA;&#xD;&#xA;#get cluster's current StartDate value&#xD;&#xA;$currentStartDate = (Get-CauSchedule $ClusterName).StartDate[0]&#xD;&#xA;&#xD;&#xA;#for ($i = 1; $i -le 12; $i++){ this loop is for testing the script for each month of the year&#xD;&#xA;&#xD;&#xA;$actualPatchThursday = Get-PatchThursday #-month $i uncomment for loop testing the script for each month of the year&#xD;&#xA;$actualWeekOfMonth = Get-PatchThursdayWeek -patchday $actualPatchThursday&#xD;&#xA;&#xD;&#xA;#decide if update is required, and perform the update&#xD;&#xA;If ($currentWeekOfMonth -eq $actualWeekOfMonth){&#xD;&#xA;    $changeRequired = $false&#xD;&#xA;    $newWeekOfMonth = $currentWeekOfMonth&#xD;&#xA;    }&#xD;&#xA;ElseIf ($currentWeekOfMonth -ne $actualWeekOfMonth){&#xD;&#xA;    $changeRequired = $true&#xD;&#xA;    Set-CauSchedule $ClusterName $actualWeekOfMonth | Out-Null&#xD;&#xA;    $newWeekOfMonth = $newActualWeeksOfMonth&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;Send-Email $currentWeekOfMonth $actualWeekOfMonth $ClusterName $actualPatchThursday $changeRequired $newWeekOfMonth&#xD;&#xA;&#xD;&#xA;#} this loop is for testing the script for each month of the year&#xD;&#xA;&#xD;&#xA;" />
  <Code Content="#==========================================&#xD;&#xA;#&#xD;&#xA;#Script ID / Name:  Update-CauSchedule.ps1&#xD;&#xA;#&#xD;&#xA;#Author:   &#x9;&#x9;&#x9;&#x9;Justin Lipple (JL)&#xD;&#xA;#&#xD;&#xA;#Owner:&#x9;   &#x9;&#x9;&#x9;&#x9;Justin Lipple (JL)&#xD;&#xA;#&#xD;&#xA;#Copyright: &#x9;&#x9;&#x9;&#xD;&#xA;#&#xD;&#xA;#Created:   &#x9;&#x9;&#x9;03/04/2014&#xD;&#xA;#&#xD;&#xA;#Language: &#x9;&#x9;&#x9;&#x9;PowerShell v4&#xD;&#xA;#&#xD;&#xA;#Interpreter: &#x9;&#x9;&#x9;PowerShell v4&#xD;&#xA;#&#xD;&#xA;#Requirements:&#xD;&#xA;# &#x9;&#xD;&#xA;#&#xD;&#xA;#-------------------------------------------------------------------------&#xD;&#xA;#Purpose:  The Purpose of this script is to automate the updating of Cluster Aware Updating Self Updating mode schedules&#xD;&#xA;#&#xD;&#xA;#Additional Detail:&#xD;&#xA;#    -Unfortunately the CAU schedule only allows WeeksOfMonth and DaysOfWeek. However our work's Patch Thursday is sometimes week 2, somethimes week 3&#xD;&#xA;#     depending on what week the 2nd Tuesday of the month falls on.&#xD;&#xA;#     This script will determine that, update designated CAU clusters, and email results.&#xD;&#xA;#&#xD;&#xA;#==========================================================================&#xD;&#xA;#==============================&#xD;&#xA;#Changelog&#xD;&#xA;#==============================&#xD;&#xA;#&#xD;&#xA;# V1.0.0 JL 03/04/2014:&#xD;&#xA;# - Created script&#xD;&#xA;# V2.0.0 JL 11/04/2014:&#xD;&#xA;# - Updates and tested working version&#xD;&#xA;#&#xD;&#xA;#&#xD;&#xA;#==============================&#xD;&#xA;# End Changelog&#xD;&#xA;#==============================&#xD;&#xA;&#xD;&#xA;#Input Parameters&#xD;&#xA;Param(&#xD;&#xA;    [Parameter(Mandatory=$true,&#xD;&#xA;    ValueFromPipeline=$True)]&#xD;&#xA;    $ClusterName,&#xD;&#xA;    [Parameter(Mandatory=$true,&#xD;&#xA;    ValueFromPipeline=$True)]&#xD;&#xA;    $EmailRecipient&#xD;&#xA;)&#xD;&#xA;&#xD;&#xA;#declare constants&#xD;&#xA;&#xD;&#xA;$emailSubject = &quot;Cluster Aware Updating patch day validation - $(Get-Date)&quot;&#xD;&#xA;$emailSender = 'CAUscript-NoReply@contoso.com'&#xD;&#xA;$SMTP_SERVER = 'mailrelay.contoso.local'&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#Script setup for logging &amp; output purposes&#xD;&#xA;$date = $((Get-Date).ToString(&quot;yyyyMMddHHmm&quot;))&#xD;&#xA;$scriptPath = split-path -parent $MyInvocation.MyCommand.Definition&#xD;&#xA;$scriptName = split-path -leaf $MyInvocation.MyCommand.Definition&#xD;&#xA;$CSVFile =  &quot;$($date)-$scriptName.csv&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function Send-Email{&#xD;&#xA;Param(                     &#xD;&#xA;    $currentWeekOfMonth,&#xD;&#xA;    $actualWeekOfMonth, &#xD;&#xA;    $ClusterName, &#xD;&#xA;    $actualPatchThursday,&#xD;&#xA;    $changeRequired,&#xD;&#xA;    $newActualWeeksOfMonth)&#xD;&#xA; $head = @'&#xD;&#xA;&lt;style type=&quot;text/css&quot;&gt;&lt;!--mce:0--&gt;&lt;/style&gt;&#xD;&#xA;&lt;!-- End Styles --&gt;&#xD;&#xA;'@&#xD;&#xA;&#xD;&#xA;$body = $head&#xD;&#xA;$body += &quot;&lt;table class='myOtherTable'&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;th&gt;$($ClusterName.ToUpper()): Cluster Aware Updating patch day validation&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;The clusters current 'WeekOfMonth' schedule is&lt;/td&gt;&lt;td&gt;$currentWeekOfMonth&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;The clusters current 'StartDate' schedule is&lt;/td&gt;&lt;td&gt;$currentStartDate&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;This month's Patch Thursday date is&lt;/td&gt;&lt;td&gt;$actualPatchThursday&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;This month's actual 'WeekOfMonth' is&lt;/td&gt;&lt;td&gt;$actualWeekOfMonth&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;Is there a change required?&lt;/td&gt;&lt;td&gt;$changeRequired&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;tr&gt;&lt;td&gt;The clusters refreshed current 'WeekOfMonth' is&lt;/td&gt;&lt;td&gt;$newActualWeeksOfMonth&lt;/td&gt;&lt;/tr&gt;&quot;&#xD;&#xA;$body += &quot;&lt;/table&gt;&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Send-MailMessage -To $emailRecipient -Subject $emailSubject -From $emailSender -SmtpServer $SMTP_SERVER -Body ($Body | Out-String) -BodyAsHtml&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Get-CauSchedule{ #function to retrieve the current schedule on a given cluster&#xD;&#xA;Param(                     &#xD;&#xA;    $clusterName)&#xD;&#xA;$objCauSchedule = $null&#xD;&#xA;$objCauSchedule = Get-CauClusterRole -ClusterName $clusterName&#xD;&#xA;&#xD;&#xA;$global:CauSchedule = $null&#xD;&#xA;$global:CauSchedule = New-object PSObject&#xD;&#xA;$global:CauSchedule | Add-Member NoteProperty DaysOfWeek $objCauSchedule.GetValue(8).Value&#xD;&#xA;$global:CauSchedule | Add-Member NoteProperty WeeksOfMonth $objCauSchedule.GetValue(9).Value&#xD;&#xA;$global:CauSchedule | Add-Member NoteProperty StartDate $objCauSchedule.GetValue(2).Value&#xD;&#xA;&#xD;&#xA;Return $global:CauSchedule&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function Set-CauSchedule{ #function to update the existing schedule on a given cluster to provided values&#xD;&#xA;Param(                     &#xD;&#xA;    $clusterName,&#xD;&#xA;    $newWeeksOfMonth)&#xD;&#xA;&#xD;&#xA;Set-CauClusterRole -ClusterName $clustername -WeeksOfMonth $newWeeksOfMonth -StartDate $(Get-Date -Date &quot;2013-01-01 18:30:00&quot;) -Force #sets start time to 6:30 PM&#xD;&#xA;&#xD;&#xA;Return $global:newActualWeeksOfMonth = ((Get-CauClusterRole -ClusterName $clusterName).GetValue(9).Value)&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function Get-PatchThursday{ #function to find Contoso Patch Thursday, for a given month &amp; year&#xD;&#xA;Param(                     &#xD;&#xA;    $month = (Get-Date).Month, &#xD;&#xA;    $year = (Get-Date).Year)&#xD;&#xA;&#xD;&#xA;$FindNthDay=2&#xD;&#xA;$WeekDay='Tuesday'&#xD;&#xA;&#xD;&#xA;If(($month -lt 1) -or ($month -gt 12)){Write-Host &quot;Month not valid&quot; -ForegroundColor Red ;Break}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$strTargetMonth = $month.toString()&#xD;&#xA;$strTargetYear = $year.ToString()&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;[string]$strTempDate = $strTargetMonth+'/1/'+$strTargetYear&#xD;&#xA;[datetime]$strFirstInstance = $strTempDate&#xD;&#xA;&#xD;&#xA;while ($strFirstInstance.DayofWeek -ine $WeekDay ) { $strFirstInstance = $strFirstInstance.AddDays(1) }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#Get the nth weekday, then find 2 days later&#xD;&#xA;$global:target = ($strFirstInstance.AddDays(7*($FindNthDay-1))).AddDays(2)&#xD;&#xA;&#xD;&#xA;Return $global:target.ToString(&quot;dd/MM/yyyy&quot;)&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function Get-PatchThursdayWeek{ &#xD;&#xA;Param(                     &#xD;&#xA;    $patchDay)&#xD;&#xA;&#xD;&#xA;$patchThursdaydt = [datetime]::ParseExact($patchDay, &quot;dd/MM/yyyy&quot;, $null)&#xD;&#xA;&#xD;&#xA;$numDaysDecremented = 0&#xD;&#xA;[string]$strTempDate = ($patchThursdaydt.Month).Tostring()+'/1/'+($patchThursdaydt.Year).ToString()&#xD;&#xA;[datetime]$strFirstInstance = $strTempDate&#xD;&#xA;while ($patchThursdaydt -ine $strFirstInstance ) {&#xD;&#xA;    $patchThursdaydt = $patchThursdaydt.AddDays(-1)&#xD;&#xA;    $numDaysDecremented++&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Return ([math]::Truncate($numDaysDecremented / 7) + 1)&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;    &#xD;&#xA;#get cluster's current WeekOfMonth value&#xD;&#xA;$currentWeekOfMonth = (Get-CauSchedule $ClusterName).WeeksOfMonth[0]&#xD;&#xA;&#xD;&#xA;#get cluster's current StartDate value&#xD;&#xA;$currentStartDate = (Get-CauSchedule $ClusterName).StartDate[0]&#xD;&#xA;&#xD;&#xA;#for ($i = 1; $i -le 12; $i++){ this loop is for testing the script for each month of the year&#xD;&#xA;&#xD;&#xA;$actualPatchThursday = Get-PatchThursday #-month $i uncomment for loop testing the script for each month of the year&#xD;&#xA;$actualWeekOfMonth = Get-PatchThursdayWeek -patchday $actualPatchThursday&#xD;&#xA;&#xD;&#xA;#decide if update is required, and perform the update&#xD;&#xA;If ($currentWeekOfMonth -eq $actualWeekOfMonth){&#xD;&#xA;    $changeRequired = $false&#xD;&#xA;    $newWeekOfMonth = $currentWeekOfMonth&#xD;&#xA;    }&#xD;&#xA;ElseIf ($currentWeekOfMonth -ne $actualWeekOfMonth){&#xD;&#xA;    $changeRequired = $true&#xD;&#xA;    Set-CauSchedule $ClusterName $actualWeekOfMonth | Out-Null&#xD;&#xA;    $newWeekOfMonth = $newActualWeeksOfMonth&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA; &#xD;&#xA;Send-Email $currentWeekOfMonth $actualWeekOfMonth $ClusterName $actualPatchThursday $changeRequired $newWeekOfMonth&#xD;&#xA;&#xD;&#xA;#} this loop is for testing the script for each month of the year&#xD;&#xA;&#xD;&#xA;" />
</CodeSnippets>