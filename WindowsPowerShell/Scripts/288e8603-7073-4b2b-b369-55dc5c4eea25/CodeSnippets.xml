<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&lt;#&#xD;&#xA;    .SYNOPSIS&#xD;&#xA;        Get-ComputerUpdateRport&#xD;&#xA;    .DESCRIPTION&#xD;&#xA;        This script uses two functions to get a list of computers from ActiveDirectory and then query&#xD;&#xA;        each computer for a list of pending updates. It then returns selected fields from that function&#xD;&#xA;        to create the report.&#xD;&#xA;    .PARAMETER ADSPath&#xD;&#xA;        The LDAP URI where your computers are located.&#xD;&#xA;    .EXAMPLE&#xD;&#xA;        .\Get-ComputerUpdateReport -ADSPath &quot;LDAP://DC=company,DC=com&quot; |Export-Csv -Path .\Report.CSV&#xD;&#xA;        &#xD;&#xA;        Description&#xD;&#xA;        -----------&#xD;&#xA;        This example shows sending the output to a .CSV file.&#xD;&#xA;    .EXAMPLE&#xD;&#xA;        .\Get-ComputerUpdateReport -ADSPath &quot;LDAP://DC=company,DC=com&quot;&#xD;&#xA;        &#xD;&#xA;        ComputerName    : scm&#xD;&#xA;        KBArticleIDs    : 2512827&#xD;&#xA;        RebootRequired  : False&#xD;&#xA;        Title           : Security Update for Microsoft Silverlight (KB2512827)&#xD;&#xA;        IsDownloaded    : True&#xD;&#xA;        Description     : This security update to Silverlight includes fixes outlined in KBs 2514842 and 25&#xD;&#xA;                          12827.  This update is backward compatible with web applications built using prev&#xD;&#xA;                          ious versions of Silverlight.&#xD;&#xA;        MaxDownloadSize : 6284664&#xD;&#xA;        SupportURL      : http://go.microsoft.com/fwlink/?LinkID=105787&#xD;&#xA;&#xD;&#xA;        Description&#xD;&#xA;        -----------&#xD;&#xA;        This example shows sample output&#xD;&#xA;    .NOTES&#xD;&#xA;        ScriptName: Get-ComputerUpdateRport&#xD;&#xA;        Created By: Jeff Patton&#xD;&#xA;        Date Coded: August 9, 2011&#xD;&#xA;        ScriptName is used to register events for this script&#xD;&#xA;        LogName is used to determine which classic log to write to&#xD;&#xA;    .LINK&#xD;&#xA;        https://code.google.com/p/mod-posh/wiki/Get-ComputerUpdateReport&#xD;&#xA;    .LINK&#xD;&#xA;        https://code.google.com/p/mod-posh/wiki/ActiveDirectoryManagement&#xD;&#xA;    .LINK&#xD;&#xA;        https://code.google.com/p/mod-posh/wiki/ComputerManagemenet&#xD;&#xA;#&gt;&#xD;&#xA;Param&#xD;&#xA;    (&#xD;&#xA;        [string]$ADSPath&#xD;&#xA;    )&#xD;&#xA;Begin&#xD;&#xA;    {&#xD;&#xA;        $ScriptName = $MyInvocation.MyCommand.ToString()&#xD;&#xA;        $LogName = &quot;Application&quot;&#xD;&#xA;        $ScriptPath = $MyInvocation.MyCommand.Path&#xD;&#xA;        $Username = $env:USERDOMAIN + &quot;\&quot; + $env:USERNAME&#xD;&#xA;&#xD;&#xA;        New-EventLog -Source $ScriptName -LogName $LogName -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;        $Message = &quot;Script: &quot; + $ScriptPath + &quot;`nScript User: &quot; + $Username + &quot;`nStarted: &quot; + (Get-Date).toString()&#xD;&#xA;        Write-EventLog -LogName $LogName -Source $ScriptName -EventID &quot;100&quot; -EntryType &quot;Information&quot; -Message $Message &#xD;&#xA;&#xD;&#xA;        #&#x9;Dotsource in the functions you need.&#xD;&#xA;        . .\includes\ActiveDirectoryManagement.ps1&#xD;&#xA;        . .\includes\ComputerManagement.ps1&#xD;&#xA;        &#xD;&#xA;        $Servers = Get-ADObjects -ADSPath $ADSPath&#xD;&#xA;        $UpdateReport = @()&#xD;&#xA;    }&#xD;&#xA;Process&#xD;&#xA;    {&#xD;&#xA;        foreach ($Server in $Servers)&#xD;&#xA;        {&#xD;&#xA;            Try&#xD;&#xA;            {&#xD;&#xA;                $Updates = Get-PendingUpdates -ComputerName $Server.Properties.name&#xD;&#xA;&#xD;&#xA;                foreach ($Update in $Updates)&#xD;&#xA;                {&#xD;&#xA;                    If ($Update.SupportUrl -eq $null)&#xD;&#xA;                    {&#xD;&#xA;                        $SupportUrl = &quot;N/A&quot;&#xD;&#xA;                        }&#xD;&#xA;                    Else&#xD;&#xA;                    {&#xD;&#xA;                        If ($Update.SupportUrl -like &quot;*support.microsoft.com*&quot;)&#xD;&#xA;                        {&#xD;&#xA;                            If ($Update.SupportUrl.Substring($Update.SupportUrl.Length-9,9) -eq &quot;?LN=en-us&quot;)&#xD;&#xA;                            {&#xD;&#xA;                                $SupportUrl = &quot;$($Update.SupportUrl.Substring(0,$Update.SupportUrl.Length-9))kb/$($Update.KBArticleIDs)?LN=en-us&quot;&#xD;&#xA;                                }&#xD;&#xA;                            Else&#xD;&#xA;                            {&#xD;&#xA;                                If ($Update.SupportUrl.Substring($Update.SupportUrl.Length-1,1) -eq &quot;/&quot;)&#xD;&#xA;                                {&#xD;&#xA;                                    $SupportUrl = &quot;$($Update.SupportUrl)kb/$($Update.KBArticleIDs)&quot;&#xD;&#xA;                                    }&#xD;&#xA;                                Else&#xD;&#xA;                                {&#xD;&#xA;                                    $SupportUrl = &quot;$($Update.SupportUrl)/kb/$($Update.KBArticleIDs)&quot;&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                        Else&#xD;&#xA;                        {&#xD;&#xA;                            $SupportUrl = $Update.SupportUrl&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    $TheseUpdates = New-Object -TypeName PSObject -Property @{&#xD;&#xA;                        ComputerName = &quot;$($Server.Properties.name)&quot;&#xD;&#xA;                        Title = $Update.Title&#xD;&#xA;                        Description = $Update.Description&#xD;&#xA;                        RebootRequired = $Update.RebootRequired&#xD;&#xA;                        IsDownloaded = $Update.IsDownloaded&#xD;&#xA;                        MaxDownloadSize = $Update.MaxDownloadSize&#xD;&#xA;                        SupportURL = $SupportUrl&#xD;&#xA;                        KBArticleIDs = &quot;$($Update.KBArticleIDs)&quot;&#xD;&#xA;                        }&#xD;&#xA;                    $UpdateReport += $TheseUpdates&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            Catch&#xD;&#xA;            {&#xD;&#xA;                }    &#xD;&#xA;            }&#xD;&#xA;    }&#xD;&#xA;End&#xD;&#xA;    {&#xD;&#xA;        $Message = &quot;Script: &quot; + $ScriptPath + &quot;`nScript User: &quot; + $Username + &quot;`nFinished: &quot; + (Get-Date).toString()&#xD;&#xA;        Write-EventLog -LogName $LogName -Source $ScriptName -EventID &quot;100&quot; -EntryType &quot;Information&quot; -Message $Message&#xD;&#xA;&#xD;&#xA;        Return $UpdateReport&#xD;&#xA;    }" />
  <Code Content="&lt;#&#xD;&#xA;    .SYNOPSIS&#xD;&#xA;        Get-ComputerUpdateRport&#xD;&#xA;    .DESCRIPTION&#xD;&#xA;        This script uses two functions to get a list of computers from ActiveDirectory and then query&#xD;&#xA;        each computer for a list of pending updates. It then returns selected fields from that function&#xD;&#xA;        to create the report.&#xD;&#xA;    .PARAMETER ADSPath&#xD;&#xA;        The LDAP URI where your computers are located.&#xD;&#xA;    .EXAMPLE&#xD;&#xA;        .\Get-ComputerUpdateReport -ADSPath &quot;LDAP://DC=company,DC=com&quot; |Export-Csv -Path .\Report.CSV&#xD;&#xA;        &#xD;&#xA;        Description&#xD;&#xA;        -----------&#xD;&#xA;        This example shows sending the output to a .CSV file.&#xD;&#xA;    .EXAMPLE&#xD;&#xA;        .\Get-ComputerUpdateReport -ADSPath &quot;LDAP://DC=company,DC=com&quot;&#xD;&#xA;        &#xD;&#xA;        ComputerName    : scm&#xD;&#xA;        KBArticleIDs    : 2512827&#xD;&#xA;        RebootRequired  : False&#xD;&#xA;        Title           : Security Update for Microsoft Silverlight (KB2512827)&#xD;&#xA;        IsDownloaded    : True&#xD;&#xA;        Description     : This security update to Silverlight includes fixes outlined in KBs 2514842 and 25&#xD;&#xA;                          12827.  This update is backward compatible with web applications built using prev&#xD;&#xA;                          ious versions of Silverlight.&#xD;&#xA;        MaxDownloadSize : 6284664&#xD;&#xA;        SupportURL      : http://go.microsoft.com/fwlink/?LinkID=105787&#xD;&#xA;&#xD;&#xA;        Description&#xD;&#xA;        -----------&#xD;&#xA;        This example shows sample output&#xD;&#xA;    .NOTES&#xD;&#xA;        ScriptName: Get-ComputerUpdateRport&#xD;&#xA;        Created By: Jeff Patton&#xD;&#xA;        Date Coded: August 9, 2011&#xD;&#xA;        ScriptName is used to register events for this script&#xD;&#xA;        LogName is used to determine which classic log to write to&#xD;&#xA;    .LINK&#xD;&#xA;        https://code.google.com/p/mod-posh/wiki/Get-ComputerUpdateReport&#xD;&#xA;    .LINK&#xD;&#xA;        https://code.google.com/p/mod-posh/wiki/ActiveDirectoryManagement&#xD;&#xA;    .LINK&#xD;&#xA;        https://code.google.com/p/mod-posh/wiki/ComputerManagemenet&#xD;&#xA;#&gt;&#xD;&#xA;Param&#xD;&#xA;    (&#xD;&#xA;        [string]$ADSPath&#xD;&#xA;    )&#xD;&#xA;Begin&#xD;&#xA;    {&#xD;&#xA;        $ScriptName = $MyInvocation.MyCommand.ToString()&#xD;&#xA;        $LogName = &quot;Application&quot;&#xD;&#xA;        $ScriptPath = $MyInvocation.MyCommand.Path&#xD;&#xA;        $Username = $env:USERDOMAIN + &quot;\&quot; + $env:USERNAME&#xD;&#xA;&#xD;&#xA;        New-EventLog -Source $ScriptName -LogName $LogName -ErrorAction SilentlyContinue&#xD;&#xA;&#xD;&#xA;        $Message = &quot;Script: &quot; + $ScriptPath + &quot;`nScript User: &quot; + $Username + &quot;`nStarted: &quot; + (Get-Date).toString()&#xD;&#xA;        Write-EventLog -LogName $LogName -Source $ScriptName -EventID &quot;100&quot; -EntryType &quot;Information&quot; -Message $Message &#xD;&#xA;&#xD;&#xA;        #&#x9;Dotsource in the functions you need.&#xD;&#xA;        . .\includes\ActiveDirectoryManagement.ps1&#xD;&#xA;        . .\includes\ComputerManagement.ps1&#xD;&#xA;        &#xD;&#xA;        $Servers = Get-ADObjects -ADSPath $ADSPath&#xD;&#xA;        $UpdateReport = @()&#xD;&#xA;    }&#xD;&#xA;Process&#xD;&#xA;    {&#xD;&#xA;        foreach ($Server in $Servers)&#xD;&#xA;        {&#xD;&#xA;            Try&#xD;&#xA;            {&#xD;&#xA;                $Updates = Get-PendingUpdates -ComputerName $Server.Properties.name&#xD;&#xA;&#xD;&#xA;                foreach ($Update in $Updates)&#xD;&#xA;                {&#xD;&#xA;                    If ($Update.SupportUrl -eq $null)&#xD;&#xA;                    {&#xD;&#xA;                        $SupportUrl = &quot;N/A&quot;&#xD;&#xA;                        }&#xD;&#xA;                    Else&#xD;&#xA;                    {&#xD;&#xA;                        If ($Update.SupportUrl -like &quot;*support.microsoft.com*&quot;)&#xD;&#xA;                        {&#xD;&#xA;                            If ($Update.SupportUrl.Substring($Update.SupportUrl.Length-9,9) -eq &quot;?LN=en-us&quot;)&#xD;&#xA;                            {&#xD;&#xA;                                $SupportUrl = &quot;$($Update.SupportUrl.Substring(0,$Update.SupportUrl.Length-9))kb/$($Update.KBArticleIDs)?LN=en-us&quot;&#xD;&#xA;                                }&#xD;&#xA;                            Else&#xD;&#xA;                            {&#xD;&#xA;                                If ($Update.SupportUrl.Substring($Update.SupportUrl.Length-1,1) -eq &quot;/&quot;)&#xD;&#xA;                                {&#xD;&#xA;                                    $SupportUrl = &quot;$($Update.SupportUrl)kb/$($Update.KBArticleIDs)&quot;&#xD;&#xA;                                    }&#xD;&#xA;                                Else&#xD;&#xA;                                {&#xD;&#xA;                                    $SupportUrl = &quot;$($Update.SupportUrl)/kb/$($Update.KBArticleIDs)&quot;&#xD;&#xA;                                    }&#xD;&#xA;                                }&#xD;&#xA;                            }&#xD;&#xA;&#xD;&#xA;                        Else&#xD;&#xA;                        {&#xD;&#xA;                            $SupportUrl = $Update.SupportUrl&#xD;&#xA;                            }&#xD;&#xA;                        }&#xD;&#xA;                    $TheseUpdates = New-Object -TypeName PSObject -Property @{&#xD;&#xA;                        ComputerName = &quot;$($Server.Properties.name)&quot;&#xD;&#xA;                        Title = $Update.Title&#xD;&#xA;                        Description = $Update.Description&#xD;&#xA;                        RebootRequired = $Update.RebootRequired&#xD;&#xA;                        IsDownloaded = $Update.IsDownloaded&#xD;&#xA;                        MaxDownloadSize = $Update.MaxDownloadSize&#xD;&#xA;                        SupportURL = $SupportUrl&#xD;&#xA;                        KBArticleIDs = &quot;$($Update.KBArticleIDs)&quot;&#xD;&#xA;                        }&#xD;&#xA;                    $UpdateReport += $TheseUpdates&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            Catch&#xD;&#xA;            {&#xD;&#xA;                }    &#xD;&#xA;            }&#xD;&#xA;    }&#xD;&#xA;End&#xD;&#xA;    {&#xD;&#xA;        $Message = &quot;Script: &quot; + $ScriptPath + &quot;`nScript User: &quot; + $Username + &quot;`nFinished: &quot; + (Get-Date).toString()&#xD;&#xA;        Write-EventLog -LogName $LogName -Source $ScriptName -EventID &quot;100&quot; -EntryType &quot;Information&quot; -Message $Message&#xD;&#xA;&#xD;&#xA;        Return $UpdateReport&#xD;&#xA;    }" />
</CodeSnippets>