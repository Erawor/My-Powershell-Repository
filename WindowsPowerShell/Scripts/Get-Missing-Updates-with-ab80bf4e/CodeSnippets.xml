<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="function Get-MissingUpdates {&#xD;&#xA;&#x9;[CmdletBinding()]&#xD;&#xA;&#x9;[OutputType([System.Management.Automation.PSCustomObject])]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory,&#xD;&#xA;&#x9;&#x9;ValueFromPipeline,&#xD;&#xA;&#x9;&#x9;ValueFromPipelineByPropertyName)]&#xD;&#xA;&#x9;&#x9;[string]$ComputerName&#xD;&#xA;&#x9;)&#xD;&#xA;&#x9;begin {&#xD;&#xA;&#x9;&#x9;function Get-32BitProgramFilesPath {&#xD;&#xA;&#x9;&#x9;&#x9;if ((Get-Architecture) -eq 'x64') {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;${ env:ProgramFiles(x86) }&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$env:ProgramFiles&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;function Get-Architecture {&#xD;&#xA;&#x9;&#x9;&#x9;if ([System.Environment]::Is64BitOperatingSystem) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'x64'&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'x86'&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;$Output = @{ }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;process {&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;## Remove any previous reports&#xD;&#xA;&#x9;&#x9;&#x9;Get-ChildItem &quot;$($Env:USERPROFILE)\SecurityScans\*&quot; -Recurse -ea 'SilentlyContinue' | Remove-Item -Force -Recurse&#xD;&#xA;&#x9;&#x9;&#x9;## Run the report to create the output XML&#xD;&#xA;&#x9;&#x9;&#x9;$ExeFilePath = &quot;$(Get-32BitProgramFilesPath)\Microsoft Baseline Security Analyzer 2\mbsacli.exe&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if (!(Test-Path $ExeFilePath)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;throw &quot;$ExeFilePath not found&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&amp; $ExeFilePath /target $ComputerName /wi /nvc /o %C% 2&gt;&amp;1&gt; $null&#xD;&#xA;&#x9;&#x9;&#x9;## Convert the report to XML so I can use it&#xD;&#xA;&#x9;&#x9;&#x9;[xml]$ScanResults = Get-Content &quot;$($Env:USERPROFILE)\SecurityScans\$($Computername.Split('.')[0]).mbsa&quot;&#xD;&#xA;&#xD;&#xA;                        $UpdateSeverityLabels = @{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'0' = 'Other'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'1' = 'Low'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'2' = 'Moderate'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'3' = 'Important'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'4' = 'Critical'&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;$MissingUpdates = $ScanResults.SelectNodes(&quot;//Check[@Name='Windows Security Updates']/Detail/UpdateData[@IsInstalled='false']&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Update in $MissingUpdates) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Ht = @{ }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Properties = $Update | Get-Member -Type Property&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;foreach ($Prop in $Properties) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Value = ($Update | select -expandproperty $Prop.Name)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ($Prop.Name -eq 'Severity') {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$Value = $UpdateSeverityLabels[$Value]&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Ht[$Prop.Name] = $Value&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;[pscustomobject]$Ht&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} catch {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Error &quot;Error: $($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}" />
  <Code Content="function Get-MissingUpdates {&#xD;&#xA;&#x9;[CmdletBinding()]&#xD;&#xA;&#x9;[OutputType([System.Management.Automation.PSCustomObject])]&#xD;&#xA;&#x9;param (&#xD;&#xA;&#x9;&#x9;[Parameter(Mandatory,&#xD;&#xA;&#x9;&#x9;ValueFromPipeline,&#xD;&#xA;&#x9;&#x9;ValueFromPipelineByPropertyName)]&#xD;&#xA;&#x9;&#x9;[string]$ComputerName&#xD;&#xA;&#x9;)&#xD;&#xA;&#x9;begin {&#xD;&#xA;&#x9;&#x9;function Get-32BitProgramFilesPath {&#xD;&#xA;&#x9;&#x9;&#x9;if ((Get-Architecture) -eq 'x64') {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;${ env:ProgramFiles(x86) }&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$env:ProgramFiles&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;function Get-Architecture {&#xD;&#xA;&#x9;&#x9;&#x9;if ([System.Environment]::Is64BitOperatingSystem) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'x64'&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'x86'&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;$Output = @{ }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;process {&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;## Remove any previous reports&#xD;&#xA;&#x9;&#x9;&#x9;Get-ChildItem &quot;$($Env:USERPROFILE)\SecurityScans\*&quot; -Recurse -ea 'SilentlyContinue' | Remove-Item -Force -Recurse&#xD;&#xA;&#x9;&#x9;&#x9;## Run the report to create the output XML&#xD;&#xA;&#x9;&#x9;&#x9;$ExeFilePath = &quot;$(Get-32BitProgramFilesPath)\Microsoft Baseline Security Analyzer 2\mbsacli.exe&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if (!(Test-Path $ExeFilePath)) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;throw &quot;$ExeFilePath not found&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&amp; $ExeFilePath /target $ComputerName /wi /nvc /o %C% 2&gt;&amp;1&gt; $null&#xD;&#xA;&#x9;&#x9;&#x9;## Convert the report to XML so I can use it&#xD;&#xA;&#x9;&#x9;&#x9;[xml]$ScanResults = Get-Content &quot;$($Env:USERPROFILE)\SecurityScans\$($Computername.Split('.')[0]).mbsa&quot;&#xD;&#xA;&#xD;&#xA;                        $UpdateSeverityLabels = @{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'0' = 'Other'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'1' = 'Low'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'2' = 'Moderate'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'3' = 'Important'&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'4' = 'Critical'&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;$MissingUpdates = $ScanResults.SelectNodes(&quot;//Check[@Name='Windows Security Updates']/Detail/UpdateData[@IsInstalled='false']&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Update in $MissingUpdates) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Ht = @{ }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Properties = $Update | Get-Member -Type Property&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;foreach ($Prop in $Properties) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Value = ($Update | select -expandproperty $Prop.Name)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ($Prop.Name -eq 'Severity') {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$Value = $UpdateSeverityLabels[$Value]&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$Ht[$Prop.Name] = $Value&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;[pscustomobject]$Ht&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;} catch {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Error &quot;Error: $($_.Exception.Message) - Line Number: $($_.InvocationInfo.ScriptLineNumber)&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;}" />
</CodeSnippets>