<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="###########################################################&#xD;&#xA;# AUTHOR  : Marius / Hican - http://www.hican.nl - @hicannl &#xD;&#xA;# DATE    : 26-04-2012 &#xD;&#xA;# EDIT    : 07-08-2014&#xD;&#xA;# COMMENT : This script creates new Active Directory users,&#xD;&#xA;#           including different kind of properties, based&#xD;&#xA;#           on an input_create_ad_users.csv.&#xD;&#xA;# VERSION : 1.3&#xD;&#xA;###########################################################&#xD;&#xA;&#xD;&#xA;# CHANGELOG&#xD;&#xA;# Version 1.2: 15-04-2014 - Changed the code for better&#xD;&#xA;# - Added better Error Handling and Reporting.&#xD;&#xA;# - Changed input file with more logical headers.&#xD;&#xA;# - Added functionality for account Enabled,&#xD;&#xA;#   PasswordNeverExpires, ProfilePath, ScriptPath,&#xD;&#xA;#   HomeDirectory and HomeDrive&#xD;&#xA;# - Added the option to move every user to a different OU.&#xD;&#xA;# Version 1.3: 08-07-2014&#xD;&#xA;# - Added functionality for ProxyAddresses&#xD;&#xA;&#xD;&#xA;# ERROR REPORTING ALL&#xD;&#xA;Set-StrictMode -Version latest&#xD;&#xA;&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;# LOAD ASSEMBLIES AND MODULES&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;Try&#xD;&#xA;{&#xD;&#xA;  Import-Module ActiveDirectory -ErrorAction Stop&#xD;&#xA;}&#xD;&#xA;Catch&#xD;&#xA;{&#xD;&#xA;  Write-Host &quot;[ERROR]`t ActiveDirectory Module couldn't be loaded. Script will stop!&quot;&#xD;&#xA;  Exit 1&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;#STATIC VARIABLES&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;$path     = Split-Path -parent $MyInvocation.MyCommand.Definition&#xD;&#xA;$newpath  = $path + &quot;\import_create_ad_users.csv&quot;&#xD;&#xA;$log      = $path + &quot;\create_ad_users.log&quot;&#xD;&#xA;$date     = Get-Date&#xD;&#xA;$addn     = (Get-ADDomain).DistinguishedName&#xD;&#xA;$dnsroot  = (Get-ADDomain).DNSRoot&#xD;&#xA;$i        = 1&#xD;&#xA;&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;#START FUNCTIONS&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;Function Start-Commands&#xD;&#xA;{&#xD;&#xA;  Create-Users&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function Create-Users&#xD;&#xA;{&#xD;&#xA;  &quot;Processing started (on &quot; + $date + &quot;): &quot; | Out-File $log -append&#xD;&#xA;  &quot;--------------------------------------------&quot; | Out-File $log -append&#xD;&#xA;  Import-CSV $newpath | ForEach-Object {&#xD;&#xA;    If (($_.Implement.ToLower()) -eq &quot;yes&quot;)&#xD;&#xA;    {&#xD;&#xA;      If (($_.GivenName -eq &quot;&quot;) -Or ($_.LastName -eq &quot;&quot;) -Or ($_.Initials -eq &quot;&quot;))&#xD;&#xA;      {&#xD;&#xA;        Write-Host &quot;[ERROR]`t Please provide valid GivenName, LastName and Initials. Processing skipped for line $($i)`r`n&quot;&#xD;&#xA;        &quot;[ERROR]`t Please provide valid GivenName, LastName and Initials. Processing skipped for line $($i)`r`n&quot; | Out-File $log -append&#xD;&#xA;      }&#xD;&#xA;      Else&#xD;&#xA;      {&#xD;&#xA;        # Set the target OU&#xD;&#xA;        $location = $_.TargetOU + &quot;,$($addn)&quot;&#xD;&#xA;&#xD;&#xA;        # Set the Enabled and PasswordNeverExpires properties&#xD;&#xA;        If (($_.Enabled.ToLower()) -eq &quot;true&quot;) { $enabled = $True } Else { $enabled = $False }&#xD;&#xA;        If (($_.PasswordNeverExpires.ToLower()) -eq &quot;true&quot;) { $expires = $True } Else { $expires = $False }&#xD;&#xA;&#xD;&#xA;        # A check for the country, because those were full names and need &#xD;&#xA;        # to be land codes in order for AD to accept them. I used Netherlands &#xD;&#xA;        # as example&#xD;&#xA;        If($_.Country -eq &quot;Netherlands&quot;)&#xD;&#xA;        {&#xD;&#xA;          $_.Country = &quot;NL&quot;&#xD;&#xA;        }&#xD;&#xA;        Else&#xD;&#xA;        {&#xD;&#xA;          $_.Country = &quot;EN&quot;&#xD;&#xA;        }&#xD;&#xA;        # Replace dots / points (.) in names, because AD will error when a &#xD;&#xA;        # name ends with a dot (and it looks cleaner as well)&#xD;&#xA;        $replace = $_.Lastname.Replace(&quot;.&quot;,&quot;&quot;)&#xD;&#xA;        If($replace.length -lt 4)&#xD;&#xA;        {&#xD;&#xA;          $lastname = $replace&#xD;&#xA;        }&#xD;&#xA;        Else&#xD;&#xA;        {&#xD;&#xA;          $lastname = $replace.substring(0,4)&#xD;&#xA;        }&#xD;&#xA;        # Create sAMAccountName according to this 'naming convention':&#xD;&#xA;        # &lt;FirstLetterInitials&gt;&lt;FirstFourLettersLastName&gt; for example&#xD;&#xA;        # htehp&#xD;&#xA;        $sam = $_.Initials.substring(0,1).ToLower() + $lastname.ToLower()&#xD;&#xA;        Try   { $exists = Get-ADUser -LDAPFilter &quot;(sAMAccountName=$sam)&quot; }&#xD;&#xA;        Catch { }&#xD;&#xA;        If(!$exists)&#xD;&#xA;        {&#xD;&#xA;          # Set all variables according to the table names in the Excel &#xD;&#xA;          # sheet / import CSV. The names can differ in every project, but &#xD;&#xA;          # if the names change, make sure to change it below as well.&#xD;&#xA;          $setpass = ConvertTo-SecureString -AsPlainText $_.Password -force&#xD;&#xA;&#xD;&#xA;          Try&#xD;&#xA;          {&#xD;&#xA;            Write-Host &quot;[INFO]`t Creating user : $($sam)&quot;&#xD;&#xA;            &quot;[INFO]`t Creating user : $($sam)&quot; | Out-File $log -append&#xD;&#xA;            New-ADUser $sam -GivenName $_.GivenName -Initials $_.Initials `&#xD;&#xA;            -Surname $_.LastName -DisplayName ($_.LastName + &quot;,&quot; + $_.Initials + &quot; &quot; + $_.GivenName) `&#xD;&#xA;            -Office $_.OfficeName -Description $_.Description -EmailAddress $_.Mail `&#xD;&#xA;            -StreetAddress $_.StreetAddress -City $_.City -State $_.State `&#xD;&#xA;            -PostalCode $_.PostalCode -Country $_.Country -UserPrincipalName ($sam + &quot;@&quot; + $dnsroot) `&#xD;&#xA;            -Company $_.Company -Department $_.Department -EmployeeID $_.EmployeeID `&#xD;&#xA;            -Title $_.Title -OfficePhone $_.Phone -AccountPassword $setpass -Manager $_.Manager&#xD;&#xA;&#xD;&#xA;#[SNAP]DOWNLOAD THE SCRIPT FOR THE REST OF THE CODE[/SNAP]&#xD;&#xA;&#xD;&#xA;  }&#xD;&#xA;  &quot;--------------------------------------------&quot; + &quot;`r`n&quot; | Out-File $log -append&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Write-Host &quot;STARTED SCRIPT`r`n&quot;&#xD;&#xA;Start-Commands&#xD;&#xA;Write-Host &quot;STOPPED SCRIPT&quot;" />
  <Code Content="# LINE1 (the table headings in the Excel)&#xD;&#xA; &#xD;&#xA;# Implement,GivenName,LastName,Initials,OfficeName,&#xD;&#xA;# Description,Mail,StreetAddress,City,PostalCode,&#xD;&#xA;# State,Country,Company,Department,EmployeeID,&#xD;&#xA;# ExtensionAttribute1,Title,Phone,Manager,ProfilePath,&#xD;&#xA;# ScriptPath,HomeDirectory,HomeDrive,Password,&#xD;&#xA;# PasswordNeverExpires,Enabled,TargetOU,ProxyAddresses&#xD;&#xA;&#xD;&#xA;# LINE2 (first entry, all other entries look the same. As you can see&#xD;&#xA;# there are also tables which aren't used, but are no problem for&#xD;&#xA;# the script to work!&#xD;&#xA; &#xD;&#xA;# Yes,Hican,TehPwn,H.,Hican Building,Hican Net,&#xD;&#xA;# your@email.com,Hicanstreet 1,Hicancity,1337,&#xD;&#xA;# TheStateOfHican,Netherlands,Hican.nl,*,HIC1337,,&#xD;&#xA;# CEO,+0000000000,Hican,\\profile\path,\\script\path,\\home\\dir,H:,IDDQD_1337#,&#xD;&#xA;# False,True,&quot;OU=Users,OU=Lab&quot;,&quot;SMTP:CHECK;SMTP:CHECK2&quot;" />
  <Code Content="###########################################################&#xD;&#xA;# AUTHOR  : Marius / Hican - http://www.hican.nl - @hicannl &#xD;&#xA;# DATE    : 26-04-2012 &#xD;&#xA;# EDIT    : 07-08-2014&#xD;&#xA;# COMMENT : This script creates new Active Directory users,&#xD;&#xA;#           including different kind of properties, based&#xD;&#xA;#           on an input_create_ad_users.csv.&#xD;&#xA;# VERSION : 1.3&#xD;&#xA;###########################################################&#xD;&#xA;&#xD;&#xA;# CHANGELOG&#xD;&#xA;# Version 1.2: 15-04-2014 - Changed the code for better&#xD;&#xA;# - Added better Error Handling and Reporting.&#xD;&#xA;# - Changed input file with more logical headers.&#xD;&#xA;# - Added functionality for account Enabled,&#xD;&#xA;#   PasswordNeverExpires, ProfilePath, ScriptPath,&#xD;&#xA;#   HomeDirectory and HomeDrive&#xD;&#xA;# - Added the option to move every user to a different OU.&#xD;&#xA;# Version 1.3: 08-07-2014&#xD;&#xA;# - Added functionality for ProxyAddresses&#xD;&#xA;&#xD;&#xA;# ERROR REPORTING ALL&#xD;&#xA;Set-StrictMode -Version latest&#xD;&#xA;&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;# LOAD ASSEMBLIES AND MODULES&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;Try&#xD;&#xA;{&#xD;&#xA;  Import-Module ActiveDirectory -ErrorAction Stop&#xD;&#xA;}&#xD;&#xA;Catch&#xD;&#xA;{&#xD;&#xA;  Write-Host &quot;[ERROR]`t ActiveDirectory Module couldn't be loaded. Script will stop!&quot;&#xD;&#xA;  Exit 1&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;#STATIC VARIABLES&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;$path     = Split-Path -parent $MyInvocation.MyCommand.Definition&#xD;&#xA;$newpath  = $path + &quot;\import_create_ad_users.csv&quot;&#xD;&#xA;$log      = $path + &quot;\create_ad_users.log&quot;&#xD;&#xA;$date     = Get-Date&#xD;&#xA;$addn     = (Get-ADDomain).DistinguishedName&#xD;&#xA;$dnsroot  = (Get-ADDomain).DNSRoot&#xD;&#xA;$i        = 1&#xD;&#xA;&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;#START FUNCTIONS&#xD;&#xA;#----------------------------------------------------------&#xD;&#xA;Function Start-Commands&#xD;&#xA;{&#xD;&#xA;  Create-Users&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Function Create-Users&#xD;&#xA;{&#xD;&#xA;  &quot;Processing started (on &quot; + $date + &quot;): &quot; | Out-File $log -append&#xD;&#xA;  &quot;--------------------------------------------&quot; | Out-File $log -append&#xD;&#xA;  Import-CSV $newpath | ForEach-Object {&#xD;&#xA;    If (($_.Implement.ToLower()) -eq &quot;yes&quot;)&#xD;&#xA;    {&#xD;&#xA;      If (($_.GivenName -eq &quot;&quot;) -Or ($_.LastName -eq &quot;&quot;) -Or ($_.Initials -eq &quot;&quot;))&#xD;&#xA;      {&#xD;&#xA;        Write-Host &quot;[ERROR]`t Please provide valid GivenName, LastName and Initials. Processing skipped for line $($i)`r`n&quot;&#xD;&#xA;        &quot;[ERROR]`t Please provide valid GivenName, LastName and Initials. Processing skipped for line $($i)`r`n&quot; | Out-File $log -append&#xD;&#xA;      }&#xD;&#xA;      Else&#xD;&#xA;      {&#xD;&#xA;        # Set the target OU&#xD;&#xA;        $location = $_.TargetOU + &quot;,$($addn)&quot;&#xD;&#xA;&#xD;&#xA;        # Set the Enabled and PasswordNeverExpires properties&#xD;&#xA;        If (($_.Enabled.ToLower()) -eq &quot;true&quot;) { $enabled = $True } Else { $enabled = $False }&#xD;&#xA;        If (($_.PasswordNeverExpires.ToLower()) -eq &quot;true&quot;) { $expires = $True } Else { $expires = $False }&#xD;&#xA;&#xD;&#xA;        # A check for the country, because those were full names and need &#xD;&#xA;        # to be land codes in order for AD to accept them. I used Netherlands &#xD;&#xA;        # as example&#xD;&#xA;        If($_.Country -eq &quot;Netherlands&quot;)&#xD;&#xA;        {&#xD;&#xA;          $_.Country = &quot;NL&quot;&#xD;&#xA;        }&#xD;&#xA;        Else&#xD;&#xA;        {&#xD;&#xA;          $_.Country = &quot;EN&quot;&#xD;&#xA;        }&#xD;&#xA;        # Replace dots / points (.) in names, because AD will error when a &#xD;&#xA;        # name ends with a dot (and it looks cleaner as well)&#xD;&#xA;        $replace = $_.Lastname.Replace(&quot;.&quot;,&quot;&quot;)&#xD;&#xA;        If($replace.length -lt 4)&#xD;&#xA;        {&#xD;&#xA;          $lastname = $replace&#xD;&#xA;        }&#xD;&#xA;        Else&#xD;&#xA;        {&#xD;&#xA;          $lastname = $replace.substring(0,4)&#xD;&#xA;        }&#xD;&#xA;        # Create sAMAccountName according to this 'naming convention':&#xD;&#xA;        # &lt;FirstLetterInitials&gt;&lt;FirstFourLettersLastName&gt; for example&#xD;&#xA;        # htehp&#xD;&#xA;        $sam = $_.Initials.substring(0,1).ToLower() + $lastname.ToLower()&#xD;&#xA;        Try   { $exists = Get-ADUser -LDAPFilter &quot;(sAMAccountName=$sam)&quot; }&#xD;&#xA;        Catch { }&#xD;&#xA;        If(!$exists)&#xD;&#xA;        {&#xD;&#xA;          # Set all variables according to the table names in the Excel &#xD;&#xA;          # sheet / import CSV. The names can differ in every project, but &#xD;&#xA;          # if the names change, make sure to change it below as well.&#xD;&#xA;          $setpass = ConvertTo-SecureString -AsPlainText $_.Password -force&#xD;&#xA;&#xD;&#xA;          Try&#xD;&#xA;          {&#xD;&#xA;            Write-Host &quot;[INFO]`t Creating user : $($sam)&quot;&#xD;&#xA;            &quot;[INFO]`t Creating user : $($sam)&quot; | Out-File $log -append&#xD;&#xA;            New-ADUser $sam -GivenName $_.GivenName -Initials $_.Initials `&#xD;&#xA;            -Surname $_.LastName -DisplayName ($_.LastName + &quot;,&quot; + $_.Initials + &quot; &quot; + $_.GivenName) `&#xD;&#xA;            -Office $_.OfficeName -Description $_.Description -EmailAddress $_.Mail `&#xD;&#xA;            -StreetAddress $_.StreetAddress -City $_.City -State $_.State `&#xD;&#xA;            -PostalCode $_.PostalCode -Country $_.Country -UserPrincipalName ($sam + &quot;@&quot; + $dnsroot) `&#xD;&#xA;            -Company $_.Company -Department $_.Department -EmployeeID $_.EmployeeID `&#xD;&#xA;            -Title $_.Title -OfficePhone $_.Phone -AccountPassword $setpass -Manager $_.Manager&#xD;&#xA;&#xD;&#xA;#[SNAP]DOWNLOAD THE SCRIPT FOR THE REST OF THE CODE[/SNAP]&#xD;&#xA;&#xD;&#xA;  }&#xD;&#xA;  &quot;--------------------------------------------&quot; + &quot;`r`n&quot; | Out-File $log -append&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;Write-Host &quot;STARTED SCRIPT`r`n&quot;&#xD;&#xA;Start-Commands&#xD;&#xA;Write-Host &quot;STOPPED SCRIPT&quot;" />
  <Code Content="# LINE1 (the table headings in the Excel)&#xD;&#xA; &#xD;&#xA;# Implement,GivenName,LastName,Initials,OfficeName,&#xD;&#xA;# Description,Mail,StreetAddress,City,PostalCode,&#xD;&#xA;# State,Country,Company,Department,EmployeeID,&#xD;&#xA;# ExtensionAttribute1,Title,Phone,Manager,ProfilePath,&#xD;&#xA;# ScriptPath,HomeDirectory,HomeDrive,Password,&#xD;&#xA;# PasswordNeverExpires,Enabled,TargetOU,ProxyAddresses&#xD;&#xA;&#xD;&#xA;# LINE2 (first entry, all other entries look the same. As you can see&#xD;&#xA;# there are also tables which aren't used, but are no problem for&#xD;&#xA;# the script to work!&#xD;&#xA; &#xD;&#xA;# Yes,Hican,TehPwn,H.,Hican Building,Hican Net,&#xD;&#xA;# your@email.com,Hicanstreet 1,Hicancity,1337,&#xD;&#xA;# TheStateOfHican,Netherlands,Hican.nl,*,HIC1337,,&#xD;&#xA;# CEO,+0000000000,Hican,\\profile\path,\\script\path,\\home\\dir,H:,IDDQD_1337#,&#xD;&#xA;# False,True,&quot;OU=Users,OU=Lab&quot;,&quot;SMTP:CHECK;SMTP:CHECK2&quot;" />
</CodeSnippets>