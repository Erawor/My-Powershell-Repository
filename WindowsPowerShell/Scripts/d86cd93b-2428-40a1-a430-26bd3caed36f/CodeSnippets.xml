<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="###########################################################################&quot;&#xD;&#xA;#&#xD;&#xA;# NAME: Invoke-WindowsUpdate.ps1&#xD;&#xA;#&#xD;&#xA;# AUTHOR: Jan Egil Ring&#xD;&#xA;# EMAIL: jan.egil.ring@powershell.no&#xD;&#xA;#&#xD;&#xA;# COMMENT: Script to download and install updates from Windows Update/WSUS. Reporting and rebooting may be customized.&#xD;&#xA;#          For more details, see the following blog-post: &#xD;&#xA;#          http://blog.powershell.no/2010/06/25/manage-windows-update-installations-using-windows-powershell&#xD;&#xA;#&#xD;&#xA;# You have a royalty-free right to use, modify, reproduce, and&#xD;&#xA;# distribute this script file in any way you find useful, provided that&#xD;&#xA;# you agree that the creator, owner above has no warranty, obligations,&#xD;&#xA;# or liability for such use.&#xD;&#xA;#&#xD;&#xA;# VERSION HISTORY:&#xD;&#xA;# 1.0 25.06.2010 - Initial release&#xD;&#xA;#&#xD;&#xA;###########################################################################&quot;&#xD;&#xA;&#xD;&#xA;#Requires -Version 2.0&#xD;&#xA;&#xD;&#xA;#Variables to customize&#xD;&#xA;$EmailReport = $true&#xD;&#xA;$FileReport = $true&#xD;&#xA;$To = &quot;it-reports@domain.com&quot;&#xD;&#xA;$From = &quot;powershell@domain.com&quot;&#xD;&#xA;$SMTPServer = &quot;smtp.domain.local&quot;&#xD;&#xA;$FileReportPath = &quot;\\domain.local\IT\Windows Update Reports\&quot;&#xD;&#xA;$AutoRestart = $true&#xD;&#xA;$AutoRestartIfPending = $true&#xD;&#xA;&#xD;&#xA;$Path = $FileReportPath + &quot;$env:ComputerName&quot; + &quot;_&quot; + (Get-Date -Format dd-MM-yyyy_HH-mm).ToString() + &quot;.html&quot;&#xD;&#xA;&#xD;&#xA;#Testing if there are any pending reboots from earlier Windows Update sessions&#xD;&#xA;if (Test-Path &quot;HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired&quot;){&#xD;&#xA;&#xD;&#xA;#Report to e-mail if enabled&#xD;&#xA;if ($EmailReport -eq $true) {&#xD;&#xA;$pendingboot = @{$false=&quot;was pending for a restart from an earlier Windows Update session. Due to the reboot preferences in the script, a reboot was not initiated.&quot;; $true=&quot;was restarted due to a pending restart from an earlier Windows Update session.&quot;}&#xD;&#xA;$status = $pendingboot[$AutoRestartIfPending]&#xD;&#xA; $messageParameters = @{                        &#xD;&#xA;                Subject = &quot;Windows Update report for $env:ComputerName.$env:USERDNSDOMAIN - $((Get-Date).ToShortDateString())&quot;                        &#xD;&#xA;                Body = &quot;Invoke-WindowsUpdate was run on $env:ComputerName, and the server $status `nPlease run Invoke-WindowsUpdate again when the server is rebooted.&quot;               &#xD;&#xA;                from = $From                        &#xD;&#xA;                To = $To                      &#xD;&#xA;                SmtpServer = $SMTPServer                         &#xD;&#xA;            }                        &#xD;&#xA;            Send-MailMessage @messageParameters -BodyAsHtml&#xD;&#xA;&#xD;&#xA;#Report to file if enabled&#xD;&#xA;if ($FileReport -eq $true) {&#xD;&#xA;&quot;Invoke-WindowsUpdate was run on $env:ComputerName, and the server $status `nPlease run Invoke-WindowsUpdate again when the server is rebooted.&quot; | Out-File -FilePath $path&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#Reboot if autorestart for pending updates is enabled&#xD;&#xA;if ($AutoRestartIfPending) {shutdown.exe /t 0 /r }  }&#xD;&#xA;exit&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#Checking for available updates&#xD;&#xA;$updateSession = new-object -com &quot;Microsoft.Update.Session&quot;&#xD;&#xA;write-progress -Activity &quot;Updating&quot; -Status &quot;Checking available updates&quot;&#xD;&#xA;$criteria=&quot;IsInstalled=0 and Type='Software'&quot; &#xD;&#xA;$updates=$updateSession.CreateupdateSearcher().Search($criteria).Updates&#xD;&#xA;$downloader = $updateSession.CreateUpdateDownloader()          &#xD;&#xA;$downloader.Updates = $Updates&#xD;&#xA;&#xD;&#xA;#If no updates available, do nothing&#xD;&#xA;if ($downloader.Updates.Count -eq &quot;0&quot;) {&#xD;&#xA;&#xD;&#xA;#Report to e-mail if enabled&#xD;&#xA;if ($EmailReport -eq $true) {&#xD;&#xA; $messageParameters = @{                        &#xD;&#xA;                Subject = &quot;Windows Update report for $env:ComputerName.$env:USERDNSDOMAIN - $((Get-Date).ToShortDateString())&quot;                        &#xD;&#xA;                Body = &quot;Invoke-WindowsUpdate was run on $env:ComputerName, but no new updates were found. Please try again later.&quot;               &#xD;&#xA;                from = $From                        &#xD;&#xA;                To = $To                      &#xD;&#xA;                SmtpServer = $SMTPServer                         &#xD;&#xA;            }                        &#xD;&#xA;            Send-MailMessage @messageParameters -BodyAsHtml&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;#Report to file if enabled&#xD;&#xA;if ($FileReport -eq $true) {&#xD;&#xA;&quot;Invoke-WindowsUpdate was run on $env:ComputerName, but no new updates were found. Please try again later.&quot; | Out-File -FilePath $Path&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;else&#xD;&#xA;{&#xD;&#xA;#If updates are available, download and install&#xD;&#xA;write-progress -Activity 'Updating' -Status &quot;Downloading $($downloader.Updates.count) updates&quot;  &#xD;&#xA;&#xD;&#xA;$resultcode= @{0=&quot;Not Started&quot;; 1=&quot;In Progress&quot;; 2=&quot;Succeeded&quot;; 3=&quot;Succeeded With Errors&quot;; 4=&quot;Failed&quot; ; 5=&quot;Aborted&quot; }&#xD;&#xA;$Result= $downloader.Download()&#xD;&#xA;&#xD;&#xA;if (($Result.Hresult -eq 0) –and (($result.resultCode –eq 2) -or ($result.resultCode –eq 3)) ) {&#xD;&#xA;       $updatesToInstall = New-object -com &quot;Microsoft.Update.UpdateColl&quot;&#xD;&#xA;       $Updates | where {$_.isdownloaded} | foreach-Object {$updatesToInstall.Add($_) | out-null &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;$installer = $updateSession.CreateUpdateInstaller()       &#xD;&#xA;$installer.Updates = $updatesToInstall&#xD;&#xA;&#xD;&#xA;write-progress -Activity 'Updating' -Status &quot;Installing $($Installer.Updates.count) updates&quot;        &#xD;&#xA;&#xD;&#xA;$installationResult = $installer.Install()        &#xD;&#xA;$Global:counter=-1       &#xD;&#xA;&#xD;&#xA;$Report = $installer.updates | &#xD;&#xA;&#x9;&#x9;&#x9;&#x9;Select-Object -property Title,EulaAccepted,@{Name='Result';expression={$ResultCode[$installationResult.GetUpdateResult($Global:Counter++).resultCode ] }},@{Name='Reboot required';expression={$installationResult.GetUpdateResult($Global:Counter++).RebootRequired }} |&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ConvertTo-Html&#xD;&#xA;&#xD;&#xA;#Report to e-mail if enabled&#xD;&#xA;if ($EmailReport -eq $true) {&#xD;&#xA; $messageParameters = @{                        &#xD;&#xA;                Subject = &quot;Windows Update report for $env:ComputerName.$env:USERDNSDOMAIN - $((Get-Date).ToShortDateString())&quot;                        &#xD;&#xA;                Body =  $Report | Out-String                 &#xD;&#xA;                from = $From                        &#xD;&#xA;                To = $To                      &#xD;&#xA;                SmtpServer = $SMTPServer                         &#xD;&#xA;            }                        &#xD;&#xA;            Send-MailMessage @messageParameters -BodyAsHtml&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;#Report to file if enabled&#xD;&#xA;if ($FileReport -eq $true) {&#xD;&#xA;$Report | Out-File -FilePath $path&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;#Reboot if autorestart is enabled and one or more updates are requiring a reboot&#xD;&#xA;if ($autoRestart -and $installationResult.rebootRequired) { shutdown.exe /t 0 /r }       &#xD;&#xA;}&#xD;&#xA;}" />
</CodeSnippets>