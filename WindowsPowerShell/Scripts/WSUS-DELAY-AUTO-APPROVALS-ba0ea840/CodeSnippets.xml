<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&lt;#  &#xD;&#xA;.SYNOPSIS  &#xD;&#xA;    DELAY WSUS AUTO APPROVALS&#xD;&#xA;&#xD;&#xA;.DESCRIPTION  &#xD;&#xA;    This script delay approvals for specific target group (OU).&#xD;&#xA;    The delay is customizable.&#xD;&#xA;    You must run this script on your WSUS Server.&#xD;&#xA;.NOTES  &#xD;&#xA;    File Name            : DELAY-WSUS-AUTO-APPROVALS.ps1  &#xD;&#xA;    Author               : Baptiste LEMARIE (FrameIP)&#xD;&#xA;    Copyright 2013       : Veolia Transport&#xD;&#xA;    Version              : 1.3 (2013/03/05) - make optional validation targetgroup&#xD;&#xA;                                            - count delay from Creation Date (if validation target group exists) else from Arrival Date of updates&#xD;&#xA;    History              : 1.2 (2013/02/14) - Fix&#xD;&#xA;    History              : 1.1 (2013/01/29) - Fix&#xD;&#xA;    History              : 1.0 (2013/01/22) - First Version&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# GLOBALS&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# WSUS Part&#xD;&#xA;&#xD;&#xA;# This the delay between arrival date of updates and automatic approvals&#xD;&#xA;$DELAY = [TimeSpan]30d ; &#xD;&#xA;&#xD;&#xA;# Only these categories are concerned&#xD;&#xA;# and &quot;service packs&quot; are hard coded excluded&#xD;&#xA;$WSUS_CategoriesIncluded = @(&quot;Windows server 2008&quot;,  &quot;Windows server 2008 R2&quot;, &quot;Windows 7&quot;); &#xD;&#xA;&#xD;&#xA;# We approve updates on this TargetGroup&#xD;&#xA;$WSUS_TargetGroup_To_Approved = &quot;All Computers&quot;;&#xD;&#xA;&#xD;&#xA;# Optional : Validation TargetGroup&#xD;&#xA;# If you don't have/want a Validation Target Group (with limited computers), set variable to null.&#xD;&#xA;#$WSUS_TargetGroup_Validation = &quot;Validation&quot;;&#xD;&#xA;$WSUS_TargetGroup_Validation = $null;&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# LOG, REPORT and RUN files&#xD;&#xA;&#xD;&#xA;$PATH_DIR = &quot;D:\DELAY-WSUS-AUTO-APPROVALS&quot;;&#xD;&#xA;$FILENAME_LOG = &quot;DELAY-WSUS-AUTO-APPROVALS.log&quot;&#xD;&#xA;$FILENAME_REPORTS = &quot;DELAY-WSUS-AUTO-APPROVALS_&quot; + $(Get-Date -format yyyy-MM-dd_HH\hmm\mss\s)  + &quot;.html&quot;&#xD;&#xA;$TITLE = &quot;DELAY WSUS AUTO APPROVALS&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# FUNCTIONS&#xD;&#xA;&#xD;&#xA;function BuildHTMLTable($report){&#xD;&#xA;    # The content&#xD;&#xA;    if ($report.count -eq 0){&#xD;&#xA;        return &quot;&lt;h3&gt;No updates&lt;/h3&gt;&quot;&#xD;&#xA;    } else {&#xD;&#xA;        # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ) {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=100px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Approved by Validation&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Approved by Validation&quot;) +&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return $rows&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function filterUpdates($updates){&#xD;&#xA;&#xD;&#xA;    $updates_filtered = @()&#xD;&#xA;    $nb_rejected=0&#xD;&#xA;    &#xD;&#xA;    # Get update not approved for no targetgroup&#xD;&#xA;    $updates | foreach {&#xD;&#xA;        if ( $_.IsApproved -eq $False ){&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    # Get update approved only for a specific Targetgroup&#xD;&#xA;    $updates | where { $_.IsApproved -eq $True } | foreach { `&#xD;&#xA;        $mark_tg_approved = $false&#xD;&#xA;        $_.getUpdateApprovals() | foreach {&#xD;&#xA;            if ($_.ComputerTargetGroupId -eq $tg_to_Approve.id ){&#xD;&#xA;                $mark_tg_approved = $true&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if ( $mark_tg_approved ) {&#xD;&#xA;            $nb_rejected++&#xD;&#xA;        } else {&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return ($updates_filtered,$nb_rejected)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# CORE PROGRAM - DON'T TOUCH !!! ... Normally&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# INIT&#xD;&#xA;####&#xD;&#xA;# init trap&#xD;&#xA;$logfile = $PATH_DIR + &quot;\&quot; + $FILENAME_LOG&#xD;&#xA;trap {Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Error - $_&quot;;break}&#xD;&#xA;# get date&#xD;&#xA;$now = Get-Date&#xD;&#xA;# build filename for reports&#xD;&#xA;$report_filename =$PATH_DIR + &quot;\&quot; + $FILENAME_REPORTS&#xD;&#xA;$ErrorActionPreference = &quot;Stop&quot;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Log&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;----------------------------------------------------&quot;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Start&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Load Assembly&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Loading Assembly ... &quot;&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | Out-Null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer()&#xD;&#xA;# GetID of TargetGroup&#xD;&#xA;$tg_to_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_To_Approved }&#xD;&#xA;# $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;    $tg_valid_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_Validation }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Get all updates we want.&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Collect and filter updates ... &quot;&#xD;&#xA;&#xD;&#xA;# building Rexgexp&#xD;&#xA;$regexpCateg=&quot;&quot;; $WSUS_CategoriesIncluded | foreach { $regexpCateg += &quot;^$_$|&quot; }&#xD;&#xA;$regexpCateg = $regexpCateg.substring(0,$regexpCateg.length-1)&#xD;&#xA;$allUpdates=$wsus.getUpdates()&#xD;&#xA;$updates= $allUpdates | Where {$_.ProductTitles -match $regexpCateg `&#xD;&#xA;                       -and $_.UpdateClassificationTitle -notmatch &quot;Service Packs&quot; `&#xD;&#xA;                       -and $_.IsDeclined -eq $False `&#xD;&#xA;                       -and $_.IsSuperseded -eq $False }&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total Updates : $($allUpdates.count)     Useful Updates : $($updates.count)&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Eliminates some updates we collect&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Reject some useless updates ... &quot;&#xD;&#xA;&#xD;&#xA;($updates_filtered,$nb_rejected) = filterUpdates($updates)&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates rejected $nb_rejected (because they are already approved) &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Automatic Approve&#xD;&#xA;# and construct list of each updates&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Approving updates ... &quot;&#xD;&#xA;&#xD;&#xA;# Title, arrivaldate, producttitles, is not superseded, approved by validation, delay OK, action, remark&#xD;&#xA;$report= @()&#xD;&#xA;$nb_approved=0&#xD;&#xA;$updates_filtered | foreach {&#xD;&#xA;    $action=@()&#xD;&#xA;    $desc=@()&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $isValidationApproved = $false&#xD;&#xA;        $isDelayExceeded = $false&#xD;&#xA;        if ( $_.isApproved ){&#xD;&#xA;            $_.getUpdateApprovals() | foreach { &#xD;&#xA;                if ($_.ComputerTargetGroupId -eq $tg_valid_Approve.id ){ &#xD;&#xA;                    $isValidationApproved = $true&#xD;&#xA;                    $delayCount = $_.CreationDate.add($DELAY)&#xD;&#xA;                    $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;                 }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        $delayCount = $_.ArrivalDate.add($DELAY)&#xD;&#xA;        $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;        $isValidationApproved = $true&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ($isValidationApproved -or $WSUS_TargetGroup_Validation -eq $null ){&#xD;&#xA;        if ($isDelayExceeded){&#xD;&#xA;            Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Approve $($_.legacyname) &quot;&#xD;&#xA;            $nb_approved++&#xD;&#xA;            $action=&quot;(Approve !)&quot;&#xD;&#xA;            $desc=&quot;Uncomment action in script&quot;&#xD;&#xA;            ## UNCOMMENT WHEN YOU'RE SURE &#xD;&#xA;            #$action=&quot;Approve !&quot;&#xD;&#xA;            #$desc = &quot;$($($now - $_.ArrivalDate.add($DELAY) ).days) days left&quot;&#xD;&#xA;            #$_.approve(“Install”,$tg_to_Approve)&#xD;&#xA;        } else {         &#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc= &quot;$($($delayCount - $now).days) days remaining&quot;&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;$($tg_valid_Approve.name) must be approved first&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;This case never happen - send comments on script center for this script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    $line = New-Object System.Object&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Name&quot; -value $_.title&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Date of Arrival&quot; -value $_.ArrivalDate.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;)&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Product&quot; -value $_.ProductTitles&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $line | Add-Member -type NoteProperty -name &quot;Approved by Validation&quot; -value $isValidationApproved&#xD;&#xA;    }&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Action&quot; -value $action&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Description&quot; -value $desc&#xD;&#xA;    $report += $line&#xD;&#xA;}&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates approved $nb_approved &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Build report&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Building report ... &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$HTML_head = &quot;&lt;style&gt;&lt;!--mce:0--&gt;&lt;/style&gt;&quot;;&#xD;&#xA;    &#xD;&#xA;$HTML_body = &quot;&lt;H2&gt; $TITLE - Date of reports : $($now.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;))&lt;/H2&gt;`&#xD;&#xA;    &lt;p&gt;Results are filtered and sorted by date&lt;/p&gt;`&#xD;&#xA;    &lt;p&gt;Delay before auto approve of target group &lt;b&gt;$WSUS_TargetGroup_To_Approved&lt;/b&gt; is &lt;b&gt;$($DELAY.days) days&lt;/b&gt;&lt;/p&gt;&quot;&#xD;&#xA;&#xD;&#xA;$report_html = BuildHTMLTable($report)&#xD;&#xA;&#xD;&#xA;$html = &quot;&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;`&#xD;&#xA;    &lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&quot; + `&#xD;&#xA;    &quot;&lt;head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;title&gt;&quot; + $TITLE + &quot;&lt;/title&gt;&quot; + `&#xD;&#xA;    $HTML_style + `&#xD;&#xA;    &quot;&lt;/head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;body&gt;&quot; + `&#xD;&#xA;    $HTML_body + `&#xD;&#xA;    $report_html + `&#xD;&#xA;    &quot;&lt;/body&gt;&quot; + `&#xD;&#xA;    &quot;&lt;/html&gt;&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$html | Set-Content $report_filename&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# End&#xD;&#xA;####&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') End &quot;" />
  <Code Content="&lt;#  &#xD;&#xA;.SYNOPSIS  &#xD;&#xA;    DELAY WSUS AUTO APPROVALS&#xD;&#xA;&#xD;&#xA;.DESCRIPTION  &#xD;&#xA;    This script delay approvals for specific target group (OU).&#xD;&#xA;    The delay is customizable.&#xD;&#xA;    You must run this script on your WSUS Server.&#xD;&#xA;.NOTES  &#xD;&#xA;    File Name            : DELAY-WSUS-AUTO-APPROVALS.ps1  &#xD;&#xA;    Author               : Baptiste LEMARIE (FrameIP)&#xD;&#xA;    Copyright 2013       : Veolia Transport&#xD;&#xA;    Version              : 1.3 (2013/03/05) - make optional validation targetgroup&#xD;&#xA;                                            - count delay from Creation Date (if validation target group exists) else from Arrival Date of updates&#xD;&#xA;    History              : 1.2 (2013/02/14) - Fix&#xD;&#xA;    History              : 1.1 (2013/01/29) - Fix&#xD;&#xA;    History              : 1.0 (2013/01/22) - First Version&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# GLOBALS&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# WSUS Part&#xD;&#xA;&#xD;&#xA;# This the delay between arrival date of updates and automatic approvals&#xD;&#xA;$DELAY = [TimeSpan]30d ; &#xD;&#xA;&#xD;&#xA;# Only these categories are concerned&#xD;&#xA;# and &quot;service packs&quot; are hard coded excluded&#xD;&#xA;$WSUS_CategoriesIncluded = @(&quot;Windows server 2008&quot;,  &quot;Windows server 2008 R2&quot;, &quot;Windows 7&quot;); &#xD;&#xA;&#xD;&#xA;# We approve updates on this TargetGroup&#xD;&#xA;$WSUS_TargetGroup_To_Approved = &quot;All Computers&quot;;&#xD;&#xA;&#xD;&#xA;# Optional : Validation TargetGroup&#xD;&#xA;# If you don't have/want a Validation Target Group (with limited computers), set variable to null.&#xD;&#xA;#$WSUS_TargetGroup_Validation = &quot;Validation&quot;;&#xD;&#xA;$WSUS_TargetGroup_Validation = $null;&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# LOG, REPORT and RUN files&#xD;&#xA;&#xD;&#xA;$PATH_DIR = &quot;D:\DELAY-WSUS-AUTO-APPROVALS&quot;;&#xD;&#xA;$FILENAME_LOG = &quot;DELAY-WSUS-AUTO-APPROVALS.log&quot;&#xD;&#xA;$FILENAME_REPORTS = &quot;DELAY-WSUS-AUTO-APPROVALS_&quot; + $(Get-Date -format yyyy-MM-dd_HH\hmm\mss\s)  + &quot;.html&quot;&#xD;&#xA;$TITLE = &quot;DELAY WSUS AUTO APPROVALS&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# FUNCTIONS&#xD;&#xA;&#xD;&#xA;function BuildHTMLTable($report){&#xD;&#xA;    # The content&#xD;&#xA;    if ($report.count -eq 0){&#xD;&#xA;        return &quot;&lt;h3&gt;No updates&lt;/h3&gt;&quot;&#xD;&#xA;    } else {&#xD;&#xA;        # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ) {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=100px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Approved by Validation&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Approved by Validation&quot;) +&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return $rows&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function filterUpdates($updates){&#xD;&#xA;&#xD;&#xA;    $updates_filtered = @()&#xD;&#xA;    $nb_rejected=0&#xD;&#xA;    &#xD;&#xA;    # Get update not approved for no targetgroup&#xD;&#xA;    $updates | foreach {&#xD;&#xA;        if ( $_.IsApproved -eq $False ){&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    # Get update approved only for a specific Targetgroup&#xD;&#xA;    $updates | where { $_.IsApproved -eq $True } | foreach { `&#xD;&#xA;        $mark_tg_approved = $false&#xD;&#xA;        $_.getUpdateApprovals() | foreach {&#xD;&#xA;            if ($_.ComputerTargetGroupId -eq $tg_to_Approve.id ){&#xD;&#xA;                $mark_tg_approved = $true&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if ( $mark_tg_approved ) {&#xD;&#xA;            $nb_rejected++&#xD;&#xA;        } else {&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return ($updates_filtered,$nb_rejected)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# CORE PROGRAM - DON'T TOUCH !!! ... Normally&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# INIT&#xD;&#xA;####&#xD;&#xA;# init trap&#xD;&#xA;$logfile = $PATH_DIR + &quot;\&quot; + $FILENAME_LOG&#xD;&#xA;trap {Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Error - $_&quot;;break}&#xD;&#xA;# get date&#xD;&#xA;$now = Get-Date&#xD;&#xA;# build filename for reports&#xD;&#xA;$report_filename =$PATH_DIR + &quot;\&quot; + $FILENAME_REPORTS&#xD;&#xA;$ErrorActionPreference = &quot;Stop&quot;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Log&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;----------------------------------------------------&quot;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Start&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Load Assembly&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Loading Assembly ... &quot;&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | Out-Null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer()&#xD;&#xA;# GetID of TargetGroup&#xD;&#xA;$tg_to_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_To_Approved }&#xD;&#xA;# $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;    $tg_valid_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_Validation }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Get all updates we want.&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Collect and filter updates ... &quot;&#xD;&#xA;&#xD;&#xA;# building Rexgexp&#xD;&#xA;$regexpCateg=&quot;&quot;; $WSUS_CategoriesIncluded | foreach { $regexpCateg += &quot;^$_$|&quot; }&#xD;&#xA;$regexpCateg = $regexpCateg.substring(0,$regexpCateg.length-1)&#xD;&#xA;$allUpdates=$wsus.getUpdates()&#xD;&#xA;$updates= $allUpdates | Where {$_.ProductTitles -match $regexpCateg `&#xD;&#xA;                       -and $_.UpdateClassificationTitle -notmatch &quot;Service Packs&quot; `&#xD;&#xA;                       -and $_.IsDeclined -eq $False `&#xD;&#xA;                       -and $_.IsSuperseded -eq $False }&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total Updates : $($allUpdates.count)     Useful Updates : $($updates.count)&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Eliminates some updates we collect&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Reject some useless updates ... &quot;&#xD;&#xA;&#xD;&#xA;($updates_filtered,$nb_rejected) = filterUpdates($updates)&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates rejected $nb_rejected (because they are already approved) &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Automatic Approve&#xD;&#xA;# and construct list of each updates&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Approving updates ... &quot;&#xD;&#xA;&#xD;&#xA;# Title, arrivaldate, producttitles, is not superseded, approved by validation, delay OK, action, remark&#xD;&#xA;$report= @()&#xD;&#xA;$nb_approved=0&#xD;&#xA;$updates_filtered | foreach {&#xD;&#xA;    $action=@()&#xD;&#xA;    $desc=@()&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $isValidationApproved = $false&#xD;&#xA;        $isDelayExceeded = $false&#xD;&#xA;        if ( $_.isApproved ){&#xD;&#xA;            $_.getUpdateApprovals() | foreach { &#xD;&#xA;                if ($_.ComputerTargetGroupId -eq $tg_valid_Approve.id ){ &#xD;&#xA;                    $isValidationApproved = $true&#xD;&#xA;                    $delayCount = $_.CreationDate.add($DELAY)&#xD;&#xA;                    $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;                 }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        $delayCount = $_.ArrivalDate.add($DELAY)&#xD;&#xA;        $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;        $isValidationApproved = $true&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ($isValidationApproved -or $WSUS_TargetGroup_Validation -eq $null ){&#xD;&#xA;        if ($isDelayExceeded){&#xD;&#xA;            Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Approve $($_.legacyname) &quot;&#xD;&#xA;            $nb_approved++&#xD;&#xA;            $action=&quot;(Approve !)&quot;&#xD;&#xA;            $desc=&quot;Uncomment action in script&quot;&#xD;&#xA;            ## UNCOMMENT WHEN YOU'RE SURE &#xD;&#xA;            #$action=&quot;Approve !&quot;&#xD;&#xA;            #$desc = &quot;$($($now - $_.ArrivalDate.add($DELAY) ).days) days left&quot;&#xD;&#xA;            #$_.approve(“Install”,$tg_to_Approve)&#xD;&#xA;        } else {         &#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc= &quot;$($($delayCount - $now).days) days remaining&quot;&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;$($tg_valid_Approve.name) must be approved first&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;This case never happen - send comments on script center for this script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    $line = New-Object System.Object&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Name&quot; -value $_.title&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Date of Arrival&quot; -value $_.ArrivalDate.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;)&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Product&quot; -value $_.ProductTitles&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $line | Add-Member -type NoteProperty -name &quot;Approved by Validation&quot; -value $isValidationApproved&#xD;&#xA;    }&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Action&quot; -value $action&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Description&quot; -value $desc&#xD;&#xA;    $report += $line&#xD;&#xA;}&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates approved $nb_approved &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Build report&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Building report ... &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$HTML_head = &quot;&lt;style&gt;&lt;!--mce:0--&gt;&lt;/style&gt;&quot;;&#xD;&#xA;    &#xD;&#xA;$HTML_body = &quot;&lt;H2&gt; $TITLE - Date of reports : $($now.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;))&lt;/H2&gt;`&#xD;&#xA;    &lt;p&gt;Results are filtered and sorted by date&lt;/p&gt;`&#xD;&#xA;    &lt;p&gt;Delay before auto approve of target group &lt;b&gt;$WSUS_TargetGroup_To_Approved&lt;/b&gt; is &lt;b&gt;$($DELAY.days) days&lt;/b&gt;&lt;/p&gt;&quot;&#xD;&#xA;&#xD;&#xA;$report_html = BuildHTMLTable($report)&#xD;&#xA;&#xD;&#xA;$html = &quot;&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;`&#xD;&#xA;    &lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&quot; + `&#xD;&#xA;    &quot;&lt;head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;title&gt;&quot; + $TITLE + &quot;&lt;/title&gt;&quot; + `&#xD;&#xA;    $HTML_style + `&#xD;&#xA;    &quot;&lt;/head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;body&gt;&quot; + `&#xD;&#xA;    $HTML_body + `&#xD;&#xA;    $report_html + `&#xD;&#xA;    &quot;&lt;/body&gt;&quot; + `&#xD;&#xA;    &quot;&lt;/html&gt;&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$html | Set-Content $report_filename&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# End&#xD;&#xA;####&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') End &quot;" />
  <Code Content="&lt;#  &#xD;&#xA;.SYNOPSIS  &#xD;&#xA;    DELAY WSUS AUTO APPROVALS&#xD;&#xA;&#xD;&#xA;.DESCRIPTION  &#xD;&#xA;    This script delay approvals for specific target group (OU).&#xD;&#xA;    The delay is customizable.&#xD;&#xA;    You must run this script on your WSUS Server.&#xD;&#xA;.NOTES  &#xD;&#xA;    File Name            : DELAY-WSUS-AUTO-APPROVALS.ps1  &#xD;&#xA;    Author               : Baptiste LEMARIE (FrameIP)&#xD;&#xA;    Copyright 2013       : Veolia Transport&#xD;&#xA;    Version              : 1.3 (2013/03/05) - make optional validation targetgroup&#xD;&#xA;                                            - count delay from Creation Date (if validation target group exists) else from Arrival Date of updates&#xD;&#xA;    History              : 1.2 (2013/02/14) - Fix&#xD;&#xA;    History              : 1.1 (2013/01/29) - Fix&#xD;&#xA;    History              : 1.0 (2013/01/22) - First Version&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# GLOBALS&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# WSUS Part&#xD;&#xA;&#xD;&#xA;# This the delay between arrival date of updates and automatic approvals&#xD;&#xA;$DELAY = [TimeSpan]30d ; &#xD;&#xA;&#xD;&#xA;# Only these categories are concerned&#xD;&#xA;# and &quot;service packs&quot; are hard coded excluded&#xD;&#xA;$WSUS_CategoriesIncluded = @(&quot;Windows server 2008&quot;,  &quot;Windows server 2008 R2&quot;, &quot;Windows 7&quot;); &#xD;&#xA;&#xD;&#xA;# We approve updates on this TargetGroup&#xD;&#xA;$WSUS_TargetGroup_To_Approved = &quot;All Computers&quot;;&#xD;&#xA;&#xD;&#xA;# Optional : Validation TargetGroup&#xD;&#xA;# If you don't have/want a Validation Target Group (with limited computers), set variable to null.&#xD;&#xA;#$WSUS_TargetGroup_Validation = &quot;Validation&quot;;&#xD;&#xA;$WSUS_TargetGroup_Validation = $null;&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# LOG, REPORT and RUN files&#xD;&#xA;&#xD;&#xA;$PATH_DIR = &quot;D:\DELAY-WSUS-AUTO-APPROVALS&quot;;&#xD;&#xA;$FILENAME_LOG = &quot;DELAY-WSUS-AUTO-APPROVALS.log&quot;&#xD;&#xA;$FILENAME_REPORTS = &quot;DELAY-WSUS-AUTO-APPROVALS_&quot; + $(Get-Date -format yyyy-MM-dd_HH\hmm\mss\s)  + &quot;.html&quot;&#xD;&#xA;$TITLE = &quot;DELAY WSUS AUTO APPROVALS&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# FUNCTIONS&#xD;&#xA;&#xD;&#xA;function BuildHTMLTable($report){&#xD;&#xA;    # The content&#xD;&#xA;    if ($report.count -eq 0){&#xD;&#xA;        return &quot;&lt;h3&gt;No updates&lt;/h3&gt;&quot;&#xD;&#xA;    } else {&#xD;&#xA;        # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ) {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=100px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Approved by Validation&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Approved by Validation&quot;) +&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return $rows&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function filterUpdates($updates){&#xD;&#xA;&#xD;&#xA;    $updates_filtered = @()&#xD;&#xA;    $nb_rejected=0&#xD;&#xA;    &#xD;&#xA;    # Get update not approved for no targetgroup&#xD;&#xA;    $updates | foreach {&#xD;&#xA;        if ( $_.IsApproved -eq $False ){&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    # Get update approved only for a specific Targetgroup&#xD;&#xA;    $updates | where { $_.IsApproved -eq $True } | foreach { `&#xD;&#xA;        $mark_tg_approved = $false&#xD;&#xA;        $_.getUpdateApprovals() | foreach {&#xD;&#xA;            if ($_.ComputerTargetGroupId -eq $tg_to_Approve.id ){&#xD;&#xA;                $mark_tg_approved = $true&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if ( $mark_tg_approved ) {&#xD;&#xA;            $nb_rejected++&#xD;&#xA;        } else {&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return ($updates_filtered,$nb_rejected)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# CORE PROGRAM - DON'T TOUCH !!! ... Normally&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# INIT&#xD;&#xA;####&#xD;&#xA;# init trap&#xD;&#xA;$logfile = $PATH_DIR + &quot;\&quot; + $FILENAME_LOG&#xD;&#xA;trap {Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Error - $_&quot;;break}&#xD;&#xA;# get date&#xD;&#xA;$now = Get-Date&#xD;&#xA;# build filename for reports&#xD;&#xA;$report_filename =$PATH_DIR + &quot;\&quot; + $FILENAME_REPORTS&#xD;&#xA;$ErrorActionPreference = &quot;Stop&quot;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Log&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;----------------------------------------------------&quot;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Start&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Load Assembly&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Loading Assembly ... &quot;&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | Out-Null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer()&#xD;&#xA;# GetID of TargetGroup&#xD;&#xA;$tg_to_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_To_Approved }&#xD;&#xA;# $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;    $tg_valid_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_Validation }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Get all updates we want.&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Collect and filter updates ... &quot;&#xD;&#xA;&#xD;&#xA;# building Rexgexp&#xD;&#xA;$regexpCateg=&quot;&quot;; $WSUS_CategoriesIncluded | foreach { $regexpCateg += &quot;^$_$|&quot; }&#xD;&#xA;$regexpCateg = $regexpCateg.substring(0,$regexpCateg.length-1)&#xD;&#xA;$allUpdates=$wsus.getUpdates()&#xD;&#xA;$updates= $allUpdates | Where {$_.ProductTitles -match $regexpCateg `&#xD;&#xA;                       -and $_.UpdateClassificationTitle -notmatch &quot;Service Packs&quot; `&#xD;&#xA;                       -and $_.IsDeclined -eq $False `&#xD;&#xA;                       -and $_.IsSuperseded -eq $False }&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total Updates : $($allUpdates.count)     Useful Updates : $($updates.count)&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Eliminates some updates we collect&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Reject some useless updates ... &quot;&#xD;&#xA;&#xD;&#xA;($updates_filtered,$nb_rejected) = filterUpdates($updates)&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates rejected $nb_rejected (because they are already approved) &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Automatic Approve&#xD;&#xA;# and construct list of each updates&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Approving updates ... &quot;&#xD;&#xA;&#xD;&#xA;# Title, arrivaldate, producttitles, is not superseded, approved by validation, delay OK, action, remark&#xD;&#xA;$report= @()&#xD;&#xA;$nb_approved=0&#xD;&#xA;$updates_filtered | foreach {&#xD;&#xA;    $action=@()&#xD;&#xA;    $desc=@()&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $isValidationApproved = $false&#xD;&#xA;        $isDelayExceeded = $false&#xD;&#xA;        if ( $_.isApproved ){&#xD;&#xA;            $_.getUpdateApprovals() | foreach { &#xD;&#xA;                if ($_.ComputerTargetGroupId -eq $tg_valid_Approve.id ){ &#xD;&#xA;                    $isValidationApproved = $true&#xD;&#xA;                    $delayCount = $_.CreationDate.add($DELAY)&#xD;&#xA;                    $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;                 }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        $delayCount = $_.ArrivalDate.add($DELAY)&#xD;&#xA;        $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;        $isValidationApproved = $true&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ($isValidationApproved -or $WSUS_TargetGroup_Validation -eq $null ){&#xD;&#xA;        if ($isDelayExceeded){&#xD;&#xA;            Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Approve $($_.legacyname) &quot;&#xD;&#xA;            $nb_approved++&#xD;&#xA;            $action=&quot;(Approve !)&quot;&#xD;&#xA;            $desc=&quot;Uncomment action in script&quot;&#xD;&#xA;            ## UNCOMMENT WHEN YOU'RE SURE &#xD;&#xA;            #$action=&quot;Approve !&quot;&#xD;&#xA;            #$desc = &quot;$($($now - $_.ArrivalDate.add($DELAY) ).days) days left&quot;&#xD;&#xA;            #$_.approve(“Install”,$tg_to_Approve)&#xD;&#xA;        } else {         &#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc= &quot;$($($delayCount - $now).days) days remaining&quot;&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;$($tg_valid_Approve.name) must be approved first&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;This case never happen - send comments on script center for this script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    $line = New-Object System.Object&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Name&quot; -value $_.title&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Date of Arrival&quot; -value $_.ArrivalDate.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;)&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Product&quot; -value $_.ProductTitles&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $line | Add-Member -type NoteProperty -name &quot;Approved by Validation&quot; -value $isValidationApproved&#xD;&#xA;    }&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Action&quot; -value $action&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Description&quot; -value $desc&#xD;&#xA;    $report += $line&#xD;&#xA;}&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates approved $nb_approved &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Build report&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Building report ... &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$HTML_head = &quot;&lt;style&gt;&lt;!--mce:0--&gt;&lt;/style&gt;&quot;;&#xD;&#xA;    &#xD;&#xA;$HTML_body = &quot;&lt;H2&gt; $TITLE - Date of reports : $($now.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;))&lt;/H2&gt;`&#xD;&#xA;    &lt;p&gt;Results are filtered and sorted by date&lt;/p&gt;`&#xD;&#xA;    &lt;p&gt;Delay before auto approve of target group &lt;b&gt;$WSUS_TargetGroup_To_Approved&lt;/b&gt; is &lt;b&gt;$($DELAY.days) days&lt;/b&gt;&lt;/p&gt;&quot;&#xD;&#xA;&#xD;&#xA;$report_html = BuildHTMLTable($report)&#xD;&#xA;&#xD;&#xA;$html = &quot;&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;`&#xD;&#xA;    &lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&quot; + `&#xD;&#xA;    &quot;&lt;head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;title&gt;&quot; + $TITLE + &quot;&lt;/title&gt;&quot; + `&#xD;&#xA;    $HTML_style + `&#xD;&#xA;    &quot;&lt;/head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;body&gt;&quot; + `&#xD;&#xA;    $HTML_body + `&#xD;&#xA;    $report_html + `&#xD;&#xA;    &quot;&lt;/body&gt;&quot; + `&#xD;&#xA;    &quot;&lt;/html&gt;&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$html | Set-Content $report_filename&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# End&#xD;&#xA;####&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') End &quot;" />
  <Code Content="&lt;#  &#xD;&#xA;.SYNOPSIS  &#xD;&#xA;    DELAY WSUS AUTO APPROVALS&#xD;&#xA;&#xD;&#xA;.DESCRIPTION  &#xD;&#xA;    This script delay approvals for specific target group (OU).&#xD;&#xA;    The delay is customizable.&#xD;&#xA;    You must run this script on your WSUS Server.&#xD;&#xA;.NOTES  &#xD;&#xA;    File Name            : DELAY-WSUS-AUTO-APPROVALS.ps1  &#xD;&#xA;    Author               : Baptiste LEMARIE (FrameIP)&#xD;&#xA;    Copyright 2013       : Veolia Transport&#xD;&#xA;    Version              : 1.3 (2013/03/05) - make optional validation targetgroup&#xD;&#xA;                                            - count delay from Creation Date (if validation target group exists) else from Arrival Date of updates&#xD;&#xA;    History              : 1.2 (2013/02/14) - Fix&#xD;&#xA;    History              : 1.1 (2013/01/29) - Fix&#xD;&#xA;    History              : 1.0 (2013/01/22) - First Version&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# GLOBALS&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# WSUS Part&#xD;&#xA;&#xD;&#xA;# This the delay between arrival date of updates and automatic approvals&#xD;&#xA;$DELAY = [TimeSpan]30d ; &#xD;&#xA;&#xD;&#xA;# Only these categories are concerned&#xD;&#xA;# and &quot;service packs&quot; are hard coded excluded&#xD;&#xA;$WSUS_CategoriesIncluded = @(&quot;Windows server 2008&quot;,  &quot;Windows server 2008 R2&quot;, &quot;Windows 7&quot;); &#xD;&#xA;&#xD;&#xA;# We approve updates on this TargetGroup&#xD;&#xA;$WSUS_TargetGroup_To_Approved = &quot;All Computers&quot;;&#xD;&#xA;&#xD;&#xA;# Optional : Validation TargetGroup&#xD;&#xA;# If you don't have/want a Validation Target Group (with limited computers), set variable to null.&#xD;&#xA;#$WSUS_TargetGroup_Validation = &quot;Validation&quot;;&#xD;&#xA;$WSUS_TargetGroup_Validation = $null;&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# LOG, REPORT and RUN files&#xD;&#xA;&#xD;&#xA;$PATH_DIR = &quot;D:\DELAY-WSUS-AUTO-APPROVALS&quot;;&#xD;&#xA;$FILENAME_LOG = &quot;DELAY-WSUS-AUTO-APPROVALS.log&quot;&#xD;&#xA;$FILENAME_REPORTS = &quot;DELAY-WSUS-AUTO-APPROVALS_&quot; + $(Get-Date -format yyyy-MM-dd_HH\hmm\mss\s)  + &quot;.html&quot;&#xD;&#xA;$TITLE = &quot;DELAY WSUS AUTO APPROVALS&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# FUNCTIONS&#xD;&#xA;&#xD;&#xA;function BuildHTMLTable($report){&#xD;&#xA;    # The content&#xD;&#xA;    if ($report.count -eq 0){&#xD;&#xA;        return &quot;&lt;h3&gt;No updates&lt;/h3&gt;&quot;&#xD;&#xA;    } else {&#xD;&#xA;        # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ) {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=100px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Approved by Validation&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Approved by Validation&quot;) +&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return $rows&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function filterUpdates($updates){&#xD;&#xA;&#xD;&#xA;    $updates_filtered = @()&#xD;&#xA;    $nb_rejected=0&#xD;&#xA;    &#xD;&#xA;    # Get update not approved for no targetgroup&#xD;&#xA;    $updates | foreach {&#xD;&#xA;        if ( $_.IsApproved -eq $False ){&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    # Get update approved only for a specific Targetgroup&#xD;&#xA;    $updates | where { $_.IsApproved -eq $True } | foreach { `&#xD;&#xA;        $mark_tg_approved = $false&#xD;&#xA;        $_.getUpdateApprovals() | foreach {&#xD;&#xA;            if ($_.ComputerTargetGroupId -eq $tg_to_Approve.id ){&#xD;&#xA;                $mark_tg_approved = $true&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if ( $mark_tg_approved ) {&#xD;&#xA;            $nb_rejected++&#xD;&#xA;        } else {&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return ($updates_filtered,$nb_rejected)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# CORE PROGRAM - DON'T TOUCH !!! ... Normally&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# INIT&#xD;&#xA;####&#xD;&#xA;# init trap&#xD;&#xA;$logfile = $PATH_DIR + &quot;\&quot; + $FILENAME_LOG&#xD;&#xA;trap {Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Error - $_&quot;;break}&#xD;&#xA;# get date&#xD;&#xA;$now = Get-Date&#xD;&#xA;# build filename for reports&#xD;&#xA;$report_filename =$PATH_DIR + &quot;\&quot; + $FILENAME_REPORTS&#xD;&#xA;$ErrorActionPreference = &quot;Stop&quot;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Log&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;----------------------------------------------------&quot;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Start&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Load Assembly&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Loading Assembly ... &quot;&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | Out-Null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer()&#xD;&#xA;# GetID of TargetGroup&#xD;&#xA;$tg_to_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_To_Approved }&#xD;&#xA;# $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;    $tg_valid_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_Validation }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Get all updates we want.&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Collect and filter updates ... &quot;&#xD;&#xA;&#xD;&#xA;# building Rexgexp&#xD;&#xA;$regexpCateg=&quot;&quot;; $WSUS_CategoriesIncluded | foreach { $regexpCateg += &quot;^$_$|&quot; }&#xD;&#xA;$regexpCateg = $regexpCateg.substring(0,$regexpCateg.length-1)&#xD;&#xA;$allUpdates=$wsus.getUpdates()&#xD;&#xA;$updates= $allUpdates | Where {$_.ProductTitles -match $regexpCateg `&#xD;&#xA;                       -and $_.UpdateClassificationTitle -notmatch &quot;Service Packs&quot; `&#xD;&#xA;                       -and $_.IsDeclined -eq $False `&#xD;&#xA;                       -and $_.IsSuperseded -eq $False }&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total Updates : $($allUpdates.count)     Useful Updates : $($updates.count)&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Eliminates some updates we collect&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Reject some useless updates ... &quot;&#xD;&#xA;&#xD;&#xA;($updates_filtered,$nb_rejected) = filterUpdates($updates)&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates rejected $nb_rejected (because they are already approved) &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Automatic Approve&#xD;&#xA;# and construct list of each updates&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Approving updates ... &quot;&#xD;&#xA;&#xD;&#xA;# Title, arrivaldate, producttitles, is not superseded, approved by validation, delay OK, action, remark&#xD;&#xA;$report= @()&#xD;&#xA;$nb_approved=0&#xD;&#xA;$updates_filtered | foreach {&#xD;&#xA;    $action=@()&#xD;&#xA;    $desc=@()&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $isValidationApproved = $false&#xD;&#xA;        $isDelayExceeded = $false&#xD;&#xA;        if ( $_.isApproved ){&#xD;&#xA;            $_.getUpdateApprovals() | foreach { &#xD;&#xA;                if ($_.ComputerTargetGroupId -eq $tg_valid_Approve.id ){ &#xD;&#xA;                    $isValidationApproved = $true&#xD;&#xA;                    $delayCount = $_.CreationDate.add($DELAY)&#xD;&#xA;                    $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;                 }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        $delayCount = $_.ArrivalDate.add($DELAY)&#xD;&#xA;        $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;        $isValidationApproved = $true&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ($isValidationApproved -or $WSUS_TargetGroup_Validation -eq $null ){&#xD;&#xA;        if ($isDelayExceeded){&#xD;&#xA;            Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Approve $($_.legacyname) &quot;&#xD;&#xA;            $nb_approved++&#xD;&#xA;            $action=&quot;(Approve !)&quot;&#xD;&#xA;            $desc=&quot;Uncomment action in script&quot;&#xD;&#xA;            ## UNCOMMENT WHEN YOU'RE SURE &#xD;&#xA;            #$action=&quot;Approve !&quot;&#xD;&#xA;            #$desc = &quot;$($($now - $_.ArrivalDate.add($DELAY) ).days) days left&quot;&#xD;&#xA;            #$_.approve(“Install”,$tg_to_Approve)&#xD;&#xA;        } else {         &#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc= &quot;$($($delayCount - $now).days) days remaining&quot;&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;$($tg_valid_Approve.name) must be approved first&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;This case never happen - send comments on script center for this script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    $line = New-Object System.Object&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Name&quot; -value $_.title&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Date of Arrival&quot; -value $_.ArrivalDate.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;)&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Product&quot; -value $_.ProductTitles&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $line | Add-Member -type NoteProperty -name &quot;Approved by Validation&quot; -value $isValidationApproved&#xD;&#xA;    }&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Action&quot; -value $action&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Description&quot; -value $desc&#xD;&#xA;    $report += $line&#xD;&#xA;}&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates approved $nb_approved &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Build report&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Building report ... &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$HTML_head = &quot;&lt;style&gt;&lt;!--mce:0--&gt;&lt;/style&gt;&quot;;&#xD;&#xA;    &#xD;&#xA;$HTML_body = &quot;&lt;H2&gt; $TITLE - Date of reports : $($now.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;))&lt;/H2&gt;`&#xD;&#xA;    &lt;p&gt;Results are filtered and sorted by date&lt;/p&gt;`&#xD;&#xA;    &lt;p&gt;Delay before auto approve of target group &lt;b&gt;$WSUS_TargetGroup_To_Approved&lt;/b&gt; is &lt;b&gt;$($DELAY.days) days&lt;/b&gt;&lt;/p&gt;&quot;&#xD;&#xA;&#xD;&#xA;$report_html = BuildHTMLTable($report)&#xD;&#xA;&#xD;&#xA;$html = &quot;&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;`&#xD;&#xA;    &lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&quot; + `&#xD;&#xA;    &quot;&lt;head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;title&gt;&quot; + $TITLE + &quot;&lt;/title&gt;&quot; + `&#xD;&#xA;    $HTML_style + `&#xD;&#xA;    &quot;&lt;/head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;body&gt;&quot; + `&#xD;&#xA;    $HTML_body + `&#xD;&#xA;    $report_html + `&#xD;&#xA;    &quot;&lt;/body&gt;&quot; + `&#xD;&#xA;    &quot;&lt;/html&gt;&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$html | Set-Content $report_filename&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# End&#xD;&#xA;####&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') End &quot;" />
  <Code Content="&lt;#  &#xD;&#xA;.SYNOPSIS  &#xD;&#xA;    DELAY WSUS AUTO APPROVALS&#xD;&#xA;&#xD;&#xA;.DESCRIPTION  &#xD;&#xA;    This script delay approvals for specific target group (OU).&#xD;&#xA;    The delay is customizable.&#xD;&#xA;    You must run this script on your WSUS Server.&#xD;&#xA;.NOTES  &#xD;&#xA;    File Name            : DELAY-WSUS-AUTO-APPROVALS.ps1  &#xD;&#xA;    Author               : Baptiste LEMARIE (FrameIP)&#xD;&#xA;    Copyright 2013       : Veolia Transport&#xD;&#xA;    Version              : 1.3 (2013/03/05) - make optional validation targetgroup&#xD;&#xA;                                            - count delay from Creation Date (if validation target group exists) else from Arrival Date of updates&#xD;&#xA;    History              : 1.2 (2013/02/14) - Fix&#xD;&#xA;    History              : 1.1 (2013/01/29) - Fix&#xD;&#xA;    History              : 1.0 (2013/01/22) - First Version&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# GLOBALS&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# WSUS Part&#xD;&#xA;&#xD;&#xA;# This the delay between arrival date of updates and automatic approvals&#xD;&#xA;$DELAY = [TimeSpan]30d ; &#xD;&#xA;&#xD;&#xA;# Only these categories are concerned&#xD;&#xA;# and &quot;service packs&quot; are hard coded excluded&#xD;&#xA;$WSUS_CategoriesIncluded = @(&quot;Windows server 2008&quot;,  &quot;Windows server 2008 R2&quot;, &quot;Windows 7&quot;); &#xD;&#xA;&#xD;&#xA;# We approve updates on this TargetGroup&#xD;&#xA;$WSUS_TargetGroup_To_Approved = &quot;All Computers&quot;;&#xD;&#xA;&#xD;&#xA;# Optional : Validation TargetGroup&#xD;&#xA;# If you don't have/want a Validation Target Group (with limited computers), set variable to null.&#xD;&#xA;#$WSUS_TargetGroup_Validation = &quot;Validation&quot;;&#xD;&#xA;$WSUS_TargetGroup_Validation = $null;&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# LOG, REPORT and RUN files&#xD;&#xA;&#xD;&#xA;$PATH_DIR = &quot;D:\DELAY-WSUS-AUTO-APPROVALS&quot;;&#xD;&#xA;$FILENAME_LOG = &quot;DELAY-WSUS-AUTO-APPROVALS.log&quot;&#xD;&#xA;$FILENAME_REPORTS = &quot;DELAY-WSUS-AUTO-APPROVALS_&quot; + $(Get-Date -format yyyy-MM-dd_HH\hmm\mss\s)  + &quot;.html&quot;&#xD;&#xA;$TITLE = &quot;DELAY WSUS AUTO APPROVALS&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# FUNCTIONS&#xD;&#xA;&#xD;&#xA;function BuildHTMLTable($report){&#xD;&#xA;    # The content&#xD;&#xA;    if ($report.count -eq 0){&#xD;&#xA;        return &quot;&lt;h3&gt;No updates&lt;/h3&gt;&quot;&#xD;&#xA;    } else {&#xD;&#xA;        # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ) {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=100px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Approved by Validation&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Approved by Validation&quot;) +&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return $rows&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function filterUpdates($updates){&#xD;&#xA;&#xD;&#xA;    $updates_filtered = @()&#xD;&#xA;    $nb_rejected=0&#xD;&#xA;    &#xD;&#xA;    # Get update not approved for no targetgroup&#xD;&#xA;    $updates | foreach {&#xD;&#xA;        if ( $_.IsApproved -eq $False ){&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    # Get update approved only for a specific Targetgroup&#xD;&#xA;    $updates | where { $_.IsApproved -eq $True } | foreach { `&#xD;&#xA;        $mark_tg_approved = $false&#xD;&#xA;        $_.getUpdateApprovals() | foreach {&#xD;&#xA;            if ($_.ComputerTargetGroupId -eq $tg_to_Approve.id ){&#xD;&#xA;                $mark_tg_approved = $true&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if ( $mark_tg_approved ) {&#xD;&#xA;            $nb_rejected++&#xD;&#xA;        } else {&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return ($updates_filtered,$nb_rejected)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# CORE PROGRAM - DON'T TOUCH !!! ... Normally&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# INIT&#xD;&#xA;####&#xD;&#xA;# init trap&#xD;&#xA;$logfile = $PATH_DIR + &quot;\&quot; + $FILENAME_LOG&#xD;&#xA;trap {Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Error - $_&quot;;break}&#xD;&#xA;# get date&#xD;&#xA;$now = Get-Date&#xD;&#xA;# build filename for reports&#xD;&#xA;$report_filename =$PATH_DIR + &quot;\&quot; + $FILENAME_REPORTS&#xD;&#xA;$ErrorActionPreference = &quot;Stop&quot;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Log&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;----------------------------------------------------&quot;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Start&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Load Assembly&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Loading Assembly ... &quot;&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | Out-Null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer()&#xD;&#xA;# GetID of TargetGroup&#xD;&#xA;$tg_to_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_To_Approved }&#xD;&#xA;# $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;    $tg_valid_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_Validation }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Get all updates we want.&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Collect and filter updates ... &quot;&#xD;&#xA;&#xD;&#xA;# building Rexgexp&#xD;&#xA;$regexpCateg=&quot;&quot;; $WSUS_CategoriesIncluded | foreach { $regexpCateg += &quot;^$_$|&quot; }&#xD;&#xA;$regexpCateg = $regexpCateg.substring(0,$regexpCateg.length-1)&#xD;&#xA;$allUpdates=$wsus.getUpdates()&#xD;&#xA;$updates= $allUpdates | Where {$_.ProductTitles -match $regexpCateg `&#xD;&#xA;                       -and $_.UpdateClassificationTitle -notmatch &quot;Service Packs&quot; `&#xD;&#xA;                       -and $_.IsDeclined -eq $False `&#xD;&#xA;                       -and $_.IsSuperseded -eq $False }&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total Updates : $($allUpdates.count)     Useful Updates : $($updates.count)&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Eliminates some updates we collect&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Reject some useless updates ... &quot;&#xD;&#xA;&#xD;&#xA;($updates_filtered,$nb_rejected) = filterUpdates($updates)&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates rejected $nb_rejected (because they are already approved) &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Automatic Approve&#xD;&#xA;# and construct list of each updates&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Approving updates ... &quot;&#xD;&#xA;&#xD;&#xA;# Title, arrivaldate, producttitles, is not superseded, approved by validation, delay OK, action, remark&#xD;&#xA;$report= @()&#xD;&#xA;$nb_approved=0&#xD;&#xA;$updates_filtered | foreach {&#xD;&#xA;    $action=@()&#xD;&#xA;    $desc=@()&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $isValidationApproved = $false&#xD;&#xA;        $isDelayExceeded = $false&#xD;&#xA;        if ( $_.isApproved ){&#xD;&#xA;            $_.getUpdateApprovals() | foreach { &#xD;&#xA;                if ($_.ComputerTargetGroupId -eq $tg_valid_Approve.id ){ &#xD;&#xA;                    $isValidationApproved = $true&#xD;&#xA;                    $delayCount = $_.CreationDate.add($DELAY)&#xD;&#xA;                    $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;                 }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        $delayCount = $_.ArrivalDate.add($DELAY)&#xD;&#xA;        $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;        $isValidationApproved = $true&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ($isValidationApproved -or $WSUS_TargetGroup_Validation -eq $null ){&#xD;&#xA;        if ($isDelayExceeded){&#xD;&#xA;            Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Approve $($_.legacyname) &quot;&#xD;&#xA;            $nb_approved++&#xD;&#xA;            $action=&quot;(Approve !)&quot;&#xD;&#xA;            $desc=&quot;Uncomment action in script&quot;&#xD;&#xA;            ## UNCOMMENT WHEN YOU'RE SURE &#xD;&#xA;            #$action=&quot;Approve !&quot;&#xD;&#xA;            #$desc = &quot;$($($now - $_.ArrivalDate.add($DELAY) ).days) days left&quot;&#xD;&#xA;            #$_.approve(“Install”,$tg_to_Approve)&#xD;&#xA;        } else {         &#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc= &quot;$($($delayCount - $now).days) days remaining&quot;&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;$($tg_valid_Approve.name) must be approved first&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;This case never happen - send comments on script center for this script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    $line = New-Object System.Object&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Name&quot; -value $_.title&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Date of Arrival&quot; -value $_.ArrivalDate.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;)&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Product&quot; -value $_.ProductTitles&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $line | Add-Member -type NoteProperty -name &quot;Approved by Validation&quot; -value $isValidationApproved&#xD;&#xA;    }&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Action&quot; -value $action&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Description&quot; -value $desc&#xD;&#xA;    $report += $line&#xD;&#xA;}&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates approved $nb_approved &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Build report&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Building report ... &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$HTML_head = &quot;&lt;style&gt;&lt;!--mce:0--&gt;&lt;/style&gt;&quot;;&#xD;&#xA;    &#xD;&#xA;$HTML_body = &quot;&lt;H2&gt; $TITLE - Date of reports : $($now.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;))&lt;/H2&gt;`&#xD;&#xA;    &lt;p&gt;Results are filtered and sorted by date&lt;/p&gt;`&#xD;&#xA;    &lt;p&gt;Delay before auto approve of target group &lt;b&gt;$WSUS_TargetGroup_To_Approved&lt;/b&gt; is &lt;b&gt;$($DELAY.days) days&lt;/b&gt;&lt;/p&gt;&quot;&#xD;&#xA;&#xD;&#xA;$report_html = BuildHTMLTable($report)&#xD;&#xA;&#xD;&#xA;$html = &quot;&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;`&#xD;&#xA;    &lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&quot; + `&#xD;&#xA;    &quot;&lt;head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;title&gt;&quot; + $TITLE + &quot;&lt;/title&gt;&quot; + `&#xD;&#xA;    $HTML_style + `&#xD;&#xA;    &quot;&lt;/head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;body&gt;&quot; + `&#xD;&#xA;    $HTML_body + `&#xD;&#xA;    $report_html + `&#xD;&#xA;    &quot;&lt;/body&gt;&quot; + `&#xD;&#xA;    &quot;&lt;/html&gt;&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$html | Set-Content $report_filename&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# End&#xD;&#xA;####&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') End &quot;" />
  <Code Content="&lt;#  &#xD;&#xA;.SYNOPSIS  &#xD;&#xA;    DELAY WSUS AUTO APPROVALS&#xD;&#xA;&#xD;&#xA;.DESCRIPTION  &#xD;&#xA;    This script delay approvals for specific target group (OU).&#xD;&#xA;    The delay is customizable.&#xD;&#xA;    You must run this script on your WSUS Server.&#xD;&#xA;.NOTES  &#xD;&#xA;    File Name            : DELAY-WSUS-AUTO-APPROVALS.ps1  &#xD;&#xA;    Author               : Baptiste LEMARIE (FrameIP)&#xD;&#xA;    Copyright 2013       : Veolia Transport&#xD;&#xA;    Version              : 1.3 (2013/03/05) - make optional validation targetgroup&#xD;&#xA;                                            - count delay from Creation Date (if validation target group exists) else from Arrival Date of updates&#xD;&#xA;    History              : 1.2 (2013/02/14) - Fix&#xD;&#xA;    History              : 1.1 (2013/01/29) - Fix&#xD;&#xA;    History              : 1.0 (2013/01/22) - First Version&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# GLOBALS&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# WSUS Part&#xD;&#xA;&#xD;&#xA;# This the delay between arrival date of updates and automatic approvals&#xD;&#xA;$DELAY = [TimeSpan]30d ; &#xD;&#xA;&#xD;&#xA;# Only these categories are concerned&#xD;&#xA;# and &quot;service packs&quot; are hard coded excluded&#xD;&#xA;$WSUS_CategoriesIncluded = @(&quot;Windows server 2008&quot;,  &quot;Windows server 2008 R2&quot;, &quot;Windows 7&quot;); &#xD;&#xA;&#xD;&#xA;# We approve updates on this TargetGroup&#xD;&#xA;$WSUS_TargetGroup_To_Approved = &quot;All Computers&quot;;&#xD;&#xA;&#xD;&#xA;# Optional : Validation TargetGroup&#xD;&#xA;# If you don't have/want a Validation Target Group (with limited computers), set variable to null.&#xD;&#xA;#$WSUS_TargetGroup_Validation = &quot;Validation&quot;;&#xD;&#xA;$WSUS_TargetGroup_Validation = $null;&#xD;&#xA;&#xD;&#xA;##################&#xD;&#xA;# LOG, REPORT and RUN files&#xD;&#xA;&#xD;&#xA;$PATH_DIR = &quot;D:\DELAY-WSUS-AUTO-APPROVALS&quot;;&#xD;&#xA;$FILENAME_LOG = &quot;DELAY-WSUS-AUTO-APPROVALS.log&quot;&#xD;&#xA;$FILENAME_REPORTS = &quot;DELAY-WSUS-AUTO-APPROVALS_&quot; + $(Get-Date -format yyyy-MM-dd_HH\hmm\mss\s)  + &quot;.html&quot;&#xD;&#xA;$TITLE = &quot;DELAY WSUS AUTO APPROVALS&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# FUNCTIONS&#xD;&#xA;&#xD;&#xA;function BuildHTMLTable($report){&#xD;&#xA;    # The content&#xD;&#xA;    if ($report.count -eq 0){&#xD;&#xA;        return &quot;&lt;h3&gt;No updates&lt;/h3&gt;&quot;&#xD;&#xA;    } else {&#xD;&#xA;        # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ) {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=100px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Approved by Validation&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Approved by Validation&quot;) +&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $rows=&quot;&lt;table&gt;`&#xD;&#xA;                &lt;col&gt;&#xD;&#xA;                &lt;col width=150px&gt;&#xD;&#xA;                &lt;col width=50px&gt;&#xD;&#xA;                &lt;col width=180px&gt;&#xD;&#xA;                &lt;tr&gt;`&#xD;&#xA;                &lt;th&gt;Name&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Date of Arrivals&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Action&lt;/th&gt;`&#xD;&#xA;                &lt;th&gt;Description&lt;/th&gt;`&#xD;&#xA;                &lt;/tr&gt;&quot;&#xD;&#xA;            $rows+= $report | Sort-Object &quot;Date of Arrival&quot; -descending  | `&#xD;&#xA;                foreach { &quot;`&#xD;&#xA;                    &lt;tr&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;name&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Date of Arrival&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td style='text-align:center'&gt;&quot;+$($_.&quot;Action&quot;) + &quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;td&gt;&quot;+$($_.&quot;Description&quot;)+&quot;&lt;/td&gt;`&#xD;&#xA;                    &lt;/tr&gt;&quot; }&#xD;&#xA;            $rows+=&quot;&lt;/table&gt;&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return $rows&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function filterUpdates($updates){&#xD;&#xA;&#xD;&#xA;    $updates_filtered = @()&#xD;&#xA;    $nb_rejected=0&#xD;&#xA;    &#xD;&#xA;    # Get update not approved for no targetgroup&#xD;&#xA;    $updates | foreach {&#xD;&#xA;        if ( $_.IsApproved -eq $False ){&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    # Get update approved only for a specific Targetgroup&#xD;&#xA;    $updates | where { $_.IsApproved -eq $True } | foreach { `&#xD;&#xA;        $mark_tg_approved = $false&#xD;&#xA;        $_.getUpdateApprovals() | foreach {&#xD;&#xA;            if ($_.ComputerTargetGroupId -eq $tg_to_Approve.id ){&#xD;&#xA;                $mark_tg_approved = $true&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if ( $mark_tg_approved ) {&#xD;&#xA;            $nb_rejected++&#xD;&#xA;        } else {&#xD;&#xA;            $updates_filtered += $_&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return ($updates_filtered,$nb_rejected)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;###############################################################################&#xD;&#xA;# CORE PROGRAM - DON'T TOUCH !!! ... Normally&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# INIT&#xD;&#xA;####&#xD;&#xA;# init trap&#xD;&#xA;$logfile = $PATH_DIR + &quot;\&quot; + $FILENAME_LOG&#xD;&#xA;trap {Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Error - $_&quot;;break}&#xD;&#xA;# get date&#xD;&#xA;$now = Get-Date&#xD;&#xA;# build filename for reports&#xD;&#xA;$report_filename =$PATH_DIR + &quot;\&quot; + $FILENAME_REPORTS&#xD;&#xA;$ErrorActionPreference = &quot;Stop&quot;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Log&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;----------------------------------------------------&quot;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Start&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Load Assembly&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Loading Assembly ... &quot;&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | Out-Null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::getUpdateServer()&#xD;&#xA;# GetID of TargetGroup&#xD;&#xA;$tg_to_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_To_Approved }&#xD;&#xA;# $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;    $tg_valid_Approve=$wsus.GetComputerTargetGroups() | where { $_.name -eq $WSUS_TargetGroup_Validation }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Get all updates we want.&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Collect and filter updates ... &quot;&#xD;&#xA;&#xD;&#xA;# building Rexgexp&#xD;&#xA;$regexpCateg=&quot;&quot;; $WSUS_CategoriesIncluded | foreach { $regexpCateg += &quot;^$_$|&quot; }&#xD;&#xA;$regexpCateg = $regexpCateg.substring(0,$regexpCateg.length-1)&#xD;&#xA;$allUpdates=$wsus.getUpdates()&#xD;&#xA;$updates= $allUpdates | Where {$_.ProductTitles -match $regexpCateg `&#xD;&#xA;                       -and $_.UpdateClassificationTitle -notmatch &quot;Service Packs&quot; `&#xD;&#xA;                       -and $_.IsDeclined -eq $False `&#xD;&#xA;                       -and $_.IsSuperseded -eq $False }&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total Updates : $($allUpdates.count)     Useful Updates : $($updates.count)&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Eliminates some updates we collect&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Reject some useless updates ... &quot;&#xD;&#xA;&#xD;&#xA;($updates_filtered,$nb_rejected) = filterUpdates($updates)&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates rejected $nb_rejected (because they are already approved) &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Automatic Approve&#xD;&#xA;# and construct list of each updates&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Approving updates ... &quot;&#xD;&#xA;&#xD;&#xA;# Title, arrivaldate, producttitles, is not superseded, approved by validation, delay OK, action, remark&#xD;&#xA;$report= @()&#xD;&#xA;$nb_approved=0&#xD;&#xA;$updates_filtered | foreach {&#xD;&#xA;    $action=@()&#xD;&#xA;    $desc=@()&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $isValidationApproved = $false&#xD;&#xA;        $isDelayExceeded = $false&#xD;&#xA;        if ( $_.isApproved ){&#xD;&#xA;            $_.getUpdateApprovals() | foreach { &#xD;&#xA;                if ($_.ComputerTargetGroupId -eq $tg_valid_Approve.id ){ &#xD;&#xA;                    $isValidationApproved = $true&#xD;&#xA;                    $delayCount = $_.CreationDate.add($DELAY)&#xD;&#xA;                    $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;                 }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        $delayCount = $_.ArrivalDate.add($DELAY)&#xD;&#xA;        $isDelayExceeded = $delayCount -lt $now&#xD;&#xA;        $isValidationApproved = $true&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ($isValidationApproved -or $WSUS_TargetGroup_Validation -eq $null ){&#xD;&#xA;        if ($isDelayExceeded){&#xD;&#xA;            Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Approve $($_.legacyname) &quot;&#xD;&#xA;            $nb_approved++&#xD;&#xA;            $action=&quot;(Approve !)&quot;&#xD;&#xA;            $desc=&quot;Uncomment action in script&quot;&#xD;&#xA;            ## UNCOMMENT WHEN YOU'RE SURE &#xD;&#xA;            #$action=&quot;Approve !&quot;&#xD;&#xA;            #$desc = &quot;$($($now - $_.ArrivalDate.add($DELAY) ).days) days left&quot;&#xD;&#xA;            #$_.approve(“Install”,$tg_to_Approve)&#xD;&#xA;        } else {         &#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc= &quot;$($($delayCount - $now).days) days remaining&quot;&#xD;&#xA;        }&#xD;&#xA;    } else {&#xD;&#xA;        if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;$($tg_valid_Approve.name) must be approved first&quot;&#xD;&#xA;        } else {&#xD;&#xA;            $action=&quot;Wait&quot;&#xD;&#xA;            $desc=&quot;This case never happen - send comments on script center for this script&quot;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    $line = New-Object System.Object&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Name&quot; -value $_.title&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Date of Arrival&quot; -value $_.ArrivalDate.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;)&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Product&quot; -value $_.ProductTitles&#xD;&#xA;    # $WSUS_TargetGroup_Validation is optinal &#xD;&#xA;    if ( $WSUS_TargetGroup_Validation -ne $null ){&#xD;&#xA;        $line | Add-Member -type NoteProperty -name &quot;Approved by Validation&quot; -value $isValidationApproved&#xD;&#xA;    }&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Action&quot; -value $action&#xD;&#xA;    $line | Add-Member -type NoteProperty -name &quot;Description&quot; -value $desc&#xD;&#xA;    $report += $line&#xD;&#xA;}&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') - Total updates approved $nb_approved &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# Build report&#xD;&#xA;####&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') Building report ... &quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$HTML_head = &quot;&lt;style&gt;&lt;!--mce:0--&gt;&lt;/style&gt;&quot;;&#xD;&#xA;    &#xD;&#xA;$HTML_body = &quot;&lt;H2&gt; $TITLE - Date of reports : $($now.ToString(&quot;yyyy/MM/dd HH:mm:ss&quot;))&lt;/H2&gt;`&#xD;&#xA;    &lt;p&gt;Results are filtered and sorted by date&lt;/p&gt;`&#xD;&#xA;    &lt;p&gt;Delay before auto approve of target group &lt;b&gt;$WSUS_TargetGroup_To_Approved&lt;/b&gt; is &lt;b&gt;$($DELAY.days) days&lt;/b&gt;&lt;/p&gt;&quot;&#xD;&#xA;&#xD;&#xA;$report_html = BuildHTMLTable($report)&#xD;&#xA;&#xD;&#xA;$html = &quot;&lt;!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Strict//EN'  'http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd'&gt;`&#xD;&#xA;    &lt;html xmlns='http://www.w3.org/1999/xhtml'&gt;&quot; + `&#xD;&#xA;    &quot;&lt;head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;title&gt;&quot; + $TITLE + &quot;&lt;/title&gt;&quot; + `&#xD;&#xA;    $HTML_style + `&#xD;&#xA;    &quot;&lt;/head&gt;&quot; + `&#xD;&#xA;    &quot;&lt;body&gt;&quot; + `&#xD;&#xA;    $HTML_body + `&#xD;&#xA;    $report_html + `&#xD;&#xA;    &quot;&lt;/body&gt;&quot; + `&#xD;&#xA;    &quot;&lt;/html&gt;&quot;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$html | Set-Content $report_filename&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;####&#xD;&#xA;# End&#xD;&#xA;####&#xD;&#xA;&#xD;&#xA;Add-content $logfile -value &quot;$(Get-Date -format 'yyyy/MM/dd HH:mm:ss') End &quot;" />
</CodeSnippets>