<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&#xD;&#xA;$doRecommendedAction = $false&#xD;&#xA;if ($args[0] -ne $null)&#xD;&#xA;{&#xD;&#xA;  if (($args[0].ToUpper() -eq &quot;-Q&quot;) -or ($args[0].ToUpper() -eq &quot;-QUIET&quot;))&#xD;&#xA;  {&#xD;&#xA;    $doRecommendedAction = $true&#xD;&#xA;  }&#xD;&#xA;  else&#xD;&#xA;  {&#xD;&#xA;    write-host &quot;Usage: manage-approvals.ps1 [&lt;-quiet&gt;/&lt;-q&gt;]&quot;&#xD;&#xA;    exit&#xD;&#xA;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Load administration&#xD;&#xA;[System.Reflection.Assembly]::LoadWithPartialName('Microsoft.UpdateServices.Administration') | out-null&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Create update server&#xD;&#xA;write-host &quot;&lt;&lt;&lt; Connecting to WSUS server &gt;&gt;&gt;&quot; -foregroundcolor &quot;yellow&quot;&#xD;&#xA;$updateServer = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer()&#xD;&#xA;write-host &quot;&quot;&#xD;&#xA;&#xD;&#xA;# Get all updates and loop through them to find out if there are any unapproved ones &#xD;&#xA;# with older revisions that are approved&#xD;&#xA;$updates = $updateServer.GetUpdates()&#xD;&#xA;$count = 1&#xD;&#xA;$didNothing = $true&#xD;&#xA;&#xD;&#xA;foreach ($update in $updates)&#xD;&#xA;{&#xD;&#xA;    if (($update.IsApproved -eq $false) -and ($update.HasEarlierRevision -eq $true))&#xD;&#xA;    {&#xD;&#xA;        $revisions = $update.GetRelatedUpdates([Microsoft.UpdateServices.Administration.UpdateRelationship]::AllRevisionsOfThisUpdate)&#xD;&#xA;        &#xD;&#xA;        # Find the first revision that has any approval on it&#xD;&#xA;        foreach ($revision in $revisions)&#xD;&#xA;        {&#xD;&#xA;            if ($revision.IsApproved)&#xD;&#xA;            {&#xD;&#xA;                $didNothing = $false&#xD;&#xA;                $approvals = $revision.GetUpdateApprovals()&#xD;&#xA;                foreach ($approval in $approvals)&#xD;&#xA;                {&#xD;&#xA;                  $targetGroup = $approval.GetComputerTargetGroup()&#xD;&#xA;                    write-host &quot;Update #&quot; $count&#xD;&#xA;                    write-host &quot;----------&quot;&#xD;&#xA;                    write-host &quot; Update ID         :&quot; $update.Id.UpdateId.ToString()&#xD;&#xA;                    write-host &quot; Update title      :&quot;$update.Title&#xD;&#xA;                    write-host &quot; Current state     : An older revision is approved for&quot; $approval.Action.ToString() &quot;for target group&quot; $targetGroup.Name&#xD;&#xA;    &#xD;&#xA;                    $action = &quot;s&quot; # skip by default&#xD;&#xA;                    &#xD;&#xA;                    if ($update.PublicationState -eq [Microsoft.UpdateServices.Administration.PublicationState]::Expired)&#xD;&#xA;                    {&#xD;&#xA;            if ($doRecommendedAction -eq $true)&#xD;&#xA;            {&#xD;&#xA;              # Recommended action: Decline update&#xD;&#xA;              $action = &quot;d&quot;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;              # Recommended action: Decline update&#xD;&#xA;              write-host &quot; Recommended action: Decline this update&quot; -foregroundcolor &quot;blue&quot; -backgroundcolor &quot;yellow&quot;&#xD;&#xA;              write-host &quot;&quot;&#xD;&#xA;              $action = read-host &quot; Decline (d)/Skip (s or Enter)&quot;&#xD;&#xA;            }&#xD;&#xA;                    }&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;            if ($doRecommendedAction -eq $true)&#xD;&#xA;            {&#xD;&#xA;              # Recommended action: Move approval to the latest revision&#xD;&#xA;              $action = &quot;m&quot;&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;              # Recommended action: Move approval to the latest revision&#xD;&#xA;              write-host &quot; Recommended action: Move this approval to the latest revision&quot; -foregroundcolor &quot;blue&quot; -backgroundcolor &quot;yellow&quot;&#xD;&#xA;              write-host &quot;&quot;&#xD;&#xA;              $action = read-host &quot; Move (m)/Skip (s or Enter)&quot;&#xD;&#xA;            }&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    switch ($action)&#xD;&#xA;                    {&#xD;&#xA;                        &quot;d&quot; # Decline&#xD;&#xA;                        {&#xD;&#xA;                            write-host &quot; Declining update ...&quot;&#xD;&#xA;                            $approval.Delete()&#xD;&#xA;                            $update.Decline()&#xD;&#xA;                            write-host &quot; Done!&quot;&#xD;&#xA;                        }&#xD;&#xA;                        &#xD;&#xA;                        &quot;m&quot; # Move&#xD;&#xA;                        {&#xD;&#xA;                            write-host &quot; Moving approval ...&quot;&#xD;&#xA;                            $approval.Delete()&#xD;&#xA;                            $update.Approve($approval.Action, $targetGroup, $approval.Deadline) | out-null&#xD;&#xA;                            write-host &quot; Done!&quot;&#xD;&#xA;                        }&#xD;&#xA;                        &#xD;&#xA;                        default&#xD;&#xA;                        {&#xD;&#xA;                            write-host &quot; Skipping&quot;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                    &#xD;&#xA;                    write-host &quot;&quot;&#xD;&#xA;                    $count = $count + 1&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if ($didNothing -eq $true)&#xD;&#xA;{&#xD;&#xA;    write-host &quot;No updates detected that have approvals for older revisions&quot;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;trap&#xD;&#xA;{&#xD;&#xA;    write-host &quot;Error Occurred&quot;&#xD;&#xA;    write-host &quot;Exception Message: &quot; &#xD;&#xA;    write-host $_.Exception.Message&#xD;&#xA;    write-host $_.Exception.StackTrace&#xD;&#xA;    exit&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# EOFEnumerateAD($ds.SearchRoot);&#xD;&#xA;" />
</CodeSnippets>