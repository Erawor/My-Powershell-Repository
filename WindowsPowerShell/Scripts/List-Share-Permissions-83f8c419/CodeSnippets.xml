<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&lt;#&#xD;&#xA;           .SYNOPSIS &#xD;&#xA;           This script will list all shares on a computer, and list all the share permissions for each share.&#xD;&#xA;&#xD;&#xA;           .DESCRIPTION&#xD;&#xA;           The script will take a list all shares on a local or remote computer.&#xD;&#xA;    &#xD;&#xA;           .PARAMETER Computer&#xD;&#xA;           Specifies the computer or array of computers to process&#xD;&#xA;&#xD;&#xA;           .INPUTS&#xD;&#xA;           Get-SharePermissions accepts pipeline of computer name(s)&#xD;&#xA;&#xD;&#xA;           .OUTPUTS&#xD;&#xA;           Produces an array object for each share found.&#xD;&#xA;&#xD;&#xA;           .EXAMPLE&#xD;&#xA;           C:\PS&gt; .\Get-SharePermissions # Operates against local computer.&#xD;&#xA;&#xD;&#xA;           .EXAMPLE&#xD;&#xA;           C:\PS&gt; 'computerName' | .\Get-SharePermissions&#xD;&#xA;&#xD;&#xA;           .EXAMPLE&#xD;&#xA;           C:\PS&gt; Get-Content 'computerlist.txt' | .\Get-SharePermissions | Out-File 'SharePermissions.txt'&#xD;&#xA;&#xD;&#xA;           .EXAMPLE&#xD;&#xA;           Get-Help .\Get-SharePermissions -Full&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;# Written by BigTeddy November 15, 2011&#xD;&#xA;# Last updated 9 September 2012 &#xD;&#xA;# Ver. 2.0 &#xD;&#xA;# Thanks to Michal Gajda for input with the ACE handling.&#xD;&#xA; &#xD;&#xA;[cmdletbinding()]&#xD;&#xA;&#xD;&#xA;param([Parameter(ValueFromPipeline=$True,&#xD;&#xA;    ValueFromPipelineByPropertyName=$True)]$Computer = '.') &#xD;&#xA;&#xD;&#xA;$shares = gwmi -Class win32_share -ComputerName $computer | select -ExpandProperty Name &#xD;&#xA; &#xD;&#xA;foreach ($share in $shares) { &#xD;&#xA;    $acl = $null &#xD;&#xA;    Write-Host $share -ForegroundColor Green &#xD;&#xA;    Write-Host $('-' * $share.Length) -ForegroundColor Green &#xD;&#xA;    $objShareSec = Get-WMIObject -Class Win32_LogicalShareSecuritySetting -Filter &quot;name='$Share'&quot;  -ComputerName $computer&#xD;&#xA;    try { &#xD;&#xA;        $SD = $objShareSec.GetSecurityDescriptor().Descriptor   &#xD;&#xA;        foreach($ace in $SD.DACL){  &#xD;&#xA;            $UserName = $ace.Trustee.Name     &#xD;&#xA;            If ($ace.Trustee.Domain -ne $Null) {$UserName = &quot;$($ace.Trustee.Domain)\$UserName&quot;}   &#xD;&#xA;            If ($ace.Trustee.Name -eq $Null) {$UserName = $ace.Trustee.SIDString }     &#xD;&#xA;            [Array]$ACL += New-Object Security.AccessControl.FileSystemAccessRule($UserName, $ace.AccessMask, $ace.AceType) &#xD;&#xA;            } #end foreach ACE           &#xD;&#xA;        } # end try &#xD;&#xA;    catch &#xD;&#xA;        { Write-Host &quot;Unable to obtain permissions for $share&quot; } &#xD;&#xA;    $ACL &#xD;&#xA;    Write-Host $('=' * 50) &#xD;&#xA;    } # end foreach $share" />
  <Code Content="&lt;#&#xD;&#xA;           .SYNOPSIS &#xD;&#xA;           This script will list all shares on a computer, and list all the share permissions for each share.&#xD;&#xA;&#xD;&#xA;           .DESCRIPTION&#xD;&#xA;           The script will take a list all shares on a local or remote computer.&#xD;&#xA;    &#xD;&#xA;           .PARAMETER Computer&#xD;&#xA;           Specifies the computer or array of computers to process&#xD;&#xA;&#xD;&#xA;           .INPUTS&#xD;&#xA;           Get-SharePermissions accepts pipeline of computer name(s)&#xD;&#xA;&#xD;&#xA;           .OUTPUTS&#xD;&#xA;           Produces an array object for each share found.&#xD;&#xA;&#xD;&#xA;           .EXAMPLE&#xD;&#xA;           C:\PS&gt; .\Get-SharePermissions # Operates against local computer.&#xD;&#xA;&#xD;&#xA;           .EXAMPLE&#xD;&#xA;           C:\PS&gt; 'computerName' | .\Get-SharePermissions&#xD;&#xA;&#xD;&#xA;           .EXAMPLE&#xD;&#xA;           C:\PS&gt; Get-Content 'computerlist.txt' | .\Get-SharePermissions | Out-File 'SharePermissions.txt'&#xD;&#xA;&#xD;&#xA;           .EXAMPLE&#xD;&#xA;           Get-Help .\Get-SharePermissions -Full&#xD;&#xA;#&gt;&#xD;&#xA;&#xD;&#xA;# Written by BigTeddy November 15, 2011&#xD;&#xA;# Last updated 9 September 2012 &#xD;&#xA;# Ver. 2.0 &#xD;&#xA;# Thanks to Michal Gajda for input with the ACE handling.&#xD;&#xA; &#xD;&#xA;[cmdletbinding()]&#xD;&#xA;&#xD;&#xA;param([Parameter(ValueFromPipeline=$True,&#xD;&#xA;    ValueFromPipelineByPropertyName=$True)]$Computer = '.') &#xD;&#xA;&#xD;&#xA;$shares = gwmi -Class win32_share -ComputerName $computer | select -ExpandProperty Name &#xD;&#xA; &#xD;&#xA;foreach ($share in $shares) { &#xD;&#xA;    $acl = $null &#xD;&#xA;    Write-Host $share -ForegroundColor Green &#xD;&#xA;    Write-Host $('-' * $share.Length) -ForegroundColor Green &#xD;&#xA;    $objShareSec = Get-WMIObject -Class Win32_LogicalShareSecuritySetting -Filter &quot;name='$Share'&quot;  -ComputerName $computer&#xD;&#xA;    try { &#xD;&#xA;        $SD = $objShareSec.GetSecurityDescriptor().Descriptor   &#xD;&#xA;        foreach($ace in $SD.DACL){  &#xD;&#xA;            $UserName = $ace.Trustee.Name     &#xD;&#xA;            If ($ace.Trustee.Domain -ne $Null) {$UserName = &quot;$($ace.Trustee.Domain)\$UserName&quot;}   &#xD;&#xA;            If ($ace.Trustee.Name -eq $Null) {$UserName = $ace.Trustee.SIDString }     &#xD;&#xA;            [Array]$ACL += New-Object Security.AccessControl.FileSystemAccessRule($UserName, $ace.AccessMask, $ace.AceType) &#xD;&#xA;            } #end foreach ACE           &#xD;&#xA;        } # end try &#xD;&#xA;    catch &#xD;&#xA;        { Write-Host &quot;Unable to obtain permissions for $share&quot; } &#xD;&#xA;    $ACL &#xD;&#xA;    Write-Host $('=' * 50) &#xD;&#xA;    } # end foreach $share" />
</CodeSnippets>