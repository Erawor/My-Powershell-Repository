<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&lt;#&#xD;&#xA;    .SYNOPSIS&#xD;&#xA;    Creates a HTML Report describing the Exchange environment &#xD;&#xA;   &#xD;&#xA;   &#x9;Steve Goodman&#xD;&#xA;    (Updates in v1.5.6 by Neil Johnson to support Exchange Server 2013)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;THIS CODE IS MADE AVAILABLE AS IS, WITHOUT WARRANTY OF ANY KIND. THE ENTIRE &#xD;&#xA;&#x9;RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS CODE REMAINS WITH THE USER.&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;Version 1.5.8&#xD;&#xA;&#x9;&#xD;&#xA;    .DESCRIPTION&#xD;&#xA;&#x9;&#xD;&#xA;    This script creates a HTML report showing the following information about an Exchange &#xD;&#xA;    2013, 2010 and to a lesser extent, 2007 and 2003, environment. &#xD;&#xA;    &#xD;&#xA;    The following is shown:&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;* Report Generation Time&#xD;&#xA;&#x9;* Total Servers per Exchange Version (2003 &gt; 2010 or 2007 &gt; 2013)&#xD;&#xA;&#x9;* Total Mailboxes per Exchange Version, Office 365 and Organisation&#xD;&#xA;&#x9;* Total Roles in the environment&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;Then, per site:&#xD;&#xA;&#x9;* Total Mailboxes per site&#xD;&#xA;    * Internal, External and CAS Array Hostnames&#xD;&#xA;&#x9;* Exchange Servers with:&#xD;&#xA;&#x9;&#x9;o Exchange Server Version&#xD;&#xA;&#x9;&#x9;o Service Pack&#xD;&#xA;&#x9;&#x9;o Update Rollup and rollup version&#xD;&#xA;&#x9;&#x9;o Roles installed on server and mailbox counts&#xD;&#xA;&#x9;&#x9;o OS Version and Service Pack&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;Then, per Database availability group (Exchange 2010/2013):&#xD;&#xA;&#x9;* Total members per DAG&#xD;&#xA;&#x9;* Member list&#xD;&#xA;&#x9;* Databases, detailing:&#xD;&#xA;&#x9;&#x9;o Mailbox Count and Average Size&#xD;&#xA;&#x9;&#x9;o Archive Mailbox Count and Average Size (Only shown if DAG includes Archive Mailboxes)&#xD;&#xA;&#x9;&#x9;o Database Size and whitespace&#xD;&#xA;&#x9;&#x9;o Database and log disk free&#xD;&#xA;&#x9;&#x9;o Last Full Backup (Only shown if one or more DAG database has been backed up)&#xD;&#xA;&#x9;&#x9;o Circular Logging Enabled (Only shown if one or more DAG database has Circular Logging enabled)&#xD;&#xA;&#x9;&#x9;o Mailbox server hosting active copy&#xD;&#xA;&#x9;&#x9;o List of mailbox servers hosting copies and number of copies&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;Finally, per Database (Non DAG DBs/Exchange 2007/Exchange 2003)&#xD;&#xA;&#x9;* Databases, detailing:&#xD;&#xA;&#x9;&#x9;o Storage Group (if applicable) and DB name&#xD;&#xA;&#x9;&#x9;o Server hosting database&#xD;&#xA;&#x9;&#x9;o Mailbox Count and Average Size&#xD;&#xA;&#x9;&#x9;o Archive Mailbox Count and Average Size (Only shown if DAG includes Archive Mailboxes)&#xD;&#xA;&#x9;&#x9;o Database Size and whitespace&#xD;&#xA;&#x9;&#x9;o Database and log disk free&#xD;&#xA;&#x9;&#x9;o Last Full Backup (Only shown if one or more DAG database has been backed up)&#xD;&#xA;&#x9;&#x9;o Circular Logging Enabled (Only shown if one or more DAG database has Circular Logging enabled)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;This does not detail public folder infrastructure, or examine Exchange 2007/2003 CCR/SCC clusters&#xD;&#xA;&#x9;(although it attempts to detect Clustered Exchange 2007/2003 servers, signified by ClusMBX).&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;IMPORTANT NOTE: The script requires WMI and Remote Registry access to Exchange servers from the server &#xD;&#xA;&#x9;it is run from to determine OS version, Update Rollup, Exchange 2007/2003 cluster and DB size information.&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER HTMLReport&#xD;&#xA;    Filename to write HTML Report to&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER SendMail&#xD;&#xA;&#x9;Send Mail after completion. Set to $True to enable. If enabled, -MailFrom, -MailTo, -MailServer are mandatory&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER MailFrom&#xD;&#xA;&#x9;Email address to send from. Passed directly to Send-MailMessage as -From&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER MailTo&#xD;&#xA;&#x9;Email address to send to. Passed directly to Send-MailMessage as -To&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER MailServer&#xD;&#xA;&#x9;SMTP Mail server to attempt to send through. Passed directly to Send-MailMessage as -SmtpServer&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER ScheduleAs&#xD;&#xA;&#x9;Attempt to schedule the command just executed for 10PM nightly. Specify the username here, schtasks (under the hood) will ask for a password later.&#xD;&#xA;    &#xD;&#xA;&#x9;.PARAMETER ViewEntireForest&#xD;&#xA;&#x9;By default, true. Set the option in Exchange 2007 or 2010 to view all Exchange servers and recipients in the forest.&#xD;&#xA;   &#xD;&#xA;    .PARAMETER ServerFilter&#xD;&#xA;&#x9;Use a text based string to filter Exchange Servers by, e.g. NL-* -  Note the use of the wildcard (*) character to allow for multiple matches.&#xD;&#xA;    &#xD;&#xA;&#x9;.EXAMPLE&#xD;&#xA;    Generate the HTML report &#xD;&#xA;    .\Get-ExchangeEnvironmentReport.ps1 -HTMLReport .\report.html&#xD;&#xA;&#x9;&#xD;&#xA;    #&gt;&#xD;&#xA;param(&#xD;&#xA;    [parameter(Position=0,Mandatory=$true,ValueFromPipeline=$false,HelpMessage='Filename to write HTML report to')][string]$HTMLReport,&#xD;&#xA;&#x9;[parameter(Position=1,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Send Mail ($True/$False)')][bool]$SendMail=$false,&#xD;&#xA;&#x9;[parameter(Position=2,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Mail From')][string]$MailFrom,&#xD;&#xA;&#x9;[parameter(Position=3,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Mail To')]$MailTo,&#xD;&#xA;&#x9;[parameter(Position=4,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Mail Server')][string]$MailServer,&#xD;&#xA;&#x9;[parameter(Position=4,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Schedule as user')][string]$ScheduleAs,&#xD;&#xA;&#x9;[parameter(Position=5,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Change view to entire forest')][bool]$ViewEntireForest=$true,&#xD;&#xA;&#x9;[parameter(Position=5,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Server Name Filter (eg NL-*)')][string]$ServerFilter=&quot;*&quot;&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;# Sub-Function to Get Database Information. Shorter than expected..&#xD;&#xA;function _GetDAG&#xD;&#xA;{&#xD;&#xA;&#x9;param($DAG)&#xD;&#xA;&#x9;@{Name&#x9;&#x9;&#x9;= $DAG.Name.ToUpper()&#xD;&#xA;&#x9;  MemberCount&#x9;= $DAG.Servers.Count&#xD;&#xA;&#x9;  Members&#x9;&#x9;= [array]($DAG.Servers | % { $_.Name })&#xD;&#xA;&#x9;  Databases&#x9;&#x9;= @()&#xD;&#xA;&#x9;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Sub-Function to Get Database Information&#xD;&#xA;function _GetDB&#xD;&#xA;{&#xD;&#xA;&#x9;param($Database,$ExchangeEnvironment,$Mailboxes,$ArchiveMailboxes,$E2010)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Circular Logging, Last Full Backup&#xD;&#xA;&#x9;if ($Database.CircularLoggingEnabled) { $CircularLoggingEnabled=&quot;Yes&quot; } else { $CircularLoggingEnabled = &quot;No&quot; }&#xD;&#xA;&#x9;if ($Database.LastFullBackup) { $LastFullBackup=$Database.LastFullBackup.ToString() } else { $LastFullBackup = &quot;Not Available&quot; }&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Mailbox Average Sizes&#xD;&#xA;&#x9;$MailboxStatistics = [array]($ExchangeEnvironment.Servers[$Database.Server.Name].MailboxStatistics | Where {$_.Database -eq $Database.Identity})&#xD;&#xA;&#x9;if ($MailboxStatistics)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;[long]$MailboxItemSizeB = 0&#xD;&#xA;&#x9;&#x9;$MailboxStatistics | %{ $MailboxItemSizeB+=$_.TotalItemSizeB }&#xD;&#xA;&#x9;&#x9;[long]$MailboxAverageSize = $MailboxItemSizeB / $MailboxStatistics.Count&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$MailboxAverageSize = 0&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Free Disk Space Percentage&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Servers[$Database.Server.Name].Disks)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;foreach ($Disk in $ExchangeEnvironment.Servers[$Database.Server.Name].Disks)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if ($Database.EdbFilePath.PathName -like &quot;$($Disk.Name)*&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$FreeDatabaseDiskSpace = $Disk.FreeSpace / $Disk.Capacity * 100&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if ($Database.ExchangeVersion.ExchangeBuild.Major -ge 14)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($Database.LogFolderPath.PathName -like &quot;$($Disk.Name)*&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$FreeLogDiskSpace = $Disk.FreeSpace / $Disk.Capacity * 100&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$StorageGroupDN = $Database.DistinguishedName.Replace(&quot;CN=$($Database.Name),&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Adsi=[adsi]&quot;LDAP://$($Database.OriginatingServer)/$($StorageGroupDN)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($Adsi.msExchESEParamLogFilePath -like &quot;$($Disk.Name)*&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$FreeLogDiskSpace = $Disk.FreeSpace / $Disk.Capacity * 100&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$FreeLogDiskSpace=$null&#xD;&#xA;&#x9;&#x9;$FreeDatabaseDiskSpace=$null&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if ($Database.ExchangeVersion.ExchangeBuild.Major -ge 14 -and $E2010)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Exchange 2010 Database Only&#xD;&#xA;&#x9;&#x9;$CopyCount = [int]$Database.Servers.Count&#xD;&#xA;&#x9;&#x9;if ($Database.MasterServerOrAvailabilityGroup.Name -ne $Database.Server.Name)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Copies = [array]($Database.Servers | % { $_.Name })&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$Copies = @()&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;# Archive Info&#xD;&#xA;&#x9;&#x9;$ArchiveMailboxCount = [int]([array]($ArchiveMailboxes | Where {$_.ArchiveDatabase -eq $Database.Name})).Count&#xD;&#xA;&#x9;&#x9;$ArchiveStatistics = [array]($ArchiveMailboxes | Where {$_.ArchiveDatabase -eq $Database.Name} | Get-MailboxStatistics -Archive )&#xD;&#xA;&#x9;&#x9;if ($ArchiveStatistics)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;[long]$ArchiveItemSizeB = 0&#xD;&#xA;&#x9;&#x9;&#x9;$ArchiveStatistics | %{ $ArchiveItemSizeB+=$_.TotalItemSize.Value.ToBytes() }&#xD;&#xA;&#x9;&#x9;&#x9;[long]$ArchiveAverageSize = $ArchiveItemSizeB / $ArchiveStatistics.Count&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$ArchiveAverageSize = 0&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;# DB Size / Whitespace Info&#xD;&#xA;&#x9;&#x9;[long]$Size = $Database.DatabaseSize.ToBytes()&#xD;&#xA;&#x9;&#x9;[long]$Whitespace = $Database.AvailableNewMailboxSpace.ToBytes()&#xD;&#xA;&#x9;&#x9;$StorageGroup = $null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$ArchiveMailboxCount = 0&#xD;&#xA;&#x9;&#x9;$CopyCount = 0&#xD;&#xA;&#x9;&#x9;$Copies = @()&#xD;&#xA;&#x9;&#x9;# 2003 &amp; 2007, Use WMI (Based on code by Gary Siepser, http://bit.ly/kWWMb3)&#xD;&#xA;&#x9;&#x9;$Size = [long](get-wmiobject cim_datafile -computername $Database.Server.Name -filter ('name=''' + $Database.edbfilepath.pathname.replace(&quot;\&quot;,&quot;\\&quot;) + '''')).filesize&#xD;&#xA;&#x9;&#x9;if (!$Size)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot detect database size via WMI for $($Database.Server.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;[long]$Size = 0&#xD;&#xA;&#x9;&#x9;&#x9;[long]$Whitespace = 0&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;[long]$MailboxDeletedItemSizeB = 0&#xD;&#xA;&#x9;&#x9;&#x9;if ($MailboxStatistics)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$MailboxStatistics | %{ $MailboxDeletedItemSizeB+=$_.TotalDeletedItemSizeB }&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;$Whitespace = $Size - $MailboxItemSizeB - $MailboxDeletedItemSizeB&#xD;&#xA;&#x9;&#x9;&#x9;if ($Whitespace -lt 0) { $Whitespace = 0 }&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$StorageGroup =$Database.DistinguishedName.Split(&quot;,&quot;)[1].Replace(&quot;CN=&quot;,&quot;&quot;)&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;@{Name&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= $Database.Name&#xD;&#xA;&#x9;  StorageGroup&#x9;&#x9;&#x9;&#x9;= $StorageGroup&#xD;&#xA;&#x9;  ActiveOwner&#x9;&#x9;&#x9;&#x9;= $Database.Server.Name.ToUpper()&#xD;&#xA;&#x9;  MailboxCount&#x9;&#x9;&#x9;&#x9;= [long]([array]($Mailboxes | Where {$_.Database -eq $Database.Identity})).Count&#xD;&#xA;&#x9;  MailboxAverageSize&#x9;&#x9;= $MailboxAverageSize&#xD;&#xA;&#x9;  ArchiveMailboxCount&#x9;&#x9;= $ArchiveMailboxCount&#xD;&#xA;&#x9;  ArchiveAverageSize&#x9;&#x9;= $ArchiveAverageSize&#xD;&#xA;&#x9;  CircularLoggingEnabled &#x9;= $CircularLoggingEnabled&#xD;&#xA;&#x9;  LastFullBackup&#x9;&#x9;&#x9;= $LastFullBackup&#xD;&#xA;&#x9;  Size&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= $Size&#xD;&#xA;&#x9;  Whitespace&#x9;&#x9;&#x9;&#x9;= $Whitespace&#xD;&#xA;&#x9;  Copies&#x9;&#x9;&#x9;&#x9;&#x9;= $Copies&#xD;&#xA;&#x9;  CopyCount&#x9;&#x9;&#x9;&#x9;&#x9;= $CopyCount&#xD;&#xA;&#x9;  FreeLogDiskSpace&#x9;&#x9;&#x9;= $FreeLogDiskSpace&#xD;&#xA;&#x9;  FreeDatabaseDiskSpace&#x9;&#x9;= $FreeDatabaseDiskSpace&#xD;&#xA;&#x9;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Sub-Function to get mailbox count per server.&#xD;&#xA;# New in 1.5.2&#xD;&#xA;function _GetExSvrMailboxCount&#xD;&#xA;{&#xD;&#xA;&#x9;param($Mailboxes,$ExchangeServer,$Databases)&#xD;&#xA;&#x9;# The following *should* work, but it doesn't. Apparently, ServerName is not always returned correctly which may be the cause of&#xD;&#xA;&#x9;# reports of counts being incorrect&#xD;&#xA;&#x9;#([array]($Mailboxes | Where {$_.ServerName -eq $ExchangeServer.Name})).Count&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# ..So as a workaround, I'm going to check what databases are assigned to each server and then get the mailbox counts on a per-&#xD;&#xA;&#x9;# database basis and return the resulting total. As we already have this information resident in memory it should be cheap, just&#xD;&#xA;&#x9;# not as quick.&#xD;&#xA;&#x9;$MailboxCount = 0&#xD;&#xA;&#x9;foreach ($Database in [array]($Databases | Where {$_.Server -eq $ExchangeServer.Name}))&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$MailboxCount+=([array]($Mailboxes | Where {$_.Database -eq $Database.Identity})).Count&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$MailboxCount&#xD;&#xA;&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub-Function to Get Exchange Server information&#xD;&#xA;function _GetExSvr&#xD;&#xA;{&#xD;&#xA;&#x9;param($E2010,$ExchangeServer,$Mailboxes,$Databases)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Set Basic Variables&#xD;&#xA;&#x9;$MailboxCount = 0&#xD;&#xA;&#x9;$RollupLevel = 0&#xD;&#xA;&#x9;$RollupVersion = &quot;&quot;&#xD;&#xA;    $ExtNames = @()&#xD;&#xA;    $IntNames = @()&#xD;&#xA;    $CASArrayName = &quot;&quot;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Get WMI Information&#xD;&#xA;&#x9;$tWMI = Get-WmiObject Win32_OperatingSystem -ComputerName $ExchangeServer.Name -ErrorAction SilentlyContinue&#xD;&#xA;&#x9;if ($tWMI)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$OSVersion = $tWMI.Caption.Replace(&quot;(R)&quot;,&quot;&quot;).Replace(&quot;Microsoft &quot;,&quot;&quot;).Replace(&quot;Enterprise&quot;,&quot;Ent&quot;).Replace(&quot;Standard&quot;,&quot;Std&quot;).Replace(&quot; Edition&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;$OSServicePack = $tWMI.CSDVersion&#xD;&#xA;&#x9;&#x9;$RealName = $tWMI.CSName.ToUpper()&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;Write-Warning &quot;Cannot detect OS information via WMI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;$OSVersion = &quot;N/A&quot;&#xD;&#xA;&#x9;&#x9;$OSServicePack = &quot;N/A&quot;&#xD;&#xA;&#x9;&#x9;$RealName = $ExchangeServer.Name.ToUpper()&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$tWMI=Get-WmiObject -query &quot;Select * from Win32_Volume&quot; -ComputerName $ExchangeServer.Name -ErrorAction SilentlyContinue&#xD;&#xA;&#x9;if ($tWMI)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Disks=$tWMI | Select Name,Capacity,FreeSpace | Sort-Object -Property Name&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;Write-Warning &quot;Cannot detect OS information via WMI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;$Disks=$null&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Get Exchange Version&#xD;&#xA;&#x9;if ($ExchangeServer.AdminDisplayVersion.Major -eq 6)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$ExchangeMajorVersion = &quot;$($ExchangeServer.AdminDisplayVersion.Major).$($ExchangeServer.AdminDisplayVersion.Minor)&quot;&#xD;&#xA;&#x9;&#x9;$ExchangeSPLevel = $ExchangeServer.AdminDisplayVersion.FilePatchLevelDescription.Replace(&quot;Service Pack &quot;,&quot;&quot;)&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$ExchangeMajorVersion = $ExchangeServer.AdminDisplayVersion.Major&#xD;&#xA;&#x9;&#x9;$ExchangeSPLevel = $ExchangeServer.AdminDisplayVersion.Minor&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;# Exchange 2007+&#xD;&#xA;&#x9;if ($ExchangeMajorVersion -ge 8)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Get Roles&#xD;&#xA;&#x9;&#x9;$MailboxStatistics=$null&#xD;&#xA;&#x9;    [array]$Roles = $ExchangeServer.ServerRole.ToString().Replace(&quot; &quot;,&quot;&quot;).Split(&quot;,&quot;);&#xD;&#xA;&#x9;&#x9;if ($Roles -contains &quot;Mailbox&quot;)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$MailboxCount = _GetExSvrMailboxCount -Mailboxes $Mailboxes -ExchangeServer $ExchangeServer -Databases $Databases&#xD;&#xA;&#x9;&#x9;&#x9;if ($ExchangeServer.Name.ToUpper() -ne $RealName)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Roles = [array]($Roles | Where {$_ -ne &quot;Mailbox&quot;})&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Roles += &quot;ClusteredMailbox&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;# Get Mailbox Statistics the normal way, return in a consitent format&#xD;&#xA;&#x9;&#x9;&#x9;$MailboxStatistics = Get-MailboxStatistics -Server $ExchangeServer | Select DisplayName,@{Name=&quot;TotalItemSizeB&quot;;Expression={$_.TotalItemSize.Value.ToBytes()}},@{Name=&quot;TotalDeletedItemSizeB&quot;;Expression={$_.TotalDeletedItemSize.Value.ToBytes()}},Database&#xD;&#xA;&#x9;    }&#xD;&#xA;        # Get HTTPS Names (Exchange 2010 only due to time taken to retrieve data)&#xD;&#xA;        if ($Roles -contains &quot;ClientAccess&quot; -and $E2010)&#xD;&#xA;        {&#xD;&#xA;            &#xD;&#xA;            Get-OWAVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            Get-WebServicesVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            Get-OABVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            Get-ActiveSyncVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            $IntNames+=(Get-ClientAccessServer -Identity $ExchangeServer.Name).AutoDiscoverInternalURI.Host&#xD;&#xA;            if ($ExchangeMajorVersion -ge 14)&#xD;&#xA;            {&#xD;&#xA;                Get-ECPVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            }&#xD;&#xA;            $IntNames = $IntNames|Sort-Object -Unique&#xD;&#xA;            $ExtNames = $ExtNames|Sort-Object -Unique&#xD;&#xA;            $CASArray = Get-ClientAccessArray -Site $ExchangeServer.Site.Name&#xD;&#xA;            if ($CASArray)&#xD;&#xA;            {&#xD;&#xA;                $CASArrayName = $CASArray.Fqdn&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;# Rollup Level / Versions (Thanks to Bhargav Shukla http://bit.ly/msxGIJ)&#xD;&#xA;&#x9;&#x9;if ($ExchangeMajorVersion -ge 14)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$RegKey=&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\S-1-5-18\\Products\\AE1D439464EB1B8488741FFA028E291C\\Patches&quot;&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$RegKey=&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\S-1-5-18\\Products\\461C2B4266EDEF444B864AD6D9E5B613\\Patches&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$RemoteRegistry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $ExchangeServer.Name);&#xD;&#xA;&#x9;&#x9;if ($RemoteRegistry)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$RUKeys = $RemoteRegistry.OpenSubKey($RegKey).GetSubKeyNames() | ForEach {&quot;$RegKey\\$_&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;if ($RUKeys)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;[array]($RUKeys | %{$RemoteRegistry.OpenSubKey($_).getvalue(&quot;DisplayName&quot;)}) | %{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ($_ -like &quot;Update Rollup *&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$tRU = $_.Split(&quot; &quot;)[2]&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ($tRU -like &quot;*-*&quot;) { $tRUV=$tRU.Split(&quot;-&quot;)[1]; $tRU=$tRU.Split(&quot;-&quot;)[0] } else { $tRUV=&quot;&quot; }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ($tRU -ge $RollupLevel) { $RollupLevel=$tRU; $RollupVersion=$tRUV }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;        } else {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot detect Rollup Version via Remote Registry for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;        # Exchange 2013 CU or SP Level&#xD;&#xA;        if ($ExchangeMajorVersion -ge 15)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$RegKey=&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Microsoft Exchange v15&quot;&#xD;&#xA;&#x9;&#x9;    $RemoteRegistry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $ExchangeServer.Name);&#xD;&#xA;&#x9;&#x9;    if ($RemoteRegistry)&#xD;&#xA;&#x9;&#x9;    {&#xD;&#xA;&#x9;&#x9;&#x9;    $ExchangeSPLevel = $RemoteRegistry.OpenSubKey($RegKey).getvalue(&quot;DisplayName&quot;)&#xD;&#xA;                if ($ExchangeSPLevel -like &quot;*Service Pack*&quot; -or $ExchangeSPLevel -like &quot;*Cumulative Update*&quot;)&#xD;&#xA;                {&#xD;&#xA;&#x9;&#x9;&#x9;        $ExchangeSPLevel = $ExchangeSPLevel.Replace(&quot;Microsoft Exchange Server 2013 &quot;,&quot;&quot;);&#xD;&#xA;                    $ExchangeSPLevel = $ExchangeSPLevel.Replace(&quot;Service Pack &quot;,&quot;SP&quot;);&#xD;&#xA;                    $ExchangeSPLevel = $ExchangeSPLevel.Replace(&quot;Cumulative Update &quot;,&quot;CU&quot;); &#xD;&#xA;                } else {&#xD;&#xA;                    $ExchangeSPLevel = 0;&#xD;&#xA;                }&#xD;&#xA;            } else {&#xD;&#xA;&#x9;&#x9;&#x9;    Write-Warning &quot;Cannot detect CU/SP via Remote Registry for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;    }&#xD;&#xA;        }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;# Exchange 2003&#xD;&#xA;&#x9;if ($ExchangeMajorVersion -eq 6.5)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Mailbox Count&#xD;&#xA;&#x9;&#x9;$MailboxCount = _GetExSvrMailboxCount -Mailboxes $Mailboxes -ExchangeServer $ExchangeServer -Databases $Databases&#xD;&#xA;&#x9;&#x9;# Get Role via WMI&#xD;&#xA;&#x9;&#x9;$tWMI = Get-WMIObject Exchange_Server -Namespace &quot;root\microsoftexchangev2&quot; -Computername $ExchangeServer.Name -Filter &quot;Name='$($ExchangeServer.Name)'&quot;&#xD;&#xA;&#x9;&#x9;if ($tWMI)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if ($tWMI.IsFrontEndServer) { $Roles=@(&quot;FE&quot;) } else { $Roles=@(&quot;BE&quot;) }&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot detect Front End/Back End Server information via WMI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$Roles+=&quot;Unknown&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;# Get Mailbox Statistics using WMI, return in a consistent format&#xD;&#xA;&#x9;&#x9;$tWMI = Get-WMIObject -class Exchange_Mailbox -Namespace ROOT\MicrosoftExchangev2 -ComputerName $ExchangeServer.Name -Filter (&quot;ServerName='$($ExchangeServer.Name)'&quot;)&#xD;&#xA;&#x9;&#x9;if ($tWMI)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$MailboxStatistics = $tWMI | Select @{Name=&quot;DisplayName&quot;;Expression={$_.MailboxDisplayName}},@{Name=&quot;TotalItemSizeB&quot;;Expression={$_.Size}},@{Name=&quot;TotalDeletedItemSizeB&quot;;Expression={$_.DeletedMessageSizeExtended }},@{Name=&quot;Database&quot;;Expression={((get-mailboxdatabase -Identity &quot;$($_.ServerName)\$($_.StorageGroupName)\$($_.StoreName)&quot;).identity)}}&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot retrieve Mailbox Statistics via WMI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$MailboxStatistics = $null&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;&#x9;# Exchange 2000&#xD;&#xA;&#x9;if ($ExchangeMajorVersion -eq &quot;6.0&quot;)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Mailbox Count&#xD;&#xA;&#x9;&#x9;$MailboxCount = _GetExSvrMailboxCount -Mailboxes $Mailboxes -ExchangeServer $ExchangeServer -Databases $Databases&#xD;&#xA;&#x9;&#x9;# Get Role via ADSI&#xD;&#xA;&#x9;&#x9;$tADSI=[ADSI]&quot;LDAP://$($ExchangeServer.OriginatingServer)/$($ExchangeServer.DistinguishedName)&quot;&#xD;&#xA;&#x9;&#x9;if ($tADSI)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if ($tADSI.ServerRole -eq 1) { $Roles=@(&quot;FE&quot;) } else { $Roles=@(&quot;BE&quot;) }&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot detect Front End/Back End Server information via ADSI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$Roles+=&quot;Unknown&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$MailboxStatistics = $null&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Return Hashtable&#xD;&#xA;&#x9;@{Name&#x9;&#x9;&#x9;&#x9;&#x9;= $ExchangeServer.Name.ToUpper()&#xD;&#xA;&#x9; RealName&#x9;&#x9;&#x9;&#x9;= $RealName&#xD;&#xA;&#x9; ExchangeMajorVersion &#x9;= $ExchangeMajorVersion&#xD;&#xA;&#x9; ExchangeSPLevel&#x9;&#x9;= $ExchangeSPLevel&#xD;&#xA;&#x9; Edition&#x9;&#x9;&#x9;&#x9;= $ExchangeServer.Edition&#xD;&#xA;&#x9; Mailboxes&#x9;&#x9;&#x9;&#x9;= $MailboxCount&#xD;&#xA;&#x9; OSVersion&#x9;&#x9;&#x9;&#x9;= $OSVersion;&#xD;&#xA;&#x9; OSServicePack&#x9;&#x9;&#x9;= $OSServicePack&#xD;&#xA;&#x9; Roles&#x9;&#x9;&#x9;&#x9;&#x9;= $Roles&#xD;&#xA;&#x9; RollupLevel&#x9;&#x9;&#x9;= $RollupLevel&#xD;&#xA;&#x9; RollupVersion&#x9;&#x9;&#x9;= $RollupVersion&#xD;&#xA;&#x9; Site&#x9;&#x9;&#x9;&#x9;&#x9;= $ExchangeServer.Site.Name&#xD;&#xA;&#x9; MailboxStatistics&#x9;&#x9;= $MailboxStatistics&#xD;&#xA;&#x9; Disks&#x9;&#x9;&#x9;&#x9;&#x9;= $Disks&#xD;&#xA;     IntNames&#x9;&#x9;&#x9;&#x9;= $IntNames&#xD;&#xA;     ExtNames&#x9;&#x9;&#x9;&#x9;= $ExtNames&#xD;&#xA;     CASArrayName&#x9;&#x9;&#x9;= $CASArrayName&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub Function to Get Totals by Version&#xD;&#xA;function _TotalsByVersion&#xD;&#xA;{&#xD;&#xA;&#x9;param($ExchangeEnvironment)&#xD;&#xA;&#x9;$TotalMailboxesByVersion=@{}&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Sites)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;foreach ($Site in $ExchangeEnvironment.Sites.GetEnumerator())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Server in $Site.Value)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;])&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion.Add(&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;,@{ServerCount=1;MailboxCount=$Server.Mailboxes})&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].ServerCount++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].MailboxCount+=$Server.Mailboxes&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Pre2007)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;foreach ($FakeSite in $ExchangeEnvironment.Pre2007.GetEnumerator())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Server in $FakeSite.Value)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;])&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion.Add(&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;,@{ServerCount=1;MailboxCount=$Server.Mailboxes})&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].ServerCount++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].MailboxCount+=$Server.Mailboxes&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$TotalMailboxesByVersion&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub Function to Get Totals by Role&#xD;&#xA;function _TotalsByRole&#xD;&#xA;{&#xD;&#xA;&#x9;param($ExchangeEnvironment)&#xD;&#xA;&#x9;# Add Roles We Always Show&#xD;&#xA;&#x9;$TotalServersByRole=@{&quot;ClientAccess&quot; &#x9; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;HubTransport&quot; &#x9; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;UnifiedMessaging&quot; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;Mailbox&quot;&#x9;&#x9;&#x9; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;Edge&quot; &#x9;&#x9;&#x9; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  }&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Sites)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;foreach ($Site in $ExchangeEnvironment.Sites.GetEnumerator())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Server in $Site.Value)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;foreach ($Role in $Server.Roles)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ($TotalServersByRole[$Role] -eq $null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalServersByRole.Add($Role,1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalServersByRole[$Role]++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Pre2007[&quot;Pre 2007 Servers&quot;])&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;foreach ($Server in $ExchangeEnvironment.Pre2007[&quot;Pre 2007 Servers&quot;])&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Role in $Server.Roles)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($TotalServersByRole[$Role] -eq $null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalServersByRole.Add($Role,1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalServersByRole[$Role]++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$TotalServersByRole&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub Function to return HTML Table for Sites/Pre 2007&#xD;&#xA;function _GetOverview&#xD;&#xA;{&#xD;&#xA;&#x9;param($Servers,$ExchangeEnvironment,$ExRoleStrings,$Pre2007=$False)&#xD;&#xA;&#x9;if ($Pre2007)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$BGColHeader=&quot;#880099&quot;&#xD;&#xA;&#x9;&#x9;$BGColSubHeader=&quot;#8800CC&quot;&#xD;&#xA;&#x9;&#x9;$Prefix=&quot;&quot;&#xD;&#xA;        $IntNamesText=&quot;&quot;&#xD;&#xA;        $ExtNamesText=&quot;&quot;&#xD;&#xA;        $CASArrayText=&quot;&quot;&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$BGColHeader=&quot;#000099&quot;&#xD;&#xA;&#x9;&#x9;$BGColSubHeader=&quot;#0000FF&quot;&#xD;&#xA;&#x9;&#x9;$Prefix=&quot;Site:&quot;&#xD;&#xA;        $IntNamesText=&quot;&quot;&#xD;&#xA;        $ExtNamesText=&quot;&quot;&#xD;&#xA;        $CASArrayText=&quot;&quot;&#xD;&#xA;        $IntNames=@()&#xD;&#xA;        $ExtNames=@()&#xD;&#xA;        $CASArrayName=&quot;&quot;&#xD;&#xA;        foreach ($Server in $Servers.Value)&#xD;&#xA;        {&#xD;&#xA;            $IntNames+=$Server.IntNames&#xD;&#xA;            $ExtNames+=$Server.ExtNames&#xD;&#xA;            $CASArrayName=$Server.CASArrayName&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;        $IntNames = $IntNames|Sort -Unique&#xD;&#xA;        $ExtNames = $ExtNames|Sort -Unique&#xD;&#xA;        $IntNames = [system.String]::Join(&quot;,&quot;,$IntNames)&#xD;&#xA;        $ExtNames = [system.String]::Join(&quot;,&quot;,$ExtNames)&#xD;&#xA;        if ($IntNames)&#xD;&#xA;        {&#xD;&#xA;            $IntNamesText=&quot;Internal Names: $($IntNames)&quot;&#xD;&#xA;            $ExtNamesText=&quot;External Names: $($ExtNames)&lt;br &gt;&quot;&#xD;&#xA;        }&#xD;&#xA;        if ($CASArrayName)&#xD;&#xA;        {&#xD;&#xA;            $CASArrayText=&quot;CAS Array: $($CASArrayName)&quot;&#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output=&quot;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; width=&quot;&quot;100%&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&#x9;&lt;col width=&quot;&quot;20%&quot;&quot;&gt;&lt;col width=&quot;&quot;20%&quot;&quot;&gt;&#xD;&#xA;&#x9;&lt;colgroup width=&quot;&quot;25%&quot;&quot;&gt;&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;col width=&quot;&quot;3%&quot;&quot;&gt;&quot;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;/colgroup&gt;&lt;col width=&quot;&quot;20%&quot;&quot;&gt;&lt;col  width=&quot;&quot;20%&quot;&quot;&gt;&#xD;&#xA;&#x9;&lt;tr bgcolor=&quot;&quot;$($BGColHeader)&quot;&quot;&gt;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;$($Prefix) $($Servers.Key)&lt;/font&gt;&lt;/th&gt;&#xD;&#xA;&#x9;&lt;th colspan=&quot;&quot;$(($ExchangeEnvironment.TotalServersByRole.Count)+2)&quot;&quot; align=&quot;&quot;left&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;$($ExtNamesText)$($IntNamesText)&lt;/font&gt;&lt;/th&gt;&#xD;&#xA;&#x9;&lt;th align=&quot;&quot;center&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;$($CASArrayText)&lt;/font&gt;&lt;/th&gt;&lt;/tr&gt;&quot;&#xD;&#xA;&#x9;$TotalMailboxes=0&#xD;&#xA;&#x9;$Servers.Value | %{$TotalMailboxes += $_.Mailboxes}&#xD;&#xA;&#x9;$Output+=&quot;&lt;tr bgcolor=&quot;&quot;$($BGColSubHeader)&quot;&quot;&gt;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Mailboxes: $($TotalMailboxes)&lt;/font&gt;&lt;/th&gt;&lt;th&gt;&quot;&#xD;&#xA;    $Output+=&quot;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Exchange Version&lt;/font&gt;&lt;/th&gt;&quot;&#xD;&#xA;&#x9;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;$($ExRoleStrings[$_.Key].Short)&lt;/font&gt;&lt;/th&gt;&quot;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;OS Version&lt;/font&gt;&lt;/th&gt;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;OS Service Pack&lt;/font&gt;&lt;/th&gt;&lt;/tr&gt;&quot;&#xD;&#xA;&#x9;$AlternateRow=0&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;foreach ($Server in $Servers.Value)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;tr &quot;&#xD;&#xA;&#x9;&#x9;if ($AlternateRow)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot; style=&quot;&quot;background-color:#dddddd&quot;&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$AlternateRow=0&#xD;&#xA;&#x9;&#x9;} else&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$AlternateRow=1&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&gt;&lt;td&gt;$($Server.Name)&quot;&#xD;&#xA;&#x9;&#x9;if ($Server.RealName -ne $Server.Name)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot; ($($Server.RealName))&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;/td&gt;&lt;td&gt;$($ExVersionStrings[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].Long)&quot;&#xD;&#xA;&#x9;&#x9;if ($Server.RollupLevel -gt 0)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot; UR$($Server.RollupLevel)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if ($Server.RollupVersion)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Output+=&quot; $($Server.RollupVersion)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{ &#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if ($Server.Roles -contains $_.Key)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Output+=&quot; align=&quot;&quot;center&quot;&quot; style=&quot;&quot;background-color:#00FF00&quot;&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&gt;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if (($_.Key -eq &quot;ClusteredMailbox&quot; -or $_.Key -eq &quot;Mailbox&quot; -or $_.Key -eq &quot;BE&quot;) -and $Server.Roles -contains $_.Key) &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Output+=$Server.Mailboxes&#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;td&gt;$($Server.OSVersion)&lt;/td&gt;&lt;td&gt;$($Server.OSServicePack)&lt;/td&gt;&lt;/tr&gt;&quot;;&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;tr&gt;&lt;/tr&gt;&#xD;&#xA;&#x9;&lt;/table&gt;&lt;br /&gt;&quot;&#xD;&#xA;&#x9;$Output&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub Function to return HTML Table for Databases&#xD;&#xA;function _GetDBTable&#xD;&#xA;{&#xD;&#xA;&#x9;param($Databases)&#xD;&#xA;&#x9;# Only Show Archive Mailbox Columns, Backup Columns and Circ Logging if at least one DB has an Archive mailbox, backed up or Cir Log enabled.&#xD;&#xA;&#x9;$ShowArchiveDBs=$False&#xD;&#xA;&#x9;$ShowLastFullBackup=$False&#xD;&#xA;&#x9;$ShowCircularLogging=$False&#xD;&#xA;&#x9;$ShowStorageGroups=$False&#xD;&#xA;&#x9;$ShowCopies=$False&#xD;&#xA;&#x9;$ShowFreeDatabaseSpace=$False&#xD;&#xA;&#x9;$ShowFreeLogDiskSpace=$False&#xD;&#xA;&#x9;foreach ($Database in $Databases)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if ($Database.ArchiveMailboxCount -gt 0) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowArchiveDBs=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.LastFullBackup -ne &quot;Not Available&quot;) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowLastFullBackup=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.CircularLoggingEnabled -eq &quot;Yes&quot;) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowCircularLogging=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.StorageGroup) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowStorageGroups=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.CopyCount -gt 0) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowCopies=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.FreeDatabaseDiskSpace -ne $null)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowFreeDatabaseSpace=$true&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.FreeLogDiskSpace -ne $null)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowFreeLogDiskSpace=$true&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$Output=&quot;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; width=&quot;&quot;100%&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&lt;tr align=&quot;&quot;center&quot;&quot; bgcolor=&quot;&quot;#FFD700&quot;&quot;&gt;&#xD;&#xA;&#x9;&lt;th&gt;Server&lt;/th&gt;&quot;&#xD;&#xA;&#x9;if ($ShowStorageGroups)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Storage Group&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;th&gt;Database Name&lt;/th&gt;&#xD;&#xA;&#x9;&lt;th&gt;Mailboxes&lt;/th&gt;&#xD;&#xA;&#x9;&lt;th&gt;Av. Mailbox Size&lt;/th&gt;&quot;&#xD;&#xA;&#x9;if ($ShowArchiveDBs)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Archive MBs&lt;/th&gt;&lt;th&gt;Av. Archive Size&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;th&gt;DB Size&lt;/th&gt;&lt;th&gt;DB Whitespace&lt;/th&gt;&quot;&#xD;&#xA;&#x9;if ($ShowFreeDatabaseSpace)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Database Disk Free&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ShowFreeLogDiskSpace)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Log Disk Free&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ShowLastFullBackup)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Last Full Backup&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ShowCircularLogging)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Circular Logging&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ShowCopies)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Copies (n)&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$Output+=&quot;&lt;/tr&gt;&quot;&#xD;&#xA;&#x9;$AlternateRow=0;&#xD;&#xA;&#x9;foreach ($Database in $Databases)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;tr&quot;&#xD;&#xA;&#x9;&#x9;if ($AlternateRow)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot; style=&quot;&quot;background-color:#dddddd&quot;&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$AlternateRow=0&#xD;&#xA;&#x9;&#x9;} else&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$AlternateRow=1&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&gt;&lt;td&gt;$($Database.ActiveOwner)&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;if ($ShowStorageGroups)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td&gt;$($Database.StorageGroup)&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;td&gt;$($Database.Name)&lt;/td&gt;&#xD;&#xA;&#x9;&#x9;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$($Database.MailboxCount)&lt;/td&gt;&#xD;&#xA;&#x9;&#x9;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N2}&quot; -f ($Database.MailboxAverageSize/1MB)) MB&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;if ($ShowArchiveDBs)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$($Database.ArchiveMailboxCount)&lt;/td&gt; &#xD;&#xA;&#x9;&#x9;&#x9;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N2}&quot; -f ($Database.ArchiveAverageSize/1MB)) MB&lt;/td&gt;&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N2}&quot; -f ($Database.Size/1GB)) GB &lt;/td&gt;&#xD;&#xA;&#x9;&#x9;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N2}&quot; -f ($Database.Whitespace/1GB)) GB&lt;/td&gt;&quot;;&#xD;&#xA;&#x9;&#x9;if ($ShowFreeDatabaseSpace)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N1}&quot; -f $Database.FreeDatabaseDiskSpace)%&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($ShowFreeLogDiskSpace)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N1}&quot; -f $Database.FreeLogDiskSpace)%&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($ShowLastFullBackup)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$($Database.LastFullBackup)&lt;/td&gt;&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($ShowCircularLogging)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$($Database.CircularLoggingEnabled)&lt;/td&gt;&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($ShowCopies)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td&gt;$($Database.Copies|%{$_}) ($($Database.CopyCount))&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;/tr&gt;&quot;;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;/table&gt;&lt;br /&gt;&quot;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$Output&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Sub Function to neatly update progress&#xD;&#xA;function _UpProg1&#xD;&#xA;{&#xD;&#xA;&#x9;param($PercentComplete,$Status,$Stage)&#xD;&#xA;&#x9;$TotalStages=5&#xD;&#xA;&#x9;Write-Progress -id 1 -activity &quot;Get-ExchangeEnvironmentReport&quot; -status $Status -percentComplete (($PercentComplete/$TotalStages)+(1/$TotalStages*$Stage*100))&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1. Initial Startup&#xD;&#xA;&#xD;&#xA;# 1.0 Check Powershell Version&#xD;&#xA;if ((Get-Host).Version.Major -eq 1)&#xD;&#xA;{&#xD;&#xA;&#x9;throw &quot;Powershell Version 1 not supported&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.1 Check Exchange Management Shell, attempt to load&#xD;&#xA;if (!(Get-Command Get-ExchangeServer -ErrorAction SilentlyContinue))&#xD;&#xA;{&#xD;&#xA;&#x9;if (Test-Path &quot;C:\Program Files\Microsoft\Exchange Server\V14\bin\RemoteExchange.ps1&quot;)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;. 'C:\Program Files\Microsoft\Exchange Server\V14\bin\RemoteExchange.ps1'&#xD;&#xA;&#x9;&#x9;Connect-ExchangeServer -auto&#xD;&#xA;&#x9;} elseif (Test-Path &quot;C:\Program Files\Microsoft\Exchange Server\bin\Exchange.ps1&quot;) {&#xD;&#xA;&#x9;&#x9;Add-PSSnapIn Microsoft.Exchange.Management.PowerShell.Admin&#xD;&#xA;&#x9;&#x9;.'C:\Program Files\Microsoft\Exchange Server\bin\Exchange.ps1'&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;throw &quot;Exchange Management Shell cannot be loaded&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.2 Check if -SendMail parameter set and if so check -MailFrom, -MailTo and -MailServer are set&#xD;&#xA;if ($SendMail)&#xD;&#xA;{&#xD;&#xA;&#x9;if (!$MailFrom -or !$MailTo -or !$MailServer)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;throw &quot;If -SendMail specified, you must also specify -MailFrom, -MailTo and -MailServer&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.3 Check Exchange Management Shell Version&#xD;&#xA;if ((Get-PSSnapin -Name Microsoft.Exchange.Management.PowerShell.Admin -ErrorAction SilentlyContinue))&#xD;&#xA;{&#xD;&#xA;&#x9;$E2010 = $false;&#xD;&#xA;&#x9;if (Get-ExchangeServer | Where {$_.AdminDisplayVersion.Major -gt 14})&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;Write-Warning &quot;Exchange 2010 or higher detected. You'll get better results if you run this script from an Exchange 2010/2013 management shell&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;}else{&#xD;&#xA;    &#xD;&#xA;    $E2010 = $true&#xD;&#xA;    $localserver = get-exchangeserver $Env:computername&#xD;&#xA;    $localversion = $localserver.admindisplayversion.major&#xD;&#xA;    if ($localversion -eq 15) { $E2013 = $true }&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.4 Check view entire forest if set (by default, true)&#xD;&#xA;if ($E2010)&#xD;&#xA;{&#xD;&#xA;&#x9;Set-ADServerSettings -ViewEntireForest:$ViewEntireForest&#xD;&#xA;} else {&#xD;&#xA;&#x9;$global:AdminSessionADSettings.ViewEntireForest = $ViewEntireForest&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.5 Initial Variables&#xD;&#xA;&#xD;&#xA;# 1.5.1 Hashtable to update with environment data&#xD;&#xA;$ExchangeEnvironment = @{Sites&#x9;&#x9;&#x9;&#x9;&#x9;= @{}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; Pre2007&#x9;&#x9;&#x9;&#x9;= @{}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; Servers&#x9;&#x9;&#x9;&#x9;= @{}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; DAGs&#x9;&#x9;&#x9;&#x9;&#x9;= @()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; NonDAGDatabases&#x9;&#x9;= @()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;# 1.5.7 Exchange Major Version String Mapping&#xD;&#xA;$ExMajorVersionStrings = @{&quot;6.0&quot; = @{Long=&quot;Exchange 2000&quot;;Short=&quot;E2000&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;   &quot;6.5&quot; = @{Long=&quot;Exchange 2003&quot;;Short=&quot;E2003&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;   &quot;8&quot;   = @{Long=&quot;Exchange 2007&quot;;Short=&quot;E2007&quot;}&#xD;&#xA;                           &quot;14&quot;  = @{Long=&quot;Exchange 2010&quot;;Short=&quot;E2010&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &quot;15&quot;  = @{Long=&quot;Exchange 2013&quot;;Short=&quot;E2013&quot;}&#xD;&#xA;                           &quot;16&quot;  = @{Long=&quot;Exchange 2013&quot;;Short=&quot;E2013&quot;}}&#xD;&#xA;# 1.5.8 Exchange Service Pack String Mapping&#xD;&#xA;$ExSPLevelStrings = @{&quot;0&quot; = &quot;RTM&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;1&quot; = &quot;SP1&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;      &quot;2&quot; = &quot;SP2&quot;&#xD;&#xA;&#x9;&#x9;&#x9;          &quot;3&quot; = &quot;SP3&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;      &quot;4&quot; = &quot;SP4&quot;&#xD;&#xA;                      &quot;CU1&quot; = &quot;CU1&quot;&#xD;&#xA;                      &quot;CU2&quot; = &quot;CU2&quot;&#xD;&#xA;                      &quot;CU3&quot; = &quot;CU3&quot;&#xD;&#xA;                      &quot;CU4&quot; = &quot;CU4&quot;&#xD;&#xA;                      &quot;CU5&quot; = &quot;CU5&quot;&#xD;&#xA;                      &quot;SP1&quot; = &quot;SP1&quot;&#xD;&#xA;                      &quot;SP2&quot; = &quot;SP2&quot;}&#xD;&#xA;# 1.5.9 Populate Full Mapping using above info&#xD;&#xA;$ExVersionStrings = @{}&#xD;&#xA;foreach ($Major in $ExMajorVersionStrings.GetEnumerator())&#xD;&#xA;{&#xD;&#xA;&#x9;foreach ($Minor in $ExSPLevelStrings.GetEnumerator())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$ExVersionStrings.Add(&quot;$($Major.Key).$($Minor.Key)&quot;,@{Long=&quot;$($Major.Value.Long) $($Minor.Value)&quot;;Short=&quot;$($Major.Value.Short)$($Minor.Value)&quot;})&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;# 1.5.10 Exchange Role String Mapping&#xD;&#xA;$ExRoleStrings = @{&quot;ClusteredMailbox&quot; = @{Short=&quot;ClusMBX&quot;;Long=&quot;CCR/SCC Clustered Mailbox&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;Mailbox&quot;&#x9;&#x9;  = @{Short=&quot;MBX&quot;;Long=&quot;Mailbox&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;ClientAccess&quot;&#x9;  = @{Short=&quot;CAS&quot;;Long=&quot;Client Access&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;HubTransport&quot;&#x9;  = @{Short=&quot;HUB&quot;;Long=&quot;Hub Transport&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;UnifiedMessaging&quot; = @{Short=&quot;UM&quot;;Long=&quot;Unified Messaging&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;Edge&quot;&#x9;&#x9;&#x9;  = @{Short=&quot;EDGE&quot;;Long=&quot;Edge Transport&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;FE&quot;&#x9;&#x9;&#x9;  = @{Short=&quot;FE&quot;;Long=&quot;Front End&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;BE&quot;&#x9;&#x9;&#x9;  = @{Short=&quot;BE&quot;;Long=&quot;Back End&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;Unknown&quot;&#x9;  = @{Short=&quot;Unknown&quot;;Long=&quot;Unknown&quot;}}&#xD;&#xA;&#xD;&#xA;# 2 Get Relevant Exchange Information Up-Front&#xD;&#xA;&#xD;&#xA;# 2.1 Get Server, Exchange and Mailbox Information&#xD;&#xA;_UpProg1 1 &quot;Getting Exchange Server List&quot; 1&#xD;&#xA;$ExchangeServers = [array](Get-ExchangeServer $ServerFilter)&#xD;&#xA;if (!$ExchangeServers)&#xD;&#xA;{&#xD;&#xA;&#x9;throw &quot;No Exchange Servers matched by -ServerFilter &quot;&quot;$($ServerFilter)&quot;&quot;&quot;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;_UpProg1 10 &quot;Getting Mailboxes&quot; 1&#xD;&#xA;$Mailboxes = [array](Get-Mailbox -ResultSize Unlimited) | Where {$_.Server -like $ServerFilter}&#xD;&#xA;if ($E2010)&#xD;&#xA;{ &#xD;&#xA;&#x9;_UpProg1 60 &quot;Getting Archive Mailboxes&quot; 1&#xD;&#xA;&#x9;$ArchiveMailboxes = [array](Get-Mailbox -Archive -ResultSize Unlimited) | Where {$_.Server -like $ServerFilter}&#xD;&#xA;    _UpProg1 70 &quot;Getting Remote Mailboxes&quot; 1&#xD;&#xA;    $RemoteMailboxes = [array](Get-RemoteMailbox  -ResultSize Unlimited)&#xD;&#xA;    $ExchangeEnvironment.Add(&quot;RemoteMailboxes&quot;,$RemoteMailboxes.Count)&#xD;&#xA;&#x9;_UpProg1 90 &quot;Getting Databases&quot; 1&#xD;&#xA;    if ($E2013) &#xD;&#xA;    {&#x9;&#xD;&#xA;        $Databases = [array](Get-MailboxDatabase -IncludePreExchange2013 -Status)  | Where {$_.Server -like $ServerFilter} &#xD;&#xA;    }&#xD;&#xA;    elseif ($E2010)&#xD;&#xA;    {&#x9;&#xD;&#xA;        $Databases = [array](Get-MailboxDatabase -IncludePreExchange2010 -Status)  | Where {$_.Server -like $ServerFilter} &#xD;&#xA;    }&#xD;&#xA;&#x9;$DAGs = [array](Get-DatabaseAvailabilityGroup) | Where {$_.Servers -like $ServerFilter}&#xD;&#xA;} else {&#xD;&#xA;&#x9;$ArchiveMailboxes = $null&#xD;&#xA;&#x9;$ArchiveMailboxStats = $null&#x9;&#xD;&#xA;&#x9;$DAGs = $null&#xD;&#xA;&#x9;_UpProg1 90 &quot;Getting Databases&quot; 1&#xD;&#xA;&#x9;$Databases = [array](Get-MailboxDatabase -IncludePreExchange2007 -Status) | Where {$_.Server -like $ServerFilter}&#xD;&#xA;    $ExchangeEnvironment.Add(&quot;RemoteMailboxes&quot;,0)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 2.3 Populate Information we know&#xD;&#xA;$ExchangeEnvironment.Add(&quot;TotalMailboxes&quot;,$Mailboxes.Count + $ExchangeEnvironment.RemoteMailboxes);&#xD;&#xA;&#xD;&#xA;# 3 Process High-Level Exchange Information&#xD;&#xA;&#xD;&#xA;# 3.1 Collect Exchange Server Information&#xD;&#xA;for ($i=0; $i -lt $ExchangeServers.Count; $i++)&#xD;&#xA;{&#xD;&#xA;&#x9;_UpProg1 ($i/$ExchangeServers.Count*100) &quot;Getting Exchange Server Information&quot; 2&#xD;&#xA;&#x9;# Get Exchange Info&#xD;&#xA;&#x9;$ExSvr = _GetExSvr -E2010 $E2010 -ExchangeServer $ExchangeServers[$i] -Mailboxes $Mailboxes -Databases $Databases&#xD;&#xA;&#x9;# Add to site or pre-Exchange 2007 list&#xD;&#xA;&#x9;if ($ExSvr.Site)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Exchange 2007 or higher&#xD;&#xA;&#x9;&#x9;if (!$ExchangeEnvironment.Sites[$ExSvr.Site])&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.Sites.Add($ExSvr.Site,@($ExSvr))&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.Sites[$ExSvr.Site]+=$ExSvr&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;# Exchange 2003 or lower&#xD;&#xA;&#x9;&#x9;if (!$ExchangeEnvironment.Pre2007[&quot;Pre 2007 Servers&quot;])&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.Pre2007.Add(&quot;Pre 2007 Servers&quot;,@($ExSvr))&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.Pre2007[&quot;Pre 2007 Servers&quot;]+=$ExSvr&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;# Add to Servers List&#xD;&#xA;&#x9;$ExchangeEnvironment.Servers.Add($ExSvr.Name,$ExSvr)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 3.2 Calculate Environment Totals for Version/Role using collected data&#xD;&#xA;_UpProg1 1 &quot;Getting Totals&quot; 3&#xD;&#xA;$ExchangeEnvironment.Add(&quot;TotalMailboxesByVersion&quot;,(_TotalsByVersion -ExchangeEnvironment $ExchangeEnvironment))&#xD;&#xA;$ExchangeEnvironment.Add(&quot;TotalServersByRole&quot;,(_TotalsByRole -ExchangeEnvironment $ExchangeEnvironment))&#xD;&#xA;&#xD;&#xA;# 3.4 Populate Environment DAGs&#xD;&#xA;_UpProg1 5 &quot;Getting DAG Info&quot; 3&#xD;&#xA;if ($DAGs)&#xD;&#xA;{&#xD;&#xA;&#x9;foreach($DAG in $DAGs)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$ExchangeEnvironment.DAGs+=(_GetDAG -DAG $DAG)&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 3.5 Get Database information&#xD;&#xA;_UpProg1 60 &quot;Getting Database Info&quot; 3&#xD;&#xA;for ($i=0; $i -lt $Databases.Count; $i++)&#xD;&#xA;{&#xD;&#xA;&#x9;$Database = _GetDB -Database $Databases[$i] -ExchangeEnvironment $ExchangeEnvironment -Mailboxes $Mailboxes -ArchiveMailboxes $ArchiveMailboxes -E2010 $E2010&#xD;&#xA;&#x9;$DAGDB = $false&#xD;&#xA;&#x9;for ($j=0; $j -lt $ExchangeEnvironment.DAGs.Count; $j++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if ($ExchangeEnvironment.DAGs[$j].Members -contains $Database.ActiveOwner)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$DAGDB=$true&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.DAGs[$j].Databases += $Database&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (!$DAGDB)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$ExchangeEnvironment.NonDAGDatabases += $Database&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 4 Write Information&#xD;&#xA;_UpProg1 5 &quot;Writing HTML Report Header&quot; 4&#xD;&#xA;# Header&#xD;&#xA;$Output=&quot;&lt;html&gt;&#xD;&#xA;&lt;body&gt;&#xD;&#xA;&lt;font size=&quot;&quot;1&quot;&quot; face=&quot;&quot;Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&lt;h3 align=&quot;&quot;center&quot;&quot;&gt;Exchange Environment Report&lt;/h3&gt;&#xD;&#xA;&lt;h5 align=&quot;&quot;center&quot;&quot;&gt;Generated $((Get-Date).ToString())&lt;/h5&gt;&#xD;&#xA;&lt;/font&gt;&#xD;&#xA;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&lt;tr bgcolor=&quot;&quot;#009900&quot;&quot;&gt;&#xD;&#xA;&lt;th colspan=&quot;&quot;$($ExchangeEnvironment.TotalMailboxesByVersion.Count)&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Total Servers:&lt;/font&gt;&lt;/th&gt;&quot;&#xD;&#xA;if ($ExchangeEnvironment.RemoteMailboxes)&#xD;&#xA;    {&#xD;&#xA;    $Output+=&quot;&lt;th colspan=&quot;&quot;$($ExchangeEnvironment.TotalMailboxesByVersion.Count+2)&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Total Mailboxes:&lt;/font&gt;&lt;/th&gt;&quot;&#xD;&#xA;    } else {&#xD;&#xA;    $Output+=&quot;&lt;th colspan=&quot;&quot;$($ExchangeEnvironment.TotalMailboxesByVersion.Count+1)&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Total Mailboxes:&lt;/font&gt;&lt;/th&gt;&quot;&#xD;&#xA;    }&#xD;&#xA;$Output+=&quot;&lt;th colspan=&quot;&quot;$($ExchangeEnvironment.TotalServersByRole.Count)&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Total Roles:&lt;/font&gt;&lt;/th&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr bgcolor=&quot;&quot;#00CC00&quot;&quot;&gt;&quot;&#xD;&#xA;# Show Column Headings based on the Exchange versions we have&#xD;&#xA;$ExchangeEnvironment.TotalMailboxesByVersion.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;th&gt;$($ExVersionStrings[$_.Key].Short)&lt;/th&gt;&quot;}&#xD;&#xA;$ExchangeEnvironment.TotalMailboxesByVersion.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;th&gt;$($ExVersionStrings[$_.Key].Short)&lt;/th&gt;&quot;}&#xD;&#xA;if ($ExchangeEnvironment.RemoteMailboxes)&#xD;&#xA;{&#xD;&#xA;    $Output+=&quot;&lt;th&gt;Office 365&lt;/th&gt;&quot;&#xD;&#xA;}&#xD;&#xA;$Output+=&quot;&lt;th&gt;Org&lt;/th&gt;&quot;&#xD;&#xA;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;th&gt;$($ExRoleStrings[$_.Key].Short)&lt;/th&gt;&quot;}&#xD;&#xA;$Output+=&quot;&lt;tr&gt;&quot;&#xD;&#xA;$Output+=&quot;&lt;tr align=&quot;&quot;center&quot;&quot; bgcolor=&quot;&quot;#dddddd&quot;&quot;&gt;&quot;&#xD;&#xA;$ExchangeEnvironment.TotalMailboxesByVersion.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;td&gt;$($_.Value.ServerCount)&lt;/td&gt;&quot; }&#xD;&#xA;$ExchangeEnvironment.TotalMailboxesByVersion.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;td&gt;$($_.Value.MailboxCount)&lt;/td&gt;&quot; }&#xD;&#xA;if ($RemoteMailboxes)&#xD;&#xA;{&#xD;&#xA;    $Output+=&quot;&lt;th&gt;$($ExchangeEnvironment.RemoteMailboxes)&lt;/th&gt;&quot;&#xD;&#xA;}&#xD;&#xA;$Output+=&quot;&lt;td&gt;$($ExchangeEnvironment.TotalMailboxes)&lt;/td&gt;&quot;&#xD;&#xA;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;td&gt;$($_.Value)&lt;/td&gt;&quot;}&#xD;&#xA;$Output+=&quot;&lt;/tr&gt;&lt;tr&gt;&lt;tr&gt;&lt;/table&gt;&lt;br&gt;&quot;&#xD;&#xA;&#xD;&#xA;# Sites and Servers&#xD;&#xA;_UpProg1 20 &quot;Writing HTML Site Information&quot; 4&#xD;&#xA;foreach ($Site in $ExchangeEnvironment.Sites.GetEnumerator())&#xD;&#xA;{&#xD;&#xA;&#x9;$Output+=_GetOverview -Servers $Site -ExchangeEnvironment $ExchangeEnvironment -ExRoleStrings $ExRoleStrings&#xD;&#xA;}&#xD;&#xA;_UpProg1 40 &quot;Writing HTML Pre-2007 Information&quot; 4&#xD;&#xA;foreach ($FakeSite in $ExchangeEnvironment.Pre2007.GetEnumerator())&#xD;&#xA;{&#xD;&#xA;&#x9;$Output+=_GetOverview -Servers $FakeSite -ExchangeEnvironment $ExchangeEnvironment -ExRoleStrings $ExRoleStrings -Pre2007:$true&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;_UpProg1 60 &quot;Writing HTML DAG Information&quot; 4&#xD;&#xA;foreach ($DAG in $ExchangeEnvironment.DAGs)&#xD;&#xA;{&#xD;&#xA;&#x9;if ($DAG.MemberCount -gt 0)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Database Availability Group Header&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; width=&quot;&quot;100%&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&#x9;&#x9;&lt;col width=&quot;&quot;20%&quot;&quot;&gt;&lt;col width=&quot;&quot;10%&quot;&quot;&gt;&lt;col width=&quot;&quot;70%&quot;&quot;&gt;&#xD;&#xA;&#x9;&#x9;&lt;tr align=&quot;&quot;center&quot;&quot; bgcolor=&quot;&quot;#FF8000 &quot;&quot;&gt;&lt;th&gt;Database Availability Group Name&lt;/th&gt;&lt;th&gt;Member Count&lt;/th&gt;&#xD;&#xA;&#x9;&#x9;&lt;th&gt;Database Availability Group Members&lt;/th&gt;&lt;/tr&gt;&#xD;&#xA;&#x9;&#x9;&lt;tr&gt;&lt;td&gt;$($DAG.Name)&lt;/td&gt;&lt;td align=&quot;&quot;center&quot;&quot;&gt;&#xD;&#xA;&#x9;&#x9;$($DAG.MemberCount)&lt;/td&gt;&lt;td&gt;&quot;&#xD;&#xA;&#x9;&#x9;$DAG.Members | % { $Output+=&quot;$($_) &quot; }&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;# Get Table HTML&#xD;&#xA;&#x9;&#x9;$Output+=_GetDBTable -Databases $DAG.Databases&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if ($ExchangeEnvironment.NonDAGDatabases.Count)&#xD;&#xA;{&#xD;&#xA;&#x9;_UpProg1 80 &quot;Writing HTML Non-DAG Database Information&quot; 4&#xD;&#xA;&#x9;$Output+=&quot;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; width=&quot;&quot;100%&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;    &#x9;  &lt;tr bgcolor=&quot;&quot;#FF8000&quot;&quot;&gt;&lt;th&gt;Mailbox Databases (Non-DAG)&lt;/th&gt;&lt;/table&gt;&quot;&#xD;&#xA;&#x9;$Output+=_GetDBTable -Databases $ExchangeEnvironment.NonDAGDatabases&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# End&#xD;&#xA;_UpProg1 90 &quot;Finishing off..&quot; 4&#xD;&#xA;$Output+=&quot;&lt;/body&gt;&lt;/html&gt;&quot;;&#xD;&#xA;$Output | Out-File $HTMLReport&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if ($SendMail)&#xD;&#xA;{&#xD;&#xA;&#x9;_UpProg1 95 &quot;Sending mail message..&quot; 4&#xD;&#xA;&#x9;Send-MailMessage -Attachments $HTMLReport -To $MailTo -From $MailFrom -Subject &quot;Exchange Environment Report&quot; -BodyAsHtml $Output -SmtpServer $MailServer&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if ($ScheduleAs)&#xD;&#xA;{&#xD;&#xA;&#x9;_UpProg1 99 &quot;Attempting to Schedule Task..&quot; 4&#xD;&#xA;&#x9;$dir=(split-path -parent $myinvocation.mycommand.definition)&#xD;&#xA;&#x9;$params=&quot;-HTMLReport $HTMLReport&quot;&#xD;&#xA;&#x9;if ($SendMail)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$params+=' -SendMail:$true'&#xD;&#xA;&#x9;&#x9;$params+=&quot; -MailFrom:$MailFrom -MailTo:$MailTo -MailServer:$MailServer&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$task = &quot;powershell -c \&quot;&quot;pushd $dir; $($myinvocation.mycommand.definition) $params\&quot;&quot;&quot;&#xD;&#xA;&#x9;Write-Output &quot;Attempting to schedule task as $($ScheduleAs)...&quot;&#xD;&#xA;&#x9;Write-Output &quot;Task to schedule: $($task)&quot;&#xD;&#xA;&#x9;schtasks /Create /RU $ScheduleAs /RP /SC DAILY /ST 22:00 /TN EER /TR $task&#xD;&#xA;}" />
  <Code Content="&lt;#&#xD;&#xA;    .SYNOPSIS&#xD;&#xA;    Creates a HTML Report describing the Exchange environment &#xD;&#xA;   &#xD;&#xA;   &#x9;Steve Goodman&#xD;&#xA;    (Updates in v1.5.6 by Neil Johnson to support Exchange Server 2013)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;THIS CODE IS MADE AVAILABLE AS IS, WITHOUT WARRANTY OF ANY KIND. THE ENTIRE &#xD;&#xA;&#x9;RISK OF THE USE OR THE RESULTS FROM THE USE OF THIS CODE REMAINS WITH THE USER.&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;Version 1.5.8&#xD;&#xA;&#x9;&#xD;&#xA;    .DESCRIPTION&#xD;&#xA;&#x9;&#xD;&#xA;    This script creates a HTML report showing the following information about an Exchange &#xD;&#xA;    2013, 2010 and to a lesser extent, 2007 and 2003, environment. &#xD;&#xA;    &#xD;&#xA;    The following is shown:&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;* Report Generation Time&#xD;&#xA;&#x9;* Total Servers per Exchange Version (2003 &gt; 2010 or 2007 &gt; 2013)&#xD;&#xA;&#x9;* Total Mailboxes per Exchange Version, Office 365 and Organisation&#xD;&#xA;&#x9;* Total Roles in the environment&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;Then, per site:&#xD;&#xA;&#x9;* Total Mailboxes per site&#xD;&#xA;    * Internal, External and CAS Array Hostnames&#xD;&#xA;&#x9;* Exchange Servers with:&#xD;&#xA;&#x9;&#x9;o Exchange Server Version&#xD;&#xA;&#x9;&#x9;o Service Pack&#xD;&#xA;&#x9;&#x9;o Update Rollup and rollup version&#xD;&#xA;&#x9;&#x9;o Roles installed on server and mailbox counts&#xD;&#xA;&#x9;&#x9;o OS Version and Service Pack&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;Then, per Database availability group (Exchange 2010/2013):&#xD;&#xA;&#x9;* Total members per DAG&#xD;&#xA;&#x9;* Member list&#xD;&#xA;&#x9;* Databases, detailing:&#xD;&#xA;&#x9;&#x9;o Mailbox Count and Average Size&#xD;&#xA;&#x9;&#x9;o Archive Mailbox Count and Average Size (Only shown if DAG includes Archive Mailboxes)&#xD;&#xA;&#x9;&#x9;o Database Size and whitespace&#xD;&#xA;&#x9;&#x9;o Database and log disk free&#xD;&#xA;&#x9;&#x9;o Last Full Backup (Only shown if one or more DAG database has been backed up)&#xD;&#xA;&#x9;&#x9;o Circular Logging Enabled (Only shown if one or more DAG database has Circular Logging enabled)&#xD;&#xA;&#x9;&#x9;o Mailbox server hosting active copy&#xD;&#xA;&#x9;&#x9;o List of mailbox servers hosting copies and number of copies&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;Finally, per Database (Non DAG DBs/Exchange 2007/Exchange 2003)&#xD;&#xA;&#x9;* Databases, detailing:&#xD;&#xA;&#x9;&#x9;o Storage Group (if applicable) and DB name&#xD;&#xA;&#x9;&#x9;o Server hosting database&#xD;&#xA;&#x9;&#x9;o Mailbox Count and Average Size&#xD;&#xA;&#x9;&#x9;o Archive Mailbox Count and Average Size (Only shown if DAG includes Archive Mailboxes)&#xD;&#xA;&#x9;&#x9;o Database Size and whitespace&#xD;&#xA;&#x9;&#x9;o Database and log disk free&#xD;&#xA;&#x9;&#x9;o Last Full Backup (Only shown if one or more DAG database has been backed up)&#xD;&#xA;&#x9;&#x9;o Circular Logging Enabled (Only shown if one or more DAG database has Circular Logging enabled)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;This does not detail public folder infrastructure, or examine Exchange 2007/2003 CCR/SCC clusters&#xD;&#xA;&#x9;(although it attempts to detect Clustered Exchange 2007/2003 servers, signified by ClusMBX).&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;IMPORTANT NOTE: The script requires WMI and Remote Registry access to Exchange servers from the server &#xD;&#xA;&#x9;it is run from to determine OS version, Update Rollup, Exchange 2007/2003 cluster and DB size information.&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER HTMLReport&#xD;&#xA;    Filename to write HTML Report to&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER SendMail&#xD;&#xA;&#x9;Send Mail after completion. Set to $True to enable. If enabled, -MailFrom, -MailTo, -MailServer are mandatory&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER MailFrom&#xD;&#xA;&#x9;Email address to send from. Passed directly to Send-MailMessage as -From&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER MailTo&#xD;&#xA;&#x9;Email address to send to. Passed directly to Send-MailMessage as -To&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER MailServer&#xD;&#xA;&#x9;SMTP Mail server to attempt to send through. Passed directly to Send-MailMessage as -SmtpServer&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;.PARAMETER ScheduleAs&#xD;&#xA;&#x9;Attempt to schedule the command just executed for 10PM nightly. Specify the username here, schtasks (under the hood) will ask for a password later.&#xD;&#xA;    &#xD;&#xA;&#x9;.PARAMETER ViewEntireForest&#xD;&#xA;&#x9;By default, true. Set the option in Exchange 2007 or 2010 to view all Exchange servers and recipients in the forest.&#xD;&#xA;   &#xD;&#xA;    .PARAMETER ServerFilter&#xD;&#xA;&#x9;Use a text based string to filter Exchange Servers by, e.g. NL-* -  Note the use of the wildcard (*) character to allow for multiple matches.&#xD;&#xA;    &#xD;&#xA;&#x9;.EXAMPLE&#xD;&#xA;    Generate the HTML report &#xD;&#xA;    .\Get-ExchangeEnvironmentReport.ps1 -HTMLReport .\report.html&#xD;&#xA;&#x9;&#xD;&#xA;    #&gt;&#xD;&#xA;param(&#xD;&#xA;    [parameter(Position=0,Mandatory=$true,ValueFromPipeline=$false,HelpMessage='Filename to write HTML report to')][string]$HTMLReport,&#xD;&#xA;&#x9;[parameter(Position=1,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Send Mail ($True/$False)')][bool]$SendMail=$false,&#xD;&#xA;&#x9;[parameter(Position=2,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Mail From')][string]$MailFrom,&#xD;&#xA;&#x9;[parameter(Position=3,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Mail To')]$MailTo,&#xD;&#xA;&#x9;[parameter(Position=4,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Mail Server')][string]$MailServer,&#xD;&#xA;&#x9;[parameter(Position=4,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Schedule as user')][string]$ScheduleAs,&#xD;&#xA;&#x9;[parameter(Position=5,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Change view to entire forest')][bool]$ViewEntireForest=$true,&#xD;&#xA;&#x9;[parameter(Position=5,Mandatory=$false,ValueFromPipeline=$false,HelpMessage='Server Name Filter (eg NL-*)')][string]$ServerFilter=&quot;*&quot;&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;# Sub-Function to Get Database Information. Shorter than expected..&#xD;&#xA;function _GetDAG&#xD;&#xA;{&#xD;&#xA;&#x9;param($DAG)&#xD;&#xA;&#x9;@{Name&#x9;&#x9;&#x9;= $DAG.Name.ToUpper()&#xD;&#xA;&#x9;  MemberCount&#x9;= $DAG.Servers.Count&#xD;&#xA;&#x9;  Members&#x9;&#x9;= [array]($DAG.Servers | % { $_.Name })&#xD;&#xA;&#x9;  Databases&#x9;&#x9;= @()&#xD;&#xA;&#x9;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Sub-Function to Get Database Information&#xD;&#xA;function _GetDB&#xD;&#xA;{&#xD;&#xA;&#x9;param($Database,$ExchangeEnvironment,$Mailboxes,$ArchiveMailboxes,$E2010)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Circular Logging, Last Full Backup&#xD;&#xA;&#x9;if ($Database.CircularLoggingEnabled) { $CircularLoggingEnabled=&quot;Yes&quot; } else { $CircularLoggingEnabled = &quot;No&quot; }&#xD;&#xA;&#x9;if ($Database.LastFullBackup) { $LastFullBackup=$Database.LastFullBackup.ToString() } else { $LastFullBackup = &quot;Not Available&quot; }&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Mailbox Average Sizes&#xD;&#xA;&#x9;$MailboxStatistics = [array]($ExchangeEnvironment.Servers[$Database.Server.Name].MailboxStatistics | Where {$_.Database -eq $Database.Identity})&#xD;&#xA;&#x9;if ($MailboxStatistics)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;[long]$MailboxItemSizeB = 0&#xD;&#xA;&#x9;&#x9;$MailboxStatistics | %{ $MailboxItemSizeB+=$_.TotalItemSizeB }&#xD;&#xA;&#x9;&#x9;[long]$MailboxAverageSize = $MailboxItemSizeB / $MailboxStatistics.Count&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$MailboxAverageSize = 0&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Free Disk Space Percentage&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Servers[$Database.Server.Name].Disks)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;foreach ($Disk in $ExchangeEnvironment.Servers[$Database.Server.Name].Disks)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if ($Database.EdbFilePath.PathName -like &quot;$($Disk.Name)*&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$FreeDatabaseDiskSpace = $Disk.FreeSpace / $Disk.Capacity * 100&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;if ($Database.ExchangeVersion.ExchangeBuild.Major -ge 14)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($Database.LogFolderPath.PathName -like &quot;$($Disk.Name)*&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$FreeLogDiskSpace = $Disk.FreeSpace / $Disk.Capacity * 100&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$StorageGroupDN = $Database.DistinguishedName.Replace(&quot;CN=$($Database.Name),&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Adsi=[adsi]&quot;LDAP://$($Database.OriginatingServer)/$($StorageGroupDN)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($Adsi.msExchESEParamLogFilePath -like &quot;$($Disk.Name)*&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$FreeLogDiskSpace = $Disk.FreeSpace / $Disk.Capacity * 100&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$FreeLogDiskSpace=$null&#xD;&#xA;&#x9;&#x9;$FreeDatabaseDiskSpace=$null&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;if ($Database.ExchangeVersion.ExchangeBuild.Major -ge 14 -and $E2010)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Exchange 2010 Database Only&#xD;&#xA;&#x9;&#x9;$CopyCount = [int]$Database.Servers.Count&#xD;&#xA;&#x9;&#x9;if ($Database.MasterServerOrAvailabilityGroup.Name -ne $Database.Server.Name)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Copies = [array]($Database.Servers | % { $_.Name })&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$Copies = @()&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;# Archive Info&#xD;&#xA;&#x9;&#x9;$ArchiveMailboxCount = [int]([array]($ArchiveMailboxes | Where {$_.ArchiveDatabase -eq $Database.Name})).Count&#xD;&#xA;&#x9;&#x9;$ArchiveStatistics = [array]($ArchiveMailboxes | Where {$_.ArchiveDatabase -eq $Database.Name} | Get-MailboxStatistics -Archive )&#xD;&#xA;&#x9;&#x9;if ($ArchiveStatistics)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;[long]$ArchiveItemSizeB = 0&#xD;&#xA;&#x9;&#x9;&#x9;$ArchiveStatistics | %{ $ArchiveItemSizeB+=$_.TotalItemSize.Value.ToBytes() }&#xD;&#xA;&#x9;&#x9;&#x9;[long]$ArchiveAverageSize = $ArchiveItemSizeB / $ArchiveStatistics.Count&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$ArchiveAverageSize = 0&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;# DB Size / Whitespace Info&#xD;&#xA;&#x9;&#x9;[long]$Size = $Database.DatabaseSize.ToBytes()&#xD;&#xA;&#x9;&#x9;[long]$Whitespace = $Database.AvailableNewMailboxSpace.ToBytes()&#xD;&#xA;&#x9;&#x9;$StorageGroup = $null&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$ArchiveMailboxCount = 0&#xD;&#xA;&#x9;&#x9;$CopyCount = 0&#xD;&#xA;&#x9;&#x9;$Copies = @()&#xD;&#xA;&#x9;&#x9;# 2003 &amp; 2007, Use WMI (Based on code by Gary Siepser, http://bit.ly/kWWMb3)&#xD;&#xA;&#x9;&#x9;$Size = [long](get-wmiobject cim_datafile -computername $Database.Server.Name -filter ('name=''' + $Database.edbfilepath.pathname.replace(&quot;\&quot;,&quot;\\&quot;) + '''')).filesize&#xD;&#xA;&#x9;&#x9;if (!$Size)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot detect database size via WMI for $($Database.Server.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;[long]$Size = 0&#xD;&#xA;&#x9;&#x9;&#x9;[long]$Whitespace = 0&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;[long]$MailboxDeletedItemSizeB = 0&#xD;&#xA;&#x9;&#x9;&#x9;if ($MailboxStatistics)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$MailboxStatistics | %{ $MailboxDeletedItemSizeB+=$_.TotalDeletedItemSizeB }&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;$Whitespace = $Size - $MailboxItemSizeB - $MailboxDeletedItemSizeB&#xD;&#xA;&#x9;&#x9;&#x9;if ($Whitespace -lt 0) { $Whitespace = 0 }&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$StorageGroup =$Database.DistinguishedName.Split(&quot;,&quot;)[1].Replace(&quot;CN=&quot;,&quot;&quot;)&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;@{Name&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= $Database.Name&#xD;&#xA;&#x9;  StorageGroup&#x9;&#x9;&#x9;&#x9;= $StorageGroup&#xD;&#xA;&#x9;  ActiveOwner&#x9;&#x9;&#x9;&#x9;= $Database.Server.Name.ToUpper()&#xD;&#xA;&#x9;  MailboxCount&#x9;&#x9;&#x9;&#x9;= [long]([array]($Mailboxes | Where {$_.Database -eq $Database.Identity})).Count&#xD;&#xA;&#x9;  MailboxAverageSize&#x9;&#x9;= $MailboxAverageSize&#xD;&#xA;&#x9;  ArchiveMailboxCount&#x9;&#x9;= $ArchiveMailboxCount&#xD;&#xA;&#x9;  ArchiveAverageSize&#x9;&#x9;= $ArchiveAverageSize&#xD;&#xA;&#x9;  CircularLoggingEnabled &#x9;= $CircularLoggingEnabled&#xD;&#xA;&#x9;  LastFullBackup&#x9;&#x9;&#x9;= $LastFullBackup&#xD;&#xA;&#x9;  Size&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;= $Size&#xD;&#xA;&#x9;  Whitespace&#x9;&#x9;&#x9;&#x9;= $Whitespace&#xD;&#xA;&#x9;  Copies&#x9;&#x9;&#x9;&#x9;&#x9;= $Copies&#xD;&#xA;&#x9;  CopyCount&#x9;&#x9;&#x9;&#x9;&#x9;= $CopyCount&#xD;&#xA;&#x9;  FreeLogDiskSpace&#x9;&#x9;&#x9;= $FreeLogDiskSpace&#xD;&#xA;&#x9;  FreeDatabaseDiskSpace&#x9;&#x9;= $FreeDatabaseDiskSpace&#xD;&#xA;&#x9;  }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Sub-Function to get mailbox count per server.&#xD;&#xA;# New in 1.5.2&#xD;&#xA;function _GetExSvrMailboxCount&#xD;&#xA;{&#xD;&#xA;&#x9;param($Mailboxes,$ExchangeServer,$Databases)&#xD;&#xA;&#x9;# The following *should* work, but it doesn't. Apparently, ServerName is not always returned correctly which may be the cause of&#xD;&#xA;&#x9;# reports of counts being incorrect&#xD;&#xA;&#x9;#([array]($Mailboxes | Where {$_.ServerName -eq $ExchangeServer.Name})).Count&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# ..So as a workaround, I'm going to check what databases are assigned to each server and then get the mailbox counts on a per-&#xD;&#xA;&#x9;# database basis and return the resulting total. As we already have this information resident in memory it should be cheap, just&#xD;&#xA;&#x9;# not as quick.&#xD;&#xA;&#x9;$MailboxCount = 0&#xD;&#xA;&#x9;foreach ($Database in [array]($Databases | Where {$_.Server -eq $ExchangeServer.Name}))&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$MailboxCount+=([array]($Mailboxes | Where {$_.Database -eq $Database.Identity})).Count&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$MailboxCount&#xD;&#xA;&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub-Function to Get Exchange Server information&#xD;&#xA;function _GetExSvr&#xD;&#xA;{&#xD;&#xA;&#x9;param($E2010,$ExchangeServer,$Mailboxes,$Databases)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Set Basic Variables&#xD;&#xA;&#x9;$MailboxCount = 0&#xD;&#xA;&#x9;$RollupLevel = 0&#xD;&#xA;&#x9;$RollupVersion = &quot;&quot;&#xD;&#xA;    $ExtNames = @()&#xD;&#xA;    $IntNames = @()&#xD;&#xA;    $CASArrayName = &quot;&quot;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Get WMI Information&#xD;&#xA;&#x9;$tWMI = Get-WmiObject Win32_OperatingSystem -ComputerName $ExchangeServer.Name -ErrorAction SilentlyContinue&#xD;&#xA;&#x9;if ($tWMI)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$OSVersion = $tWMI.Caption.Replace(&quot;(R)&quot;,&quot;&quot;).Replace(&quot;Microsoft &quot;,&quot;&quot;).Replace(&quot;Enterprise&quot;,&quot;Ent&quot;).Replace(&quot;Standard&quot;,&quot;Std&quot;).Replace(&quot; Edition&quot;,&quot;&quot;)&#xD;&#xA;&#x9;&#x9;$OSServicePack = $tWMI.CSDVersion&#xD;&#xA;&#x9;&#x9;$RealName = $tWMI.CSName.ToUpper()&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;Write-Warning &quot;Cannot detect OS information via WMI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;$OSVersion = &quot;N/A&quot;&#xD;&#xA;&#x9;&#x9;$OSServicePack = &quot;N/A&quot;&#xD;&#xA;&#x9;&#x9;$RealName = $ExchangeServer.Name.ToUpper()&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$tWMI=Get-WmiObject -query &quot;Select * from Win32_Volume&quot; -ComputerName $ExchangeServer.Name -ErrorAction SilentlyContinue&#xD;&#xA;&#x9;if ($tWMI)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Disks=$tWMI | Select Name,Capacity,FreeSpace | Sort-Object -Property Name&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;Write-Warning &quot;Cannot detect OS information via WMI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;$Disks=$null&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Get Exchange Version&#xD;&#xA;&#x9;if ($ExchangeServer.AdminDisplayVersion.Major -eq 6)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$ExchangeMajorVersion = &quot;$($ExchangeServer.AdminDisplayVersion.Major).$($ExchangeServer.AdminDisplayVersion.Minor)&quot;&#xD;&#xA;&#x9;&#x9;$ExchangeSPLevel = $ExchangeServer.AdminDisplayVersion.FilePatchLevelDescription.Replace(&quot;Service Pack &quot;,&quot;&quot;)&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$ExchangeMajorVersion = $ExchangeServer.AdminDisplayVersion.Major&#xD;&#xA;&#x9;&#x9;$ExchangeSPLevel = $ExchangeServer.AdminDisplayVersion.Minor&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;# Exchange 2007+&#xD;&#xA;&#x9;if ($ExchangeMajorVersion -ge 8)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Get Roles&#xD;&#xA;&#x9;&#x9;$MailboxStatistics=$null&#xD;&#xA;&#x9;    [array]$Roles = $ExchangeServer.ServerRole.ToString().Replace(&quot; &quot;,&quot;&quot;).Split(&quot;,&quot;);&#xD;&#xA;&#x9;&#x9;if ($Roles -contains &quot;Mailbox&quot;)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$MailboxCount = _GetExSvrMailboxCount -Mailboxes $Mailboxes -ExchangeServer $ExchangeServer -Databases $Databases&#xD;&#xA;&#x9;&#x9;&#x9;if ($ExchangeServer.Name.ToUpper() -ne $RealName)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Roles = [array]($Roles | Where {$_ -ne &quot;Mailbox&quot;})&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Roles += &quot;ClusteredMailbox&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;# Get Mailbox Statistics the normal way, return in a consitent format&#xD;&#xA;&#x9;&#x9;&#x9;$MailboxStatistics = Get-MailboxStatistics -Server $ExchangeServer | Select DisplayName,@{Name=&quot;TotalItemSizeB&quot;;Expression={$_.TotalItemSize.Value.ToBytes()}},@{Name=&quot;TotalDeletedItemSizeB&quot;;Expression={$_.TotalDeletedItemSize.Value.ToBytes()}},Database&#xD;&#xA;&#x9;    }&#xD;&#xA;        # Get HTTPS Names (Exchange 2010 only due to time taken to retrieve data)&#xD;&#xA;        if ($Roles -contains &quot;ClientAccess&quot; -and $E2010)&#xD;&#xA;        {&#xD;&#xA;            &#xD;&#xA;            Get-OWAVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            Get-WebServicesVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            Get-OABVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            Get-ActiveSyncVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            $IntNames+=(Get-ClientAccessServer -Identity $ExchangeServer.Name).AutoDiscoverInternalURI.Host&#xD;&#xA;            if ($ExchangeMajorVersion -ge 14)&#xD;&#xA;            {&#xD;&#xA;                Get-ECPVirtualDirectory -Server $ExchangeServer -ADPropertiesOnly | %{ $ExtNames+=$_.ExternalURL.Host; $IntNames+=$_.InternalURL.Host; }&#xD;&#xA;            }&#xD;&#xA;            $IntNames = $IntNames|Sort-Object -Unique&#xD;&#xA;            $ExtNames = $ExtNames|Sort-Object -Unique&#xD;&#xA;            $CASArray = Get-ClientAccessArray -Site $ExchangeServer.Site.Name&#xD;&#xA;            if ($CASArray)&#xD;&#xA;            {&#xD;&#xA;                $CASArrayName = $CASArray.Fqdn&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;# Rollup Level / Versions (Thanks to Bhargav Shukla http://bit.ly/msxGIJ)&#xD;&#xA;&#x9;&#x9;if ($ExchangeMajorVersion -ge 14)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$RegKey=&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\S-1-5-18\\Products\\AE1D439464EB1B8488741FFA028E291C\\Patches&quot;&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$RegKey=&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Installer\\UserData\\S-1-5-18\\Products\\461C2B4266EDEF444B864AD6D9E5B613\\Patches&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$RemoteRegistry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $ExchangeServer.Name);&#xD;&#xA;&#x9;&#x9;if ($RemoteRegistry)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$RUKeys = $RemoteRegistry.OpenSubKey($RegKey).GetSubKeyNames() | ForEach {&quot;$RegKey\\$_&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;if ($RUKeys)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;[array]($RUKeys | %{$RemoteRegistry.OpenSubKey($_).getvalue(&quot;DisplayName&quot;)}) | %{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ($_ -like &quot;Update Rollup *&quot;)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$tRU = $_.Split(&quot; &quot;)[2]&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ($tRU -like &quot;*-*&quot;) { $tRUV=$tRU.Split(&quot;-&quot;)[1]; $tRU=$tRU.Split(&quot;-&quot;)[0] } else { $tRUV=&quot;&quot; }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ($tRU -ge $RollupLevel) { $RollupLevel=$tRU; $RollupVersion=$tRUV }&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;        } else {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot detect Rollup Version via Remote Registry for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;        # Exchange 2013 CU or SP Level&#xD;&#xA;        if ($ExchangeMajorVersion -ge 15)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$RegKey=&quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\Microsoft Exchange v15&quot;&#xD;&#xA;&#x9;&#x9;    $RemoteRegistry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey('LocalMachine', $ExchangeServer.Name);&#xD;&#xA;&#x9;&#x9;    if ($RemoteRegistry)&#xD;&#xA;&#x9;&#x9;    {&#xD;&#xA;&#x9;&#x9;&#x9;    $ExchangeSPLevel = $RemoteRegistry.OpenSubKey($RegKey).getvalue(&quot;DisplayName&quot;)&#xD;&#xA;                if ($ExchangeSPLevel -like &quot;*Service Pack*&quot; -or $ExchangeSPLevel -like &quot;*Cumulative Update*&quot;)&#xD;&#xA;                {&#xD;&#xA;&#x9;&#x9;&#x9;        $ExchangeSPLevel = $ExchangeSPLevel.Replace(&quot;Microsoft Exchange Server 2013 &quot;,&quot;&quot;);&#xD;&#xA;                    $ExchangeSPLevel = $ExchangeSPLevel.Replace(&quot;Service Pack &quot;,&quot;SP&quot;);&#xD;&#xA;                    $ExchangeSPLevel = $ExchangeSPLevel.Replace(&quot;Cumulative Update &quot;,&quot;CU&quot;); &#xD;&#xA;                } else {&#xD;&#xA;                    $ExchangeSPLevel = 0;&#xD;&#xA;                }&#xD;&#xA;            } else {&#xD;&#xA;&#x9;&#x9;&#x9;    Write-Warning &quot;Cannot detect CU/SP via Remote Registry for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;    }&#xD;&#xA;        }&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;# Exchange 2003&#xD;&#xA;&#x9;if ($ExchangeMajorVersion -eq 6.5)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Mailbox Count&#xD;&#xA;&#x9;&#x9;$MailboxCount = _GetExSvrMailboxCount -Mailboxes $Mailboxes -ExchangeServer $ExchangeServer -Databases $Databases&#xD;&#xA;&#x9;&#x9;# Get Role via WMI&#xD;&#xA;&#x9;&#x9;$tWMI = Get-WMIObject Exchange_Server -Namespace &quot;root\microsoftexchangev2&quot; -Computername $ExchangeServer.Name -Filter &quot;Name='$($ExchangeServer.Name)'&quot;&#xD;&#xA;&#x9;&#x9;if ($tWMI)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if ($tWMI.IsFrontEndServer) { $Roles=@(&quot;FE&quot;) } else { $Roles=@(&quot;BE&quot;) }&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot detect Front End/Back End Server information via WMI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$Roles+=&quot;Unknown&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;# Get Mailbox Statistics using WMI, return in a consistent format&#xD;&#xA;&#x9;&#x9;$tWMI = Get-WMIObject -class Exchange_Mailbox -Namespace ROOT\MicrosoftExchangev2 -ComputerName $ExchangeServer.Name -Filter (&quot;ServerName='$($ExchangeServer.Name)'&quot;)&#xD;&#xA;&#x9;&#x9;if ($tWMI)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$MailboxStatistics = $tWMI | Select @{Name=&quot;DisplayName&quot;;Expression={$_.MailboxDisplayName}},@{Name=&quot;TotalItemSizeB&quot;;Expression={$_.Size}},@{Name=&quot;TotalDeletedItemSizeB&quot;;Expression={$_.DeletedMessageSizeExtended }},@{Name=&quot;Database&quot;;Expression={((get-mailboxdatabase -Identity &quot;$($_.ServerName)\$($_.StorageGroupName)\$($_.StoreName)&quot;).identity)}}&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot retrieve Mailbox Statistics via WMI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$MailboxStatistics = $null&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;&#x9;# Exchange 2000&#xD;&#xA;&#x9;if ($ExchangeMajorVersion -eq &quot;6.0&quot;)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Mailbox Count&#xD;&#xA;&#x9;&#x9;$MailboxCount = _GetExSvrMailboxCount -Mailboxes $Mailboxes -ExchangeServer $ExchangeServer -Databases $Databases&#xD;&#xA;&#x9;&#x9;# Get Role via ADSI&#xD;&#xA;&#x9;&#x9;$tADSI=[ADSI]&quot;LDAP://$($ExchangeServer.OriginatingServer)/$($ExchangeServer.DistinguishedName)&quot;&#xD;&#xA;&#x9;&#x9;if ($tADSI)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if ($tADSI.ServerRole -eq 1) { $Roles=@(&quot;FE&quot;) } else { $Roles=@(&quot;BE&quot;) }&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;Write-Warning &quot;Cannot detect Front End/Back End Server information via ADSI for $($ExchangeServer.Name)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$Roles+=&quot;Unknown&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$MailboxStatistics = $null&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;# Return Hashtable&#xD;&#xA;&#x9;@{Name&#x9;&#x9;&#x9;&#x9;&#x9;= $ExchangeServer.Name.ToUpper()&#xD;&#xA;&#x9; RealName&#x9;&#x9;&#x9;&#x9;= $RealName&#xD;&#xA;&#x9; ExchangeMajorVersion &#x9;= $ExchangeMajorVersion&#xD;&#xA;&#x9; ExchangeSPLevel&#x9;&#x9;= $ExchangeSPLevel&#xD;&#xA;&#x9; Edition&#x9;&#x9;&#x9;&#x9;= $ExchangeServer.Edition&#xD;&#xA;&#x9; Mailboxes&#x9;&#x9;&#x9;&#x9;= $MailboxCount&#xD;&#xA;&#x9; OSVersion&#x9;&#x9;&#x9;&#x9;= $OSVersion;&#xD;&#xA;&#x9; OSServicePack&#x9;&#x9;&#x9;= $OSServicePack&#xD;&#xA;&#x9; Roles&#x9;&#x9;&#x9;&#x9;&#x9;= $Roles&#xD;&#xA;&#x9; RollupLevel&#x9;&#x9;&#x9;= $RollupLevel&#xD;&#xA;&#x9; RollupVersion&#x9;&#x9;&#x9;= $RollupVersion&#xD;&#xA;&#x9; Site&#x9;&#x9;&#x9;&#x9;&#x9;= $ExchangeServer.Site.Name&#xD;&#xA;&#x9; MailboxStatistics&#x9;&#x9;= $MailboxStatistics&#xD;&#xA;&#x9; Disks&#x9;&#x9;&#x9;&#x9;&#x9;= $Disks&#xD;&#xA;     IntNames&#x9;&#x9;&#x9;&#x9;= $IntNames&#xD;&#xA;     ExtNames&#x9;&#x9;&#x9;&#x9;= $ExtNames&#xD;&#xA;     CASArrayName&#x9;&#x9;&#x9;= $CASArrayName&#xD;&#xA;&#x9;}&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub Function to Get Totals by Version&#xD;&#xA;function _TotalsByVersion&#xD;&#xA;{&#xD;&#xA;&#x9;param($ExchangeEnvironment)&#xD;&#xA;&#x9;$TotalMailboxesByVersion=@{}&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Sites)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;foreach ($Site in $ExchangeEnvironment.Sites.GetEnumerator())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Server in $Site.Value)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;])&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion.Add(&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;,@{ServerCount=1;MailboxCount=$Server.Mailboxes})&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].ServerCount++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].MailboxCount+=$Server.Mailboxes&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Pre2007)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;foreach ($FakeSite in $ExchangeEnvironment.Pre2007.GetEnumerator())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Server in $FakeSite.Value)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (!$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;])&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion.Add(&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;,@{ServerCount=1;MailboxCount=$Server.Mailboxes})&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].ServerCount++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalMailboxesByVersion[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].MailboxCount+=$Server.Mailboxes&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$TotalMailboxesByVersion&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub Function to Get Totals by Role&#xD;&#xA;function _TotalsByRole&#xD;&#xA;{&#xD;&#xA;&#x9;param($ExchangeEnvironment)&#xD;&#xA;&#x9;# Add Roles We Always Show&#xD;&#xA;&#x9;$TotalServersByRole=@{&quot;ClientAccess&quot; &#x9; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;HubTransport&quot; &#x9; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;UnifiedMessaging&quot; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;Mailbox&quot;&#x9;&#x9;&#x9; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;Edge&quot; &#x9;&#x9;&#x9; = 0&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  }&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Sites)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;foreach ($Site in $ExchangeEnvironment.Sites.GetEnumerator())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Server in $Site.Value)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;foreach ($Role in $Server.Roles)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if ($TotalServersByRole[$Role] -eq $null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalServersByRole.Add($Role,1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalServersByRole[$Role]++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ExchangeEnvironment.Pre2007[&quot;Pre 2007 Servers&quot;])&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;foreach ($Server in $ExchangeEnvironment.Pre2007[&quot;Pre 2007 Servers&quot;])&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;foreach ($Role in $Server.Roles)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if ($TotalServersByRole[$Role] -eq $null)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalServersByRole.Add($Role,1)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;$TotalServersByRole[$Role]++&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$TotalServersByRole&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub Function to return HTML Table for Sites/Pre 2007&#xD;&#xA;function _GetOverview&#xD;&#xA;{&#xD;&#xA;&#x9;param($Servers,$ExchangeEnvironment,$ExRoleStrings,$Pre2007=$False)&#xD;&#xA;&#x9;if ($Pre2007)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$BGColHeader=&quot;#880099&quot;&#xD;&#xA;&#x9;&#x9;$BGColSubHeader=&quot;#8800CC&quot;&#xD;&#xA;&#x9;&#x9;$Prefix=&quot;&quot;&#xD;&#xA;        $IntNamesText=&quot;&quot;&#xD;&#xA;        $ExtNamesText=&quot;&quot;&#xD;&#xA;        $CASArrayText=&quot;&quot;&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;$BGColHeader=&quot;#000099&quot;&#xD;&#xA;&#x9;&#x9;$BGColSubHeader=&quot;#0000FF&quot;&#xD;&#xA;&#x9;&#x9;$Prefix=&quot;Site:&quot;&#xD;&#xA;        $IntNamesText=&quot;&quot;&#xD;&#xA;        $ExtNamesText=&quot;&quot;&#xD;&#xA;        $CASArrayText=&quot;&quot;&#xD;&#xA;        $IntNames=@()&#xD;&#xA;        $ExtNames=@()&#xD;&#xA;        $CASArrayName=&quot;&quot;&#xD;&#xA;        foreach ($Server in $Servers.Value)&#xD;&#xA;        {&#xD;&#xA;            $IntNames+=$Server.IntNames&#xD;&#xA;            $ExtNames+=$Server.ExtNames&#xD;&#xA;            $CASArrayName=$Server.CASArrayName&#xD;&#xA;            &#xD;&#xA;        }&#xD;&#xA;        $IntNames = $IntNames|Sort -Unique&#xD;&#xA;        $ExtNames = $ExtNames|Sort -Unique&#xD;&#xA;        $IntNames = [system.String]::Join(&quot;,&quot;,$IntNames)&#xD;&#xA;        $ExtNames = [system.String]::Join(&quot;,&quot;,$ExtNames)&#xD;&#xA;        if ($IntNames)&#xD;&#xA;        {&#xD;&#xA;            $IntNamesText=&quot;Internal Names: $($IntNames)&quot;&#xD;&#xA;            $ExtNamesText=&quot;External Names: $($ExtNames)&lt;br &gt;&quot;&#xD;&#xA;        }&#xD;&#xA;        if ($CASArrayName)&#xD;&#xA;        {&#xD;&#xA;            $CASArrayText=&quot;CAS Array: $($CASArrayName)&quot;&#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output=&quot;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; width=&quot;&quot;100%&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&#x9;&lt;col width=&quot;&quot;20%&quot;&quot;&gt;&lt;col width=&quot;&quot;20%&quot;&quot;&gt;&#xD;&#xA;&#x9;&lt;colgroup width=&quot;&quot;25%&quot;&quot;&gt;&quot;;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;col width=&quot;&quot;3%&quot;&quot;&gt;&quot;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;/colgroup&gt;&lt;col width=&quot;&quot;20%&quot;&quot;&gt;&lt;col  width=&quot;&quot;20%&quot;&quot;&gt;&#xD;&#xA;&#x9;&lt;tr bgcolor=&quot;&quot;$($BGColHeader)&quot;&quot;&gt;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;$($Prefix) $($Servers.Key)&lt;/font&gt;&lt;/th&gt;&#xD;&#xA;&#x9;&lt;th colspan=&quot;&quot;$(($ExchangeEnvironment.TotalServersByRole.Count)+2)&quot;&quot; align=&quot;&quot;left&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;$($ExtNamesText)$($IntNamesText)&lt;/font&gt;&lt;/th&gt;&#xD;&#xA;&#x9;&lt;th align=&quot;&quot;center&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;$($CASArrayText)&lt;/font&gt;&lt;/th&gt;&lt;/tr&gt;&quot;&#xD;&#xA;&#x9;$TotalMailboxes=0&#xD;&#xA;&#x9;$Servers.Value | %{$TotalMailboxes += $_.Mailboxes}&#xD;&#xA;&#x9;$Output+=&quot;&lt;tr bgcolor=&quot;&quot;$($BGColSubHeader)&quot;&quot;&gt;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Mailboxes: $($TotalMailboxes)&lt;/font&gt;&lt;/th&gt;&lt;th&gt;&quot;&#xD;&#xA;    $Output+=&quot;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Exchange Version&lt;/font&gt;&lt;/th&gt;&quot;&#xD;&#xA;&#x9;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;$($ExRoleStrings[$_.Key].Short)&lt;/font&gt;&lt;/th&gt;&quot;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;OS Version&lt;/font&gt;&lt;/th&gt;&lt;th&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;OS Service Pack&lt;/font&gt;&lt;/th&gt;&lt;/tr&gt;&quot;&#xD;&#xA;&#x9;$AlternateRow=0&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;foreach ($Server in $Servers.Value)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;tr &quot;&#xD;&#xA;&#x9;&#x9;if ($AlternateRow)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot; style=&quot;&quot;background-color:#dddddd&quot;&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$AlternateRow=0&#xD;&#xA;&#x9;&#x9;} else&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$AlternateRow=1&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&gt;&lt;td&gt;$($Server.Name)&quot;&#xD;&#xA;&#x9;&#x9;if ($Server.RealName -ne $Server.Name)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot; ($($Server.RealName))&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;/td&gt;&lt;td&gt;$($ExVersionStrings[&quot;$($Server.ExchangeMajorVersion).$($Server.ExchangeSPLevel)&quot;].Long)&quot;&#xD;&#xA;&#x9;&#x9;if ($Server.RollupLevel -gt 0)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot; UR$($Server.RollupLevel)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if ($Server.RollupVersion)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Output+=&quot; $($Server.RollupVersion)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{ &#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if ($Server.Roles -contains $_.Key)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Output+=&quot; align=&quot;&quot;center&quot;&quot; style=&quot;&quot;background-color:#00FF00&quot;&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&gt;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;if (($_.Key -eq &quot;ClusteredMailbox&quot; -or $_.Key -eq &quot;Mailbox&quot; -or $_.Key -eq &quot;BE&quot;) -and $Server.Roles -contains $_.Key) &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;$Output+=$Server.Mailboxes&#xD;&#xA;&#x9;&#x9;&#x9;} &#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;td&gt;$($Server.OSVersion)&lt;/td&gt;&lt;td&gt;$($Server.OSServicePack)&lt;/td&gt;&lt;/tr&gt;&quot;;&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;tr&gt;&lt;/tr&gt;&#xD;&#xA;&#x9;&lt;/table&gt;&lt;br /&gt;&quot;&#xD;&#xA;&#x9;$Output&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# Sub Function to return HTML Table for Databases&#xD;&#xA;function _GetDBTable&#xD;&#xA;{&#xD;&#xA;&#x9;param($Databases)&#xD;&#xA;&#x9;# Only Show Archive Mailbox Columns, Backup Columns and Circ Logging if at least one DB has an Archive mailbox, backed up or Cir Log enabled.&#xD;&#xA;&#x9;$ShowArchiveDBs=$False&#xD;&#xA;&#x9;$ShowLastFullBackup=$False&#xD;&#xA;&#x9;$ShowCircularLogging=$False&#xD;&#xA;&#x9;$ShowStorageGroups=$False&#xD;&#xA;&#x9;$ShowCopies=$False&#xD;&#xA;&#x9;$ShowFreeDatabaseSpace=$False&#xD;&#xA;&#x9;$ShowFreeLogDiskSpace=$False&#xD;&#xA;&#x9;foreach ($Database in $Databases)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if ($Database.ArchiveMailboxCount -gt 0) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowArchiveDBs=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.LastFullBackup -ne &quot;Not Available&quot;) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowLastFullBackup=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.CircularLoggingEnabled -eq &quot;Yes&quot;) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowCircularLogging=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.StorageGroup) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowStorageGroups=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.CopyCount -gt 0) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowCopies=$True&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.FreeDatabaseDiskSpace -ne $null)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowFreeDatabaseSpace=$true&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($Database.FreeLogDiskSpace -ne $null)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ShowFreeLogDiskSpace=$true&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$Output=&quot;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; width=&quot;&quot;100%&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&lt;tr align=&quot;&quot;center&quot;&quot; bgcolor=&quot;&quot;#FFD700&quot;&quot;&gt;&#xD;&#xA;&#x9;&lt;th&gt;Server&lt;/th&gt;&quot;&#xD;&#xA;&#x9;if ($ShowStorageGroups)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Storage Group&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;th&gt;Database Name&lt;/th&gt;&#xD;&#xA;&#x9;&lt;th&gt;Mailboxes&lt;/th&gt;&#xD;&#xA;&#x9;&lt;th&gt;Av. Mailbox Size&lt;/th&gt;&quot;&#xD;&#xA;&#x9;if ($ShowArchiveDBs)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Archive MBs&lt;/th&gt;&lt;th&gt;Av. Archive Size&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;th&gt;DB Size&lt;/th&gt;&lt;th&gt;DB Whitespace&lt;/th&gt;&quot;&#xD;&#xA;&#x9;if ($ShowFreeDatabaseSpace)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Database Disk Free&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ShowFreeLogDiskSpace)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Log Disk Free&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ShowLastFullBackup)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Last Full Backup&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ShowCircularLogging)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Circular Logging&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if ($ShowCopies)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;th&gt;Copies (n)&lt;/th&gt;&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$Output+=&quot;&lt;/tr&gt;&quot;&#xD;&#xA;&#x9;$AlternateRow=0;&#xD;&#xA;&#x9;foreach ($Database in $Databases)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;tr&quot;&#xD;&#xA;&#x9;&#x9;if ($AlternateRow)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot; style=&quot;&quot;background-color:#dddddd&quot;&quot;&quot;&#xD;&#xA;&#x9;&#x9;&#x9;$AlternateRow=0&#xD;&#xA;&#x9;&#x9;} else&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$AlternateRow=1&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&gt;&lt;td&gt;$($Database.ActiveOwner)&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;if ($ShowStorageGroups)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td&gt;$($Database.StorageGroup)&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;td&gt;$($Database.Name)&lt;/td&gt;&#xD;&#xA;&#x9;&#x9;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$($Database.MailboxCount)&lt;/td&gt;&#xD;&#xA;&#x9;&#x9;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N2}&quot; -f ($Database.MailboxAverageSize/1MB)) MB&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;if ($ShowArchiveDBs)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$($Database.ArchiveMailboxCount)&lt;/td&gt; &#xD;&#xA;&#x9;&#x9;&#x9;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N2}&quot; -f ($Database.ArchiveAverageSize/1MB)) MB&lt;/td&gt;&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N2}&quot; -f ($Database.Size/1GB)) GB &lt;/td&gt;&#xD;&#xA;&#x9;&#x9;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N2}&quot; -f ($Database.Whitespace/1GB)) GB&lt;/td&gt;&quot;;&#xD;&#xA;&#x9;&#x9;if ($ShowFreeDatabaseSpace)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N1}&quot; -f $Database.FreeDatabaseDiskSpace)%&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($ShowFreeLogDiskSpace)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$(&quot;{0:N1}&quot; -f $Database.FreeLogDiskSpace)%&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($ShowLastFullBackup)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$($Database.LastFullBackup)&lt;/td&gt;&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($ShowCircularLogging)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td align=&quot;&quot;center&quot;&quot;&gt;$($Database.CircularLoggingEnabled)&lt;/td&gt;&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if ($ShowCopies)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$Output+=&quot;&lt;td&gt;$($Database.Copies|%{$_}) ($($Database.CopyCount))&lt;/td&gt;&quot;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;/tr&gt;&quot;;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$Output+=&quot;&lt;/table&gt;&lt;br /&gt;&quot;&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$Output&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# Sub Function to neatly update progress&#xD;&#xA;function _UpProg1&#xD;&#xA;{&#xD;&#xA;&#x9;param($PercentComplete,$Status,$Stage)&#xD;&#xA;&#x9;$TotalStages=5&#xD;&#xA;&#x9;Write-Progress -id 1 -activity &quot;Get-ExchangeEnvironmentReport&quot; -status $Status -percentComplete (($PercentComplete/$TotalStages)+(1/$TotalStages*$Stage*100))&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1. Initial Startup&#xD;&#xA;&#xD;&#xA;# 1.0 Check Powershell Version&#xD;&#xA;if ((Get-Host).Version.Major -eq 1)&#xD;&#xA;{&#xD;&#xA;&#x9;throw &quot;Powershell Version 1 not supported&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.1 Check Exchange Management Shell, attempt to load&#xD;&#xA;if (!(Get-Command Get-ExchangeServer -ErrorAction SilentlyContinue))&#xD;&#xA;{&#xD;&#xA;&#x9;if (Test-Path &quot;C:\Program Files\Microsoft\Exchange Server\V14\bin\RemoteExchange.ps1&quot;)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;. 'C:\Program Files\Microsoft\Exchange Server\V14\bin\RemoteExchange.ps1'&#xD;&#xA;&#x9;&#x9;Connect-ExchangeServer -auto&#xD;&#xA;&#x9;} elseif (Test-Path &quot;C:\Program Files\Microsoft\Exchange Server\bin\Exchange.ps1&quot;) {&#xD;&#xA;&#x9;&#x9;Add-PSSnapIn Microsoft.Exchange.Management.PowerShell.Admin&#xD;&#xA;&#x9;&#x9;.'C:\Program Files\Microsoft\Exchange Server\bin\Exchange.ps1'&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;throw &quot;Exchange Management Shell cannot be loaded&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.2 Check if -SendMail parameter set and if so check -MailFrom, -MailTo and -MailServer are set&#xD;&#xA;if ($SendMail)&#xD;&#xA;{&#xD;&#xA;&#x9;if (!$MailFrom -or !$MailTo -or !$MailServer)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;throw &quot;If -SendMail specified, you must also specify -MailFrom, -MailTo and -MailServer&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.3 Check Exchange Management Shell Version&#xD;&#xA;if ((Get-PSSnapin -Name Microsoft.Exchange.Management.PowerShell.Admin -ErrorAction SilentlyContinue))&#xD;&#xA;{&#xD;&#xA;&#x9;$E2010 = $false;&#xD;&#xA;&#x9;if (Get-ExchangeServer | Where {$_.AdminDisplayVersion.Major -gt 14})&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;Write-Warning &quot;Exchange 2010 or higher detected. You'll get better results if you run this script from an Exchange 2010/2013 management shell&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;}else{&#xD;&#xA;    &#xD;&#xA;    $E2010 = $true&#xD;&#xA;    $localserver = get-exchangeserver $Env:computername&#xD;&#xA;    $localversion = $localserver.admindisplayversion.major&#xD;&#xA;    if ($localversion -eq 15) { $E2013 = $true }&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.4 Check view entire forest if set (by default, true)&#xD;&#xA;if ($E2010)&#xD;&#xA;{&#xD;&#xA;&#x9;Set-ADServerSettings -ViewEntireForest:$ViewEntireForest&#xD;&#xA;} else {&#xD;&#xA;&#x9;$global:AdminSessionADSettings.ViewEntireForest = $ViewEntireForest&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 1.5 Initial Variables&#xD;&#xA;&#xD;&#xA;# 1.5.1 Hashtable to update with environment data&#xD;&#xA;$ExchangeEnvironment = @{Sites&#x9;&#x9;&#x9;&#x9;&#x9;= @{}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; Pre2007&#x9;&#x9;&#x9;&#x9;= @{}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; Servers&#x9;&#x9;&#x9;&#x9;= @{}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; DAGs&#x9;&#x9;&#x9;&#x9;&#x9;= @()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; NonDAGDatabases&#x9;&#x9;= @()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;# 1.5.7 Exchange Major Version String Mapping&#xD;&#xA;$ExMajorVersionStrings = @{&quot;6.0&quot; = @{Long=&quot;Exchange 2000&quot;;Short=&quot;E2000&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;   &quot;6.5&quot; = @{Long=&quot;Exchange 2003&quot;;Short=&quot;E2003&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &#x9;&#x9;   &quot;8&quot;   = @{Long=&quot;Exchange 2007&quot;;Short=&quot;E2007&quot;}&#xD;&#xA;                           &quot;14&quot;  = @{Long=&quot;Exchange 2010&quot;;Short=&quot;E2010&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &quot;15&quot;  = @{Long=&quot;Exchange 2013&quot;;Short=&quot;E2013&quot;}&#xD;&#xA;                           &quot;16&quot;  = @{Long=&quot;Exchange 2013&quot;;Short=&quot;E2013&quot;}}&#xD;&#xA;# 1.5.8 Exchange Service Pack String Mapping&#xD;&#xA;$ExSPLevelStrings = @{&quot;0&quot; = &quot;RTM&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;  &quot;1&quot; = &quot;SP1&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;      &quot;2&quot; = &quot;SP2&quot;&#xD;&#xA;&#x9;&#x9;&#x9;          &quot;3&quot; = &quot;SP3&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;      &quot;4&quot; = &quot;SP4&quot;&#xD;&#xA;                      &quot;CU1&quot; = &quot;CU1&quot;&#xD;&#xA;                      &quot;CU2&quot; = &quot;CU2&quot;&#xD;&#xA;                      &quot;CU3&quot; = &quot;CU3&quot;&#xD;&#xA;                      &quot;CU4&quot; = &quot;CU4&quot;&#xD;&#xA;                      &quot;CU5&quot; = &quot;CU5&quot;&#xD;&#xA;                      &quot;SP1&quot; = &quot;SP1&quot;&#xD;&#xA;                      &quot;SP2&quot; = &quot;SP2&quot;}&#xD;&#xA;# 1.5.9 Populate Full Mapping using above info&#xD;&#xA;$ExVersionStrings = @{}&#xD;&#xA;foreach ($Major in $ExMajorVersionStrings.GetEnumerator())&#xD;&#xA;{&#xD;&#xA;&#x9;foreach ($Minor in $ExSPLevelStrings.GetEnumerator())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$ExVersionStrings.Add(&quot;$($Major.Key).$($Minor.Key)&quot;,@{Long=&quot;$($Major.Value.Long) $($Minor.Value)&quot;;Short=&quot;$($Major.Value.Short)$($Minor.Value)&quot;})&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;# 1.5.10 Exchange Role String Mapping&#xD;&#xA;$ExRoleStrings = @{&quot;ClusteredMailbox&quot; = @{Short=&quot;ClusMBX&quot;;Long=&quot;CCR/SCC Clustered Mailbox&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;Mailbox&quot;&#x9;&#x9;  = @{Short=&quot;MBX&quot;;Long=&quot;Mailbox&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;ClientAccess&quot;&#x9;  = @{Short=&quot;CAS&quot;;Long=&quot;Client Access&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;HubTransport&quot;&#x9;  = @{Short=&quot;HUB&quot;;Long=&quot;Hub Transport&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;UnifiedMessaging&quot; = @{Short=&quot;UM&quot;;Long=&quot;Unified Messaging&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;Edge&quot;&#x9;&#x9;&#x9;  = @{Short=&quot;EDGE&quot;;Long=&quot;Edge Transport&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;FE&quot;&#x9;&#x9;&#x9;  = @{Short=&quot;FE&quot;;Long=&quot;Front End&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;BE&quot;&#x9;&#x9;&#x9;  = @{Short=&quot;BE&quot;;Long=&quot;Back End&quot;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &quot;Unknown&quot;&#x9;  = @{Short=&quot;Unknown&quot;;Long=&quot;Unknown&quot;}}&#xD;&#xA;&#xD;&#xA;# 2 Get Relevant Exchange Information Up-Front&#xD;&#xA;&#xD;&#xA;# 2.1 Get Server, Exchange and Mailbox Information&#xD;&#xA;_UpProg1 1 &quot;Getting Exchange Server List&quot; 1&#xD;&#xA;$ExchangeServers = [array](Get-ExchangeServer $ServerFilter)&#xD;&#xA;if (!$ExchangeServers)&#xD;&#xA;{&#xD;&#xA;&#x9;throw &quot;No Exchange Servers matched by -ServerFilter &quot;&quot;$($ServerFilter)&quot;&quot;&quot;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;_UpProg1 10 &quot;Getting Mailboxes&quot; 1&#xD;&#xA;$Mailboxes = [array](Get-Mailbox -ResultSize Unlimited) | Where {$_.Server -like $ServerFilter}&#xD;&#xA;if ($E2010)&#xD;&#xA;{ &#xD;&#xA;&#x9;_UpProg1 60 &quot;Getting Archive Mailboxes&quot; 1&#xD;&#xA;&#x9;$ArchiveMailboxes = [array](Get-Mailbox -Archive -ResultSize Unlimited) | Where {$_.Server -like $ServerFilter}&#xD;&#xA;    _UpProg1 70 &quot;Getting Remote Mailboxes&quot; 1&#xD;&#xA;    $RemoteMailboxes = [array](Get-RemoteMailbox  -ResultSize Unlimited)&#xD;&#xA;    $ExchangeEnvironment.Add(&quot;RemoteMailboxes&quot;,$RemoteMailboxes.Count)&#xD;&#xA;&#x9;_UpProg1 90 &quot;Getting Databases&quot; 1&#xD;&#xA;    if ($E2013) &#xD;&#xA;    {&#x9;&#xD;&#xA;        $Databases = [array](Get-MailboxDatabase -IncludePreExchange2013 -Status)  | Where {$_.Server -like $ServerFilter} &#xD;&#xA;    }&#xD;&#xA;    elseif ($E2010)&#xD;&#xA;    {&#x9;&#xD;&#xA;        $Databases = [array](Get-MailboxDatabase -IncludePreExchange2010 -Status)  | Where {$_.Server -like $ServerFilter} &#xD;&#xA;    }&#xD;&#xA;&#x9;$DAGs = [array](Get-DatabaseAvailabilityGroup) | Where {$_.Servers -like $ServerFilter}&#xD;&#xA;} else {&#xD;&#xA;&#x9;$ArchiveMailboxes = $null&#xD;&#xA;&#x9;$ArchiveMailboxStats = $null&#x9;&#xD;&#xA;&#x9;$DAGs = $null&#xD;&#xA;&#x9;_UpProg1 90 &quot;Getting Databases&quot; 1&#xD;&#xA;&#x9;$Databases = [array](Get-MailboxDatabase -IncludePreExchange2007 -Status) | Where {$_.Server -like $ServerFilter}&#xD;&#xA;    $ExchangeEnvironment.Add(&quot;RemoteMailboxes&quot;,0)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 2.3 Populate Information we know&#xD;&#xA;$ExchangeEnvironment.Add(&quot;TotalMailboxes&quot;,$Mailboxes.Count + $ExchangeEnvironment.RemoteMailboxes);&#xD;&#xA;&#xD;&#xA;# 3 Process High-Level Exchange Information&#xD;&#xA;&#xD;&#xA;# 3.1 Collect Exchange Server Information&#xD;&#xA;for ($i=0; $i -lt $ExchangeServers.Count; $i++)&#xD;&#xA;{&#xD;&#xA;&#x9;_UpProg1 ($i/$ExchangeServers.Count*100) &quot;Getting Exchange Server Information&quot; 2&#xD;&#xA;&#x9;# Get Exchange Info&#xD;&#xA;&#x9;$ExSvr = _GetExSvr -E2010 $E2010 -ExchangeServer $ExchangeServers[$i] -Mailboxes $Mailboxes -Databases $Databases&#xD;&#xA;&#x9;# Add to site or pre-Exchange 2007 list&#xD;&#xA;&#x9;if ($ExSvr.Site)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Exchange 2007 or higher&#xD;&#xA;&#x9;&#x9;if (!$ExchangeEnvironment.Sites[$ExSvr.Site])&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.Sites.Add($ExSvr.Site,@($ExSvr))&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.Sites[$ExSvr.Site]+=$ExSvr&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;# Exchange 2003 or lower&#xD;&#xA;&#x9;&#x9;if (!$ExchangeEnvironment.Pre2007[&quot;Pre 2007 Servers&quot;])&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.Pre2007.Add(&quot;Pre 2007 Servers&quot;,@($ExSvr))&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.Pre2007[&quot;Pre 2007 Servers&quot;]+=$ExSvr&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;# Add to Servers List&#xD;&#xA;&#x9;$ExchangeEnvironment.Servers.Add($ExSvr.Name,$ExSvr)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 3.2 Calculate Environment Totals for Version/Role using collected data&#xD;&#xA;_UpProg1 1 &quot;Getting Totals&quot; 3&#xD;&#xA;$ExchangeEnvironment.Add(&quot;TotalMailboxesByVersion&quot;,(_TotalsByVersion -ExchangeEnvironment $ExchangeEnvironment))&#xD;&#xA;$ExchangeEnvironment.Add(&quot;TotalServersByRole&quot;,(_TotalsByRole -ExchangeEnvironment $ExchangeEnvironment))&#xD;&#xA;&#xD;&#xA;# 3.4 Populate Environment DAGs&#xD;&#xA;_UpProg1 5 &quot;Getting DAG Info&quot; 3&#xD;&#xA;if ($DAGs)&#xD;&#xA;{&#xD;&#xA;&#x9;foreach($DAG in $DAGs)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$ExchangeEnvironment.DAGs+=(_GetDAG -DAG $DAG)&#xD;&#xA;&#x9;}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 3.5 Get Database information&#xD;&#xA;_UpProg1 60 &quot;Getting Database Info&quot; 3&#xD;&#xA;for ($i=0; $i -lt $Databases.Count; $i++)&#xD;&#xA;{&#xD;&#xA;&#x9;$Database = _GetDB -Database $Databases[$i] -ExchangeEnvironment $ExchangeEnvironment -Mailboxes $Mailboxes -ArchiveMailboxes $ArchiveMailboxes -E2010 $E2010&#xD;&#xA;&#x9;$DAGDB = $false&#xD;&#xA;&#x9;for ($j=0; $j -lt $ExchangeEnvironment.DAGs.Count; $j++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if ($ExchangeEnvironment.DAGs[$j].Members -contains $Database.ActiveOwner)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;$DAGDB=$true&#xD;&#xA;&#x9;&#x9;&#x9;$ExchangeEnvironment.DAGs[$j].Databases += $Database&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (!$DAGDB)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$ExchangeEnvironment.NonDAGDatabases += $Database&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;# 4 Write Information&#xD;&#xA;_UpProg1 5 &quot;Writing HTML Report Header&quot; 4&#xD;&#xA;# Header&#xD;&#xA;$Output=&quot;&lt;html&gt;&#xD;&#xA;&lt;body&gt;&#xD;&#xA;&lt;font size=&quot;&quot;1&quot;&quot; face=&quot;&quot;Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&lt;h3 align=&quot;&quot;center&quot;&quot;&gt;Exchange Environment Report&lt;/h3&gt;&#xD;&#xA;&lt;h5 align=&quot;&quot;center&quot;&quot;&gt;Generated $((Get-Date).ToString())&lt;/h5&gt;&#xD;&#xA;&lt;/font&gt;&#xD;&#xA;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&lt;tr bgcolor=&quot;&quot;#009900&quot;&quot;&gt;&#xD;&#xA;&lt;th colspan=&quot;&quot;$($ExchangeEnvironment.TotalMailboxesByVersion.Count)&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Total Servers:&lt;/font&gt;&lt;/th&gt;&quot;&#xD;&#xA;if ($ExchangeEnvironment.RemoteMailboxes)&#xD;&#xA;    {&#xD;&#xA;    $Output+=&quot;&lt;th colspan=&quot;&quot;$($ExchangeEnvironment.TotalMailboxesByVersion.Count+2)&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Total Mailboxes:&lt;/font&gt;&lt;/th&gt;&quot;&#xD;&#xA;    } else {&#xD;&#xA;    $Output+=&quot;&lt;th colspan=&quot;&quot;$($ExchangeEnvironment.TotalMailboxesByVersion.Count+1)&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Total Mailboxes:&lt;/font&gt;&lt;/th&gt;&quot;&#xD;&#xA;    }&#xD;&#xA;$Output+=&quot;&lt;th colspan=&quot;&quot;$($ExchangeEnvironment.TotalServersByRole.Count)&quot;&quot;&gt;&lt;font color=&quot;&quot;#ffffff&quot;&quot;&gt;Total Roles:&lt;/font&gt;&lt;/th&gt;&lt;/tr&gt;&#xD;&#xA;&lt;tr bgcolor=&quot;&quot;#00CC00&quot;&quot;&gt;&quot;&#xD;&#xA;# Show Column Headings based on the Exchange versions we have&#xD;&#xA;$ExchangeEnvironment.TotalMailboxesByVersion.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;th&gt;$($ExVersionStrings[$_.Key].Short)&lt;/th&gt;&quot;}&#xD;&#xA;$ExchangeEnvironment.TotalMailboxesByVersion.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;th&gt;$($ExVersionStrings[$_.Key].Short)&lt;/th&gt;&quot;}&#xD;&#xA;if ($ExchangeEnvironment.RemoteMailboxes)&#xD;&#xA;{&#xD;&#xA;    $Output+=&quot;&lt;th&gt;Office 365&lt;/th&gt;&quot;&#xD;&#xA;}&#xD;&#xA;$Output+=&quot;&lt;th&gt;Org&lt;/th&gt;&quot;&#xD;&#xA;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;th&gt;$($ExRoleStrings[$_.Key].Short)&lt;/th&gt;&quot;}&#xD;&#xA;$Output+=&quot;&lt;tr&gt;&quot;&#xD;&#xA;$Output+=&quot;&lt;tr align=&quot;&quot;center&quot;&quot; bgcolor=&quot;&quot;#dddddd&quot;&quot;&gt;&quot;&#xD;&#xA;$ExchangeEnvironment.TotalMailboxesByVersion.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;td&gt;$($_.Value.ServerCount)&lt;/td&gt;&quot; }&#xD;&#xA;$ExchangeEnvironment.TotalMailboxesByVersion.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;td&gt;$($_.Value.MailboxCount)&lt;/td&gt;&quot; }&#xD;&#xA;if ($RemoteMailboxes)&#xD;&#xA;{&#xD;&#xA;    $Output+=&quot;&lt;th&gt;$($ExchangeEnvironment.RemoteMailboxes)&lt;/th&gt;&quot;&#xD;&#xA;}&#xD;&#xA;$Output+=&quot;&lt;td&gt;$($ExchangeEnvironment.TotalMailboxes)&lt;/td&gt;&quot;&#xD;&#xA;$ExchangeEnvironment.TotalServersByRole.GetEnumerator()|Sort Name| %{$Output+=&quot;&lt;td&gt;$($_.Value)&lt;/td&gt;&quot;}&#xD;&#xA;$Output+=&quot;&lt;/tr&gt;&lt;tr&gt;&lt;tr&gt;&lt;/table&gt;&lt;br&gt;&quot;&#xD;&#xA;&#xD;&#xA;# Sites and Servers&#xD;&#xA;_UpProg1 20 &quot;Writing HTML Site Information&quot; 4&#xD;&#xA;foreach ($Site in $ExchangeEnvironment.Sites.GetEnumerator())&#xD;&#xA;{&#xD;&#xA;&#x9;$Output+=_GetOverview -Servers $Site -ExchangeEnvironment $ExchangeEnvironment -ExRoleStrings $ExRoleStrings&#xD;&#xA;}&#xD;&#xA;_UpProg1 40 &quot;Writing HTML Pre-2007 Information&quot; 4&#xD;&#xA;foreach ($FakeSite in $ExchangeEnvironment.Pre2007.GetEnumerator())&#xD;&#xA;{&#xD;&#xA;&#x9;$Output+=_GetOverview -Servers $FakeSite -ExchangeEnvironment $ExchangeEnvironment -ExRoleStrings $ExRoleStrings -Pre2007:$true&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;_UpProg1 60 &quot;Writing HTML DAG Information&quot; 4&#xD;&#xA;foreach ($DAG in $ExchangeEnvironment.DAGs)&#xD;&#xA;{&#xD;&#xA;&#x9;if ($DAG.MemberCount -gt 0)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;# Database Availability Group Header&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; width=&quot;&quot;100%&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;&#x9;&#x9;&lt;col width=&quot;&quot;20%&quot;&quot;&gt;&lt;col width=&quot;&quot;10%&quot;&quot;&gt;&lt;col width=&quot;&quot;70%&quot;&quot;&gt;&#xD;&#xA;&#x9;&#x9;&lt;tr align=&quot;&quot;center&quot;&quot; bgcolor=&quot;&quot;#FF8000 &quot;&quot;&gt;&lt;th&gt;Database Availability Group Name&lt;/th&gt;&lt;th&gt;Member Count&lt;/th&gt;&#xD;&#xA;&#x9;&#x9;&lt;th&gt;Database Availability Group Members&lt;/th&gt;&lt;/tr&gt;&#xD;&#xA;&#x9;&#x9;&lt;tr&gt;&lt;td&gt;$($DAG.Name)&lt;/td&gt;&lt;td align=&quot;&quot;center&quot;&quot;&gt;&#xD;&#xA;&#x9;&#x9;$($DAG.MemberCount)&lt;/td&gt;&lt;td&gt;&quot;&#xD;&#xA;&#x9;&#x9;$DAG.Members | % { $Output+=&quot;$($_) &quot; }&#xD;&#xA;&#x9;&#x9;$Output+=&quot;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;# Get Table HTML&#xD;&#xA;&#x9;&#x9;$Output+=_GetDBTable -Databases $DAG.Databases&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if ($ExchangeEnvironment.NonDAGDatabases.Count)&#xD;&#xA;{&#xD;&#xA;&#x9;_UpProg1 80 &quot;Writing HTML Non-DAG Database Information&quot; 4&#xD;&#xA;&#x9;$Output+=&quot;&lt;table border=&quot;&quot;0&quot;&quot; cellpadding=&quot;&quot;3&quot;&quot; width=&quot;&quot;100%&quot;&quot; style=&quot;&quot;font-size:8pt;font-family:Arial,sans-serif&quot;&quot;&gt;&#xD;&#xA;    &#x9;  &lt;tr bgcolor=&quot;&quot;#FF8000&quot;&quot;&gt;&lt;th&gt;Mailbox Databases (Non-DAG)&lt;/th&gt;&lt;/table&gt;&quot;&#xD;&#xA;&#x9;$Output+=_GetDBTable -Databases $ExchangeEnvironment.NonDAGDatabases&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;# End&#xD;&#xA;_UpProg1 90 &quot;Finishing off..&quot; 4&#xD;&#xA;$Output+=&quot;&lt;/body&gt;&lt;/html&gt;&quot;;&#xD;&#xA;$Output | Out-File $HTMLReport&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;if ($SendMail)&#xD;&#xA;{&#xD;&#xA;&#x9;_UpProg1 95 &quot;Sending mail message..&quot; 4&#xD;&#xA;&#x9;Send-MailMessage -Attachments $HTMLReport -To $MailTo -From $MailFrom -Subject &quot;Exchange Environment Report&quot; -BodyAsHtml $Output -SmtpServer $MailServer&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;if ($ScheduleAs)&#xD;&#xA;{&#xD;&#xA;&#x9;_UpProg1 99 &quot;Attempting to Schedule Task..&quot; 4&#xD;&#xA;&#x9;$dir=(split-path -parent $myinvocation.mycommand.definition)&#xD;&#xA;&#x9;$params=&quot;-HTMLReport $HTMLReport&quot;&#xD;&#xA;&#x9;if ($SendMail)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;$params+=' -SendMail:$true'&#xD;&#xA;&#x9;&#x9;$params+=&quot; -MailFrom:$MailFrom -MailTo:$MailTo -MailServer:$MailServer&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;$task = &quot;powershell -c \&quot;&quot;pushd $dir; $($myinvocation.mycommand.definition) $params\&quot;&quot;&quot;&#xD;&#xA;&#x9;Write-Output &quot;Attempting to schedule task as $($ScheduleAs)...&quot;&#xD;&#xA;&#x9;Write-Output &quot;Task to schedule: $($task)&quot;&#xD;&#xA;&#x9;schtasks /Create /RU $ScheduleAs /RP /SC DAILY /ST 22:00 /TN EER /TR $task&#xD;&#xA;}" />
</CodeSnippets>