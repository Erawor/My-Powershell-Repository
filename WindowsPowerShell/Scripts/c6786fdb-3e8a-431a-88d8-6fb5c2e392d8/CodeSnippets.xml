<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="# ==============================================================================================&#xD;&#xA;# NAME: HotFix invetory&#xD;&#xA;# &#xD;&#xA;# AUTHOR: Mohamed Garrana&#xD;&#xA;# DATE  : 4/3/2010&#xD;&#xA;# &#xD;&#xA;# COMMENT: &#xD;&#xA;# RED on screen alerts are oriented for Active Directory connection events&#xD;&#xA;# Yellow on screen Alerts are oriented for WMI connection events&#xD;&#xA;#This scripts connects to Active Directory LDAP path and gets computer object information like &#xD;&#xA;#(name , Operatingsystem , OSversion , OSService pack, Hotfix (update) list , lastbootuptime) exporting them to CSV file which can be &#xD;&#xA;#easily viewed in excel&#xD;&#xA;#you can also use this script to search for computers that did or did not have a certian HOTFIX installed , the output is also&#xD;&#xA;#a csv file with a nice screen output &#xD;&#xA;# ==============================================================================================&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function get-adcomputerinfo {&#xD;&#xA;&#x9;#connects to AD and gets computer objects in the $ADpath variable , and then running get-ADinfoOS function for each computer object&#xD;&#xA;&#x9;Trap { Write-Host -ForegroundColor Red &quot;   &lt;&lt;&lt; Error &gt;&gt;&gt;  could not connect to Active directory, please make sure that ADpath var is correctly SET !&quot;&#xD;&#xA;&#x9;&#x9;Break&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;$searcher = New-Object DirectoryServices.DirectorySearcher&#xD;&#xA;&#x9;$RootSearch = New-Object directoryservices.directoryentry $ADpath&#xD;&#xA;&#x9;$searcher.searchroot = $RootSearch&#xD;&#xA;&#x9;$searcher.filter = &quot;(objectClass=computer)&quot;&#xD;&#xA;&#x9;$allcomps = $searcher.findall() &#xD;&#xA;&#x9;foreach ($comp in $allcomps) { get-ADinfoOS }&#x9;&#xD;&#xA;&#x9;$objs = $allcomps | Measure-Object&#xD;&#xA;&#x9;$objcount = $objs.Count&#xD;&#xA;&#x9;Write-Host -BackgroundColor green -ForegroundColor blue &quot; Script succesfully Completed on $objcount Active Directory computer objects&quot;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;function get-ADinfoOS {&#xD;&#xA;&#x9;#this function outputs a computer object with some properties (name , Operatingsystem , OSversion , OSService pack)&#xD;&#xA;&#x9;#these properties are retreived from Active Directory Computer objects attributes&#xD;&#xA;&#x9;BEGIN { }&#xD;&#xA;&#x9;PROCESS  {&#xD;&#xA;&#x9;#Write-Host $comp.Properties.name&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;$name = $comp.Properties.name[0] &#xD;&#xA;&#x9;$os= $comp.Properties.operatingsystem[0] &#xD;&#xA;&#x9;$osver= $comp.Properties.operatingsystemversion[0] &#xD;&#xA;&#x9;$ossp=$comp.Properties.operatingsystemservicepack[0]&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;Catch {&#xD;&#xA;&#x9;Write-Host -ForegroundColor Red &quot;   &lt;&lt; WHoops ... &gt;&gt;     $name    : Error reading a required property from the AD computer object, this might be a cluster resource name or the property has a null value . execution will continue anyway ;)&quot;&#xD;&#xA;&#x9;&#x9;continue&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;finally {&#xD;&#xA;&#xD;&#xA;&#x9;$computer = New-Object psobject &#xD;&#xA;&#x9;$Computer | Add-Member NoteProperty Name ($name)&#xD;&#xA;&#x9;$computer | Add-Member NoteProperty OperatingSystem ($os)&#xD;&#xA;&#x9;$Computer | Add-Member NoteProperty OSVersion ($osver)&#xD;&#xA;&#x9;$computer | Add-Member Noteproperty OSServicePack ($ossp)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;$hotfixobj = Get-HotFix -ComputerName $name&#xD;&#xA;&#x9;#getting lastbootup time property from WMI class Win32_operatingsystem&#xD;&#xA;&#x9;$Timeinfo = Get-WmiObject -Query &quot;select LastBootUpTime from Win32_OperatingSystem&quot; -ComputerName $name&#xD;&#xA;&#x9;$LastBootup = $Timeinfo.ConvertToDateTime($Timeinfo.LastBootUpTime)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;Catch {&#xD;&#xA;&#x9;Write-Host -ForegroundColor yellow &quot;   &lt;&lt; WHoops ... &gt;&gt;     $name    : Error reading the required WMI Class , Please make sure that you have appropriate permissions on $name and that the computer is online . execution will continue anyway ;)&quot;&#xD;&#xA;&#x9;&#x9;continue&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;Finally {&#xD;&#xA;&#x9;$hotfixlist = &quot;&quot;&#xD;&#xA;&#x9;$hotfixobj | ForEach-Object { &#xD;&#xA;&#x9;if ($_.HotFixID -ne &quot;File 1&quot; ) &#xD;&#xA;&#x9;{ $hotfixlist = $hotfixlist + $_.HotFixID + &quot;,&quot; } &#xD;&#xA;&#x9; }&#xD;&#xA;&#x9;$computer | Add-Member NoteProperty HotFixList ($hotfixlist)&#xD;&#xA;&#x9;$computer | Add-Member NoteProperty LastBootUpTime ($LastBootup)&#xD;&#xA;&#x9;Write-Output $computer&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;} &#xD;&#xA;&#x9;END{}&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function filter-hotfixnotinstalled {&#xD;&#xA;&#x9;#filter-hotfixnotinstalled gets psobject pipelined from get-ADinfoOS and filters these objects only outputing the computer object &#xD;&#xA;&#x9;#missing the hotfix specified in $updateid&#xD;&#xA;&#x9;Begin {Write-Host -BackgroundColor green -ForegroundColor blue &quot; the following Computer does not have the hot fix $updateid installed &quot; }&#xD;&#xA;&#x9;Process {&#xD;&#xA;&#x9;if (-not $_.HotFixList.Contains($updateID))&#xD;&#xA;&#x9;&#x9;{ &#xD;&#xA;&#x9;&#x9;write-output $_&#xD;&#xA;&#x9;&#x9;Write-Host -BackgroundColor green -ForegroundColor blue $_.Name&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;End{}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;function filter-hotfixinstalled {&#xD;&#xA;&#x9;#filter-hotfixinstalled gets psobject pipelined from get-ADinfoOS and filters these objects only outputing the computer object &#xD;&#xA;&#x9;#having the hotfix specified in $updateid installed .&#xD;&#xA;&#x9;Begin {write-host -BackgroundColor green -ForegroundColor blue &quot; the following Computer does have the hot fix $updateid installed &quot; }&#xD;&#xA;&#x9;Process {&#xD;&#xA;&#x9;if ( $_.HotFixList.Contains($updateID))&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;write-output $_&#xD;&#xA;&#x9;&#x9;Write-Host -BackgroundColor green -ForegroundColor blue $_.Name&#x9;&#x9;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;End{}&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;&#xD;&#xA;#-1-------------------------------------------------------------------&#xD;&#xA;#Hot fix inventory&#xD;&#xA;#you can use the script like this to export AD computers into a csv file with information like&#xD;&#xA;#name , Operatingsystem , OSversion , OSService pack and hotfix list&#xD;&#xA;#$ADpath = &quot;LDAP://OU=Marketing,DC=Microsoft,DC=dom&quot; #this will grap all the AD computer objects in the marketing OU in the microsoft domain&#xD;&#xA;#$outfile = &quot;c:\test\ADHotFivinv.csv&quot; #sets the location of the out csv file if you'r going to use Export-Csv&#xD;&#xA;#get-adcomputerinfo | Export-Csv $outfile&#xD;&#xA;&#xD;&#xA;#-2--------------------------------------------------------------------------------------------&#xD;&#xA;#Looking for computers with a certian hot fix not installed&#xD;&#xA;#you can use the script this way to search for AD computers not having a certian HotFix installed&#xD;&#xA;#you specify the hotfix KB ID in the variable $updateid&#xD;&#xA;#$ADpath = &quot;LDAP://OU=Marketing,DC=Microsoft,DC=dom&quot; #this will grap all the AD computer objects in the marketing OU in the microsoft domain&#xD;&#xA;#$outfile = &quot;c:\test\KBnotinstalled.csv&quot; #sets the location of the out csv file if you'r going to use Export-Csv&#xD;&#xA;#$updateid  = &quot;KB979306&quot;&#xD;&#xA;#get-adcomputerinfo | filter-hotfixnotinstalled | select Name , OperatingSystem , OSVersion, OSServicePack ,LastBootUpTime  | Export-Csv $outfile&#xD;&#xA;&#xD;&#xA;#-3-------------------------------------------------------------------------------------------------&#xD;&#xA;#looking for computers with a certian hotfix installed&#xD;&#xA;#you can use the script this way to search for AD computers not having a certian HotFix installed&#xD;&#xA;#you specify the hotfix KB ID in the variable $updateid&#xD;&#xA;#you can also select LastBootUpTime property to be attached to the object , because some hotfixes are useless unless you restart the system&#xD;&#xA;#so you get to know how effective the installed updates are&#xD;&#xA;#$ADpath = &quot;LDAP://OU=Marketing,DC=Microsoft,DC=dom&quot; #this will grap all the AD computer objects in the marketing OU in the microsoft domain&#xD;&#xA;#$outfile = &quot;c:\test\KBinstalled.csv&quot;&#xD;&#xA;#$updateid  = &quot;KB967723&quot;&#xD;&#xA;#get-adcomputerinfo | filter-hotfixinstalled | select Name , OperatingSystem , OSVersion, OSServicePack ,LastBootUpTime  | Export-Csv $outfile&#xD;&#xA;&#xD;&#xA;#you can always use out-gridview instead of export-csv since all these function outputs psobjects&#xD;&#xA;&#xD;&#xA;" />
</CodeSnippets>