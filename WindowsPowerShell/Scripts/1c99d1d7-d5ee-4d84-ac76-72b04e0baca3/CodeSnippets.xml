<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | out-null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer();&#xD;&#xA;&#xD;&#xA;function ProcessGroup {&#xD;&#xA;    param($parentGroup);&#xD;&#xA;&#xD;&#xA;    #depth first, so you delete the deepest group first&#xD;&#xA;    $childCount = 0;&#xD;&#xA;&#xD;&#xA;    $parentGroup.GetChildTargetGroups() | foreach-object {&#xD;&#xA;        $processCount = ProcessGroup($_);&#xD;&#xA;        $childCount = $childCount + $processCount;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    $count = 0;&#xD;&#xA;&#xD;&#xA;    $count = $parentGroup.GetComputerTargets($false).Count;&#xD;&#xA;&#xD;&#xA;    $totalCount = $count + $childCount;&#xD;&#xA;&#xD;&#xA;    if ($totalCount -eq 0) {&#xD;&#xA;        if ($parentGroup.Id -eq [Microsoft.UpdateServices.Administration.ComputerTargetGroupId]::AllComputers) { }&#xD;&#xA;        elseif ($parentGroup.Id -eq [Microsoft.UpdateServices.Administration.ComputerTargetGroupId]::UnassignedComputers) { }&#xD;&#xA;        elseif ($parentGroup.Id -eq [Microsoft.UpdateServices.Administration.ComputerTargetGroupId]::WindowsProductIdValidated) {}&#xD;&#xA;        else {&#xD;&#xA;            &quot;Delete &quot;+$parentGroup.Name | out-host;&#xD;&#xA;            $parentGroup.Delete();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return $totalCount;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;$AllComputersGroup = $wsus.GetComputerTargetGroup([Microsoft.UpdateServices.Administration.ComputerTargetGroupId]::AllComputers);&#xD;&#xA;ProcessGroup($AllComputersGroup) | out-null;&#xD;&#xA;" />
</CodeSnippets>