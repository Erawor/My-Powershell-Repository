<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets>
  <Code Content="########## Functions&#xD;&#xA;function menu&#xD;&#xA;{&#xD;&#xA;$date1 = [DateTime]::UtcNow.ToShortDateString() | % { $_.split(&quot;/&quot;)[0] }&#xD;&#xA;$date2 = [DateTime]::UtcNow.ToShortDateString() | % { $_.split(&quot;/&quot;)[1] }&#xD;&#xA;$date3 = [DateTime]::UtcNow.ToShortDateString() | % { $_.split(&quot;/&quot;)[2] }&#xD;&#xA;$date4 = (get-date -displayhint time).tostring()&#xD;&#xA;$date5 = $date4 | % { $_.split(&quot; &quot;)[1] }&#xD;&#xA;$date6 = $date5 | % { $_.split(&quot;:&quot;)[0] }&#xD;&#xA;$date7 = $date5 | % { $_.split(&quot;:&quot;)[1] }&#xD;&#xA;$datestamp = $date1+&quot;&quot;+$date2+&quot;-&quot;+$date3+&quot;-&quot;+$date6+&quot;&quot;+$date7;&#xD;&#xA;cls&#xD;&#xA;write-host &quot;-------------------------------------------------------------&quot;&#xD;&#xA;write-host &quot;-------------------------------------------------------------&quot;&#xD;&#xA;write-host &quot;-------------------------------------------------------------&quot;&#xD;&#xA;write-host &quot;welcome to the WSUS approval system on&quot; $datestamp&#xD;&#xA;write-host &quot;Please select an option&quot;&#xD;&#xA;write-host &quot;&quot;&#xD;&#xA;write-host &quot;       1. Display WSUS patch summary&quot;&#xD;&#xA;write-host &quot;       2. Output text file and report of unapproved patches&quot;&#xD;&#xA;write-host &quot;       3. Output text file of approved patches&quot;&#xD;&#xA;write-host &quot;       4. Select Target Group&quot;&#xD;&#xA;write-host &quot;       5. Select Patch approval file&quot;&#xD;&#xA;write-host &quot;       6. Email Patch approval Report&quot;&#xD;&#xA;write-host &quot;       7. Apply Selected patch file to target group&quot;&#xD;&#xA;write-host &quot;       8. Clear selections&quot;&#xD;&#xA;write-host &quot;       9. View log of recent approvals&quot;&#xD;&#xA;write-host &quot;       10. Exit&quot;&#xD;&#xA;write-host &quot;&quot;&#xD;&#xA;write-host &quot;-------------------------------------------------------------&quot;&#xD;&#xA;write-host &quot;Selcted group: $selectedgroup&quot;&#xD;&#xA;write-host &quot;Selcted file: $selectedfile&quot;&#xD;&#xA;#write-host &quot;Target Group: &quot; $targetgroup.name&#xD;&#xA;write-host &quot;-------------------------------------------------------------&quot;&#xD;&#xA;$elect = read-host &quot;Please make a selection&quot;&#xD;&#xA; switch ($elect)&#xD;&#xA;    {&#xD;&#xA;        1 {patchsummary $wsus}&#xD;&#xA;        2 {unapprovedreport $DirectoryR}&#xD;&#xA;        3 {approvedreport $DirectoryR}&#xD;&#xA;        4 {groupselect}&#xD;&#xA;        5 {fileselect $Directory}&#xD;&#xA;        6 {emailreport}&#xD;&#xA;        7 {approvepatches}&#xD;&#xA;        8 {clearselect}&#xD;&#xA;        9 {viewlog}&#xD;&#xA;        10 {exit}&#xD;&#xA;        default {&quot;Sorry $elect is not a valid selection&quot;; sleep 4; $elect = read-host &quot;Do you wish to continue y/n&quot;; escape $elect}&#xD;&#xA;         &#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function patchsummary ($wsus)&#xD;&#xA;{&#xD;&#xA;cls&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer();&#xD;&#xA;$wsus.GetStatus()&#xD;&#xA;$elect = read-host &quot;Do you wish to continue y/n&quot;; escape $elect&#xD;&#xA;sleep 2&#xD;&#xA;menu&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function unapprovedreport&#xD;&#xA;{&#xD;&#xA;cls&#xD;&#xA;write-host &quot;creating filess please wait&quot;&#xD;&#xA;&#xD;&#xA;$updateScope = new-object Microsoft.UpdateServices.Administration.UpdateScope;&#xD;&#xA;$updateScope.ApprovedStates = [Microsoft.UpdateServices.Administration.ApprovedStates]::NotApproved;&#xD;&#xA;$updateScope.UpdateSources = [Microsoft.UpdateServices.Administration.UpdateSources]::MicrosoftUpdate;&#xD;&#xA;$updateScope.UpdateApprovalActions = [Microsoft.UpdateServices.Administration.UpdateApprovalActions]::All;&#xD;&#xA;$title = &quot;Unapproved-&quot;&#xD;&#xA;$title2 = &quot;ForResourceApproval&quot;&#xD;&#xA;$approvedlist = $DirectoryR+&quot;&quot;+$title+&quot;&quot;+$datestamp+&quot;.txt&quot;&#xD;&#xA;$approvedlist2 = $DirectoryR+&quot;&quot;+$title2+&quot;&quot;+$datestamp+&quot;.csv&quot;&#xD;&#xA;$theupdates = $wsus.GetUpdates($updateScope);&#xD;&#xA;                    $theupdates | foreach-object { &#xD;&#xA;                        $update = $_&#xD;&#xA;                        echo $update.Title | out-file $approvedlist -append&#xD;&#xA;                        }&#xD;&#xA;$theupdates = $wsus.GetUpdates($updateScope);&#xD;&#xA;                    $theupdates | foreach-object { &#xD;&#xA;                        $update = $_&#xD;&#xA;                        $titles = $update.Title&#xD;&#xA;                        $desc = $update.Description&#xD;&#xA;                        $kbno = $update.KnowledgebaseArticles&#xD;&#xA;                        $bulno = $update.SecurityBulletins&#xD;&#xA;                        echo &quot;$kbno@$bulno@$titles@$desc&quot; | out-file $approvedlist2 -append &#xD;&#xA;                        }&#xD;&#xA;                        cls&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        write-host &quot;Two files have been created in $DirectoryR&quot;&#xD;&#xA;                        write-host &quot;The file that can be used as the upload file is&quot;&#xD;&#xA;                        write-host $approvedlist&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        write-host &quot;The @ delimited report CSV file is&quot;&#xD;&#xA;                        write-host $approvedlist2&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        $elect = read-host &quot;Do you wish to continue y/n&quot;&#xD;&#xA;                        escape $elect&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        menu&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function approvedreport&#xD;&#xA;{&#xD;&#xA;cls&#xD;&#xA;write-host &quot;creating files please wait&quot;&#xD;&#xA;$updateScope = new-object Microsoft.UpdateServices.Administration.UpdateScope;&#xD;&#xA;$updateScope.ApprovedStates = [Microsoft.UpdateServices.Administration.ApprovedStates]::LatestRevisionApproved;&#xD;&#xA;$updateScope.UpdateSources = [Microsoft.UpdateServices.Administration.UpdateSources]::MicrosoftUpdate;&#xD;&#xA;$updateScope.UpdateApprovalActions = [Microsoft.UpdateServices.Administration.UpdateApprovalActions]::All;&#xD;&#xA;$title = &quot;Approvals-&quot;&#xD;&#xA;$approvedlist = $DirectoryR+&quot;&quot;+$title+&quot;&quot;+$datestamp+&quot;.txt&quot;&#xD;&#xA;$theupdates = $wsus.GetUpdates($updateScope);&#xD;&#xA;                    $theupdates | foreach-object { &#xD;&#xA;                        $update = $_&#xD;&#xA;                        echo $update.Title | out-file $approvedlist  -append&#xD;&#xA;                        }&#xD;&#xA;                        cls&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        write-host &quot;The list of approved updates can be used as an upload file&quot;&#xD;&#xA;                        write-host $approvedlist&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        $elect = read-host &quot;Do you wish to continue y/n&quot;&#xD;&#xA;                        escape $elect&#xD;&#xA;                        write-host &quot;&quot;&#xD;&#xA;                        menu&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;function groupselect&#xD;&#xA;{&#xD;&#xA;write-host &quot;Please select a target group number&quot;&#xD;&#xA;sleep 1 &#xD;&#xA;$thelist&#xD;&#xA;$selection = read-host &quot;Please select a target group number&quot;&#xD;&#xA;sleep 2&#xD;&#xA;write-host &quot;You have selected group $selection&quot;&#xD;&#xA;groupcheck $selection&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function groupcheck ($selection, $all)&#xD;&#xA;{&#xD;&#xA;    $all = $wsus.getcomputertargetgroups()&#xD;&#xA;    $grouplist = $all | foreach-object {$_.name}&#xD;&#xA;    $counter = 0&#xD;&#xA;    $thelist = $grouplist | foreach {&#xD;&#xA;    $group = $_&#xD;&#xA;    $counter++&#xD;&#xA;    &quot;$delim$counter$delim$group&quot;&#xD;&#xA;     }&#xD;&#xA;    $nogroups = $thelist.count&#xD;&#xA;    cls&#xD;&#xA;    write-host &quot;selection is $selection&quot;&#xD;&#xA;    write-host &quot;No Groups is $nogroups&quot;&#xD;&#xA;    #if ($selection -gt $nogroups){&#xD;&#xA;    #write-host &quot;this is not a valid selection please re-run selecting a valid group&quot;; sleep 6; menu}&#xD;&#xA;    $select = &quot;$delim$selection$delim&quot;&#xD;&#xA;    $selectedgroup = $thelist | where { $_ -match $select} &#xD;&#xA;    $selectedgroup2 = $selectedgroup | % { $_.split(&quot;:&quot;)[2]}&#xD;&#xA;    $selectedgroup = $selectedgroup2&#xD;&#xA;    sleep 3&#xD;&#xA;    targetgroup $all $selectedgroup&#xD;&#xA;    &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function targetgroup ($all, $selectedgroup)&#xD;&#xA;{&#xD;&#xA;    $targetgroup = $all | where { $_.name -eq $selectedgroup } &#xD;&#xA;    childcheck $targetgroup  &#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function childcheck ($targetgroup)&#xD;&#xA;{&#xD;&#xA;    $targetgroup.GetChildTargetGroups()&#xD;&#xA;    $childgroups = $targetgroup.GetChildTargetGroups()&#xD;&#xA;    $childgroupcount = $childgroups.count&#xD;&#xA;    if ($childgroupcount -gt 0){&#xD;&#xA;    write-host &quot;The selected group has $childgroupcount sub folders patches applied at this level will apply to all sub folders&quot;&#xD;&#xA;    $elect = read-host &quot;Do you wish to continue y/n&quot;&#xD;&#xA;    escape $elect}&#xD;&#xA;    write-host &quot;group has $childgroupcount sub folders&quot;&#xD;&#xA;    sleep 3&#xD;&#xA;    menu&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function escape ($elect)&#xD;&#xA;{&#xD;&#xA;    switch ($elect)&#xD;&#xA;    {&#xD;&#xA;        y {&quot;the selection was $elect&quot;}&#xD;&#xA;        n {&quot;the selection was $elect the script will now exit&quot;; exit}&#xD;&#xA;        default {&quot;Sorry $elect is not a valid selection&quot;; sleep 4; $elect = read-host &quot;Do you wish to continue y/n&quot;; escape $elect}&#xD;&#xA;         &#xD;&#xA;    }&#xD;&#xA;}  &#xD;&#xA;&#xD;&#xA;function fileselect ($Directory)&#xD;&#xA;{&#xD;&#xA;write-host &quot;Please select a file&quot;&#xD;&#xA;sleep 1 &#xD;&#xA;$counter = 0&#xD;&#xA;$delim = &quot;:&quot;&#xD;&#xA;$thefilelist = ls $Directory | foreach {&#xD;&#xA;    $filename = $_&#xD;&#xA;    $counter++&#xD;&#xA;    &quot;$delim$counter$delim$filename&quot;&#xD;&#xA;     }&#xD;&#xA;$thefilelist  &#xD;&#xA;$selection = read-host &quot;Please select a target approval file&quot;&#xD;&#xA;$select = &quot;$delim$selection$delim&quot;&#xD;&#xA;if ($selection -gt $counter){&#xD;&#xA;    write-host &quot;this is not a valid selection please re-run selecting a valid file&quot;; sleep 6; menu}&#xD;&#xA;sleep 2&#xD;&#xA;$selectedfile2 = $thefilelist | where { $_ -match $select} | % { $_.split(&quot;:&quot;)[2]}&#xD;&#xA;$selectedfile = $Directory+&quot;&quot;+$selectedfile2&#xD;&#xA;sleep 2&#xD;&#xA;menu&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function emailreport&#xD;&#xA;{&#xD;&#xA;cls&#xD;&#xA;write-host &quot;Please select a report file&quot;&#xD;&#xA;sleep 1 &#xD;&#xA;$counter = 0&#xD;&#xA;$delim = &quot;:&quot;&#xD;&#xA;$thefilelist = ls $DirectoryR &quot;ForResourceApproval*&quot;| foreach {&#xD;&#xA;    $filename = $_&#xD;&#xA;    $counter++&#xD;&#xA;    &quot;$counter$delim$filename&quot;&#xD;&#xA;     }&#xD;&#xA;$thefilelist     &#xD;&#xA;$selection = read-host &quot;Please select a target report file&quot;&#xD;&#xA;$select = $selection+&quot;_&quot;&#xD;&#xA;sleep 2&#xD;&#xA;$selectedfile2 = $thefilelist | where { $_ -match $select} | % { $_.split(&quot;:&quot;)[1]}&#xD;&#xA;$selectedfiler = $DirectoryR+&quot;&quot;+$selectedfile2&#xD;&#xA;&#xD;&#xA;$smtpServer = &quot;slcexhtcas1&quot;&#xD;&#xA;&#xD;&#xA;$msg = new-object Net.Mail.MailMessage&#xD;&#xA;$att = new-object Net.Mail.Attachment($selectedfiler)&#xD;&#xA;$smtp = new-object Net.Mail.SmtpClient($smtpServer)&#xD;&#xA;&#xD;&#xA;$msg.From = &quot;&quot; #FROM ADDRESS&#xD;&#xA;$msg.To.Add(&quot;xx@xx.xx.xx&quot;)&#xD;&#xA;$msg.Subject = &quot;WSUS Report File&quot;&#xD;&#xA;$msg.Body = &quot;Report File Attached&quot;&#xD;&#xA;$msg.Attachments.Add($att)&#xD;&#xA;&#xD;&#xA;$smtp.Send($msg)&#xD;&#xA;&#xD;&#xA;$att.Dispose()&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;sleep 2&#xD;&#xA;menu&#xD;&#xA;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function approvepatches&#xD;&#xA;{&#xD;&#xA;cls&#xD;&#xA;write-host &quot;You have selected to apply patches listed in $selectedfile&quot;&#xD;&#xA;write-host &quot;to the selected group $selectedgroup&quot;&#xD;&#xA;$thefile = cat $selectedfile&#xD;&#xA;$filesummary = $thefile.count&#xD;&#xA;write-host &quot;Number of patches in file : $filesummary&quot;&#xD;&#xA;$elect = read-host &quot;Are you 100% happy you wish to continue y/n&quot;&#xD;&#xA;cls&#xD;&#xA;$action = [Microsoft.UpdateServices.Administration.UpdateApprovalAction]::Install;&#xD;&#xA;$allupdates = $wsus.GetUpdates()&#xD;&#xA;$selection = cat $selectedfile&#xD;&#xA;$allupdates | foreach {&#xD;&#xA;    $update = $_&#xD;&#xA;        $selection | foreach {&#xD;&#xA;            $patchname = $_&#xD;&#xA;            $patchcheck = &quot;$patchname&quot;&#xD;&#xA;            $updatecheck = $update.Title&#xD;&#xA;            #$patchmatch = $allupdates | where { $_ -match $patchname}&#xD;&#xA;            if ($updatecheck -contains $patchcheck){$patchmatch = $update&#xD;&#xA;            write-host &quot;--------------------------------Yes&quot; $patchmatch.Title &#xD;&#xA;            $patchmatch.Approve($action,$targetgroup)&#xD;&#xA;            }&#xD;&#xA;            }   &#xD;&#xA;            }&#xD;&#xA;            logging&#xD;&#xA;            menu&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function clearselect&#xD;&#xA;{&#xD;&#xA;$selectedgroup = &quot;&quot;&#xD;&#xA;$selectedfile = &quot;&quot;&#xD;&#xA;$targetgroup = &quot;&quot;&#xD;&#xA;menu&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function viewlog&#xD;&#xA;{&#xD;&#xA;cls&#xD;&#xA;$directoryl = &quot;C:\Program Files\wsus-operations\Log\&quot;&#xD;&#xA;write-host &quot;Please select a file&quot;&#xD;&#xA;sleep 1 &#xD;&#xA;$counter = 0&#xD;&#xA;$delim = &quot;:&quot;&#xD;&#xA;$thefilelist = ls $Directoryl | foreach {&#xD;&#xA;    $filename = $_&#xD;&#xA;    $counter++&#xD;&#xA;    &quot;$counter$delim$filename&quot;&#xD;&#xA;     }&#xD;&#xA;$thefilelist     &#xD;&#xA;$selection = read-host &quot;Please select a target file&quot;&#xD;&#xA;$select = $selection+&quot;_&quot;&#xD;&#xA;sleep 2&#xD;&#xA;$selectedfile2 = $thefilelist | where { $_ -match $select} | % { $_.split(&quot;:&quot;)[1]}&#xD;&#xA;$selectedfilel = $directoryl+&quot;&quot;+$selectedfile2&#xD;&#xA;write-host &quot;Log file&quot;&#xD;&#xA;cat $selectedfilel&#xD;&#xA;$elect = read-host &quot;Do you wish to continue y/n&quot;; &#xD;&#xA;escape $elect&#xD;&#xA;sleep 2&#xD;&#xA;menu&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function logging &#xD;&#xA;{&#xD;&#xA;$who = [System.Security.Principal.WindowsIdentity]::GetCurrent()&#xD;&#xA;$whoisit = $who.Name&#xD;&#xA;$groupis = $targetgroup.name&#xD;&#xA;$emailFrom = &quot;&quot; #ADD A FROM ADDRESS&#xD;&#xA;$emailTo = &quot;&quot; #ADD AN EMAIL RECIPIENT &#xD;&#xA;$subject = &quot;WSUS Install log&quot;&#xD;&#xA;$body = &quot;$whoisit has applied $filesummary patches to $groupis&quot;&#xD;&#xA;$body2 = $datestamp+&quot;-&quot;+$body&#xD;&#xA;echo $body2 | out-file &quot;C:\Program Files\wsus-operations\Log\activitylog.txt&quot; -append&#xD;&#xA;$smtpServer = &quot;&quot; # YOUR MAIL SERVER HERE&#xD;&#xA;$smtp = new-object Net.Mail.SmtpClient($smtpServer)&#xD;&#xA;$smtp.Send($emailFrom, $emailTo, $subject, $body)&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;###################################################################################################################################&#xD;&#xA;######### Main Script for WSUS patch approval #####################################################################################&#xD;&#xA;&#xD;&#xA;[reflection.assembly]::LoadWithPartialName(&quot;Microsoft.UpdateServices.Administration&quot;) | out-null&#xD;&#xA;$wsus = [Microsoft.UpdateServices.Administration.AdminProxy]::GetUpdateServer();&#xD;&#xA;&#xD;&#xA;$updateScope = new-object Microsoft.UpdateServices.Administration.UpdateScope;&#xD;&#xA;$updateScope.UpdateSources = [Microsoft.UpdateServices.Administration.UpdateSources]::MicrosoftUpdate;&#xD;&#xA;$updateScope.UpdateApprovalActions = [Microsoft.UpdateServices.Administration.UpdateApprovalActions]::All;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$all = $wsus.getcomputertargetgroups()&#xD;&#xA;$grouplist = $all | foreach-object {$_.name}&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$date1 = [DateTime]::UtcNow.ToShortDateString() | % { $_.split(&quot;/&quot;)[0] }&#xD;&#xA;$date2 = [DateTime]::UtcNow.ToShortDateString() | % { $_.split(&quot;/&quot;)[1] }&#xD;&#xA;$date3 = [DateTime]::UtcNow.ToShortDateString() | % { $_.split(&quot;/&quot;)[2] }&#xD;&#xA;$date4 = (get-date -displayhint time).tostring()&#xD;&#xA;$date5 = $date4 | % { $_.split(&quot; &quot;)[1] }&#xD;&#xA;$date6 = $date5 | % { $_.split(&quot;:&quot;)[0] }&#xD;&#xA;$date7 = $date5 | % { $_.split(&quot;:&quot;)[1] }&#xD;&#xA;$datestamp = $date1+&quot;&quot;+$date2+&quot;-&quot;+$date3+&quot;-&quot;+$date6+&quot;&quot;+$date7;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;$counter = 0&#xD;&#xA;$delim = &quot;:&quot;&#xD;&#xA;$thelist = $grouplist | foreach {&#xD;&#xA;            $group = $_&#xD;&#xA;            $counter++&#xD;&#xA;             &quot;$delim$counter$delim$group&quot;&#xD;&#xA;            }&#xD;&#xA;$Directory = &quot;C:\Program Files\wsus-operations\Upload\&quot;&#xD;&#xA;$DirectoryR = &quot;C:\Program Files\wsus-operations\Report\&quot;&#xD;&#xA;$selectedgroup = &quot;&quot;&#xD;&#xA;$selectedfile = &quot;&quot;&#xD;&#xA;&#xD;&#xA;write-host &quot;-------------------------------------------------------------&quot;&#xD;&#xA;write-host &quot;-------------------------------------------------------------&quot;&#xD;&#xA;write-host &quot;----------------WSUS PATCH OPERATIONS------------------------&quot;&#xD;&#xA;menu $selectedgroup&#xD;&#xA;" />
</CodeSnippets>